// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gitlab.skig.tech/zero-core/common/zorm/model"
)

func newWinGameList(db *gorm.DB, opts ...gen.DOOption) winGameList {
	_winGameList := winGameList{}

	_winGameList.winGameListDo.UseDB(db, opts...)
	_winGameList.winGameListDo.UseModel(&model.WinGameList{})

	tableName := _winGameList.winGameListDo.TableName()
	_winGameList.ALL = field.NewAsterisk(tableName)
	_winGameList.ID = field.NewInt64(tableName, "id")
	_winGameList.Code = field.NewString(tableName, "code")
	_winGameList.Name = field.NewString(tableName, "name")
	_winGameList.Icon = field.NewString(tableName, "icon")
	_winGameList.GroupID = field.NewInt64(tableName, "group_id")
	_winGameList.PlatListID = field.NewInt64(tableName, "plat_list_id")
	_winGameList.RevenueRate = field.NewField(tableName, "revenue_rate")
	_winGameList.Maintenance = field.NewString(tableName, "maintenance")
	_winGameList.GameCount = field.NewInt64(tableName, "game_count")
	_winGameList.Remark = field.NewString(tableName, "remark")
	_winGameList.Sort = field.NewInt64(tableName, "sort")
	_winGameList.Status = field.NewInt64(tableName, "status")
	_winGameList.CreatedAt = field.NewInt64(tableName, "created_at")
	_winGameList.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_winGameList.UpdatedUser = field.NewString(tableName, "updated_user")
	_winGameList.OperatorName = field.NewString(tableName, "operator_name")
	_winGameList.Category = field.NewString(tableName, "category")

	_winGameList.fillFieldMap()

	return _winGameList
}

type winGameList struct {
	winGameListDo

	ALL          field.Asterisk
	ID           field.Int64
	Code         field.String // 平台编码
	Name         field.String // 名称
	Icon         field.String // 图标
	GroupID      field.Int64  // 类型:1-体育 2-电子 3-真人 4-捕鱼 5-棋牌 6-电竞 7-彩票 8-动物 9-快速 10-技能 11-table game
	PlatListID   field.Int64  // 平台配置表ID(plat_list)
	RevenueRate  field.Field  // 税收比例
	Maintenance  field.String // 维护时间
	GameCount    field.Int64  // 游戏数量
	Remark       field.String // 备注
	Sort         field.Int64  // 排序: 从高到低
	Status       field.Int64  // 状态: 1-启用 0-停用
	CreatedAt    field.Int64
	UpdatedAt    field.Int64
	UpdatedUser  field.String // 最后更新人
	OperatorName field.String // 操作人姓名
	Category     field.String // 分类id 外联字典id

	fieldMap map[string]field.Expr
}

func (w winGameList) Table(newTableName string) *winGameList {
	w.winGameListDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w winGameList) As(alias string) *winGameList {
	w.winGameListDo.DO = *(w.winGameListDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *winGameList) updateTableName(table string) *winGameList {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt64(table, "id")
	w.Code = field.NewString(table, "code")
	w.Name = field.NewString(table, "name")
	w.Icon = field.NewString(table, "icon")
	w.GroupID = field.NewInt64(table, "group_id")
	w.PlatListID = field.NewInt64(table, "plat_list_id")
	w.RevenueRate = field.NewField(table, "revenue_rate")
	w.Maintenance = field.NewString(table, "maintenance")
	w.GameCount = field.NewInt64(table, "game_count")
	w.Remark = field.NewString(table, "remark")
	w.Sort = field.NewInt64(table, "sort")
	w.Status = field.NewInt64(table, "status")
	w.CreatedAt = field.NewInt64(table, "created_at")
	w.UpdatedAt = field.NewInt64(table, "updated_at")
	w.UpdatedUser = field.NewString(table, "updated_user")
	w.OperatorName = field.NewString(table, "operator_name")
	w.Category = field.NewString(table, "category")

	w.fillFieldMap()

	return w
}

func (w *winGameList) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *winGameList) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 17)
	w.fieldMap["id"] = w.ID
	w.fieldMap["code"] = w.Code
	w.fieldMap["name"] = w.Name
	w.fieldMap["icon"] = w.Icon
	w.fieldMap["group_id"] = w.GroupID
	w.fieldMap["plat_list_id"] = w.PlatListID
	w.fieldMap["revenue_rate"] = w.RevenueRate
	w.fieldMap["maintenance"] = w.Maintenance
	w.fieldMap["game_count"] = w.GameCount
	w.fieldMap["remark"] = w.Remark
	w.fieldMap["sort"] = w.Sort
	w.fieldMap["status"] = w.Status
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["updated_at"] = w.UpdatedAt
	w.fieldMap["updated_user"] = w.UpdatedUser
	w.fieldMap["operator_name"] = w.OperatorName
	w.fieldMap["category"] = w.Category
}

func (w winGameList) clone(db *gorm.DB) winGameList {
	w.winGameListDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w winGameList) replaceDB(db *gorm.DB) winGameList {
	w.winGameListDo.ReplaceDB(db)
	return w
}

type winGameListDo struct{ gen.DO }

type IWinGameListDo interface {
	gen.SubQuery
	Debug() IWinGameListDo
	WithContext(ctx context.Context) IWinGameListDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWinGameListDo
	WriteDB() IWinGameListDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWinGameListDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWinGameListDo
	Not(conds ...gen.Condition) IWinGameListDo
	Or(conds ...gen.Condition) IWinGameListDo
	Select(conds ...field.Expr) IWinGameListDo
	Where(conds ...gen.Condition) IWinGameListDo
	Order(conds ...field.Expr) IWinGameListDo
	Distinct(cols ...field.Expr) IWinGameListDo
	Omit(cols ...field.Expr) IWinGameListDo
	Join(table schema.Tabler, on ...field.Expr) IWinGameListDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWinGameListDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWinGameListDo
	Group(cols ...field.Expr) IWinGameListDo
	Having(conds ...gen.Condition) IWinGameListDo
	Limit(limit int) IWinGameListDo
	Offset(offset int) IWinGameListDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWinGameListDo
	Unscoped() IWinGameListDo
	Create(values ...*model.WinGameList) error
	CreateInBatches(values []*model.WinGameList, batchSize int) error
	Save(values ...*model.WinGameList) error
	First() (*model.WinGameList, error)
	Take() (*model.WinGameList, error)
	Last() (*model.WinGameList, error)
	Find() ([]*model.WinGameList, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinGameList, err error)
	FindInBatches(result *[]*model.WinGameList, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WinGameList) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWinGameListDo
	Assign(attrs ...field.AssignExpr) IWinGameListDo
	Joins(fields ...field.RelationField) IWinGameListDo
	Preload(fields ...field.RelationField) IWinGameListDo
	FirstOrInit() (*model.WinGameList, error)
	FirstOrCreate() (*model.WinGameList, error)
	FindByPage(offset int, limit int) (result []*model.WinGameList, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWinGameListDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w winGameListDo) Debug() IWinGameListDo {
	return w.withDO(w.DO.Debug())
}

func (w winGameListDo) WithContext(ctx context.Context) IWinGameListDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w winGameListDo) ReadDB() IWinGameListDo {
	return w.Clauses(dbresolver.Read)
}

func (w winGameListDo) WriteDB() IWinGameListDo {
	return w.Clauses(dbresolver.Write)
}

func (w winGameListDo) Session(config *gorm.Session) IWinGameListDo {
	return w.withDO(w.DO.Session(config))
}

func (w winGameListDo) Clauses(conds ...clause.Expression) IWinGameListDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w winGameListDo) Returning(value interface{}, columns ...string) IWinGameListDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w winGameListDo) Not(conds ...gen.Condition) IWinGameListDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w winGameListDo) Or(conds ...gen.Condition) IWinGameListDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w winGameListDo) Select(conds ...field.Expr) IWinGameListDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w winGameListDo) Where(conds ...gen.Condition) IWinGameListDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w winGameListDo) Order(conds ...field.Expr) IWinGameListDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w winGameListDo) Distinct(cols ...field.Expr) IWinGameListDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w winGameListDo) Omit(cols ...field.Expr) IWinGameListDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w winGameListDo) Join(table schema.Tabler, on ...field.Expr) IWinGameListDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w winGameListDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWinGameListDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w winGameListDo) RightJoin(table schema.Tabler, on ...field.Expr) IWinGameListDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w winGameListDo) Group(cols ...field.Expr) IWinGameListDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w winGameListDo) Having(conds ...gen.Condition) IWinGameListDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w winGameListDo) Limit(limit int) IWinGameListDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w winGameListDo) Offset(offset int) IWinGameListDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w winGameListDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWinGameListDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w winGameListDo) Unscoped() IWinGameListDo {
	return w.withDO(w.DO.Unscoped())
}

func (w winGameListDo) Create(values ...*model.WinGameList) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w winGameListDo) CreateInBatches(values []*model.WinGameList, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w winGameListDo) Save(values ...*model.WinGameList) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w winGameListDo) First() (*model.WinGameList, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinGameList), nil
	}
}

func (w winGameListDo) Take() (*model.WinGameList, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinGameList), nil
	}
}

func (w winGameListDo) Last() (*model.WinGameList, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinGameList), nil
	}
}

func (w winGameListDo) Find() ([]*model.WinGameList, error) {
	result, err := w.DO.Find()
	return result.([]*model.WinGameList), err
}

func (w winGameListDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinGameList, err error) {
	buf := make([]*model.WinGameList, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w winGameListDo) FindInBatches(result *[]*model.WinGameList, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w winGameListDo) Attrs(attrs ...field.AssignExpr) IWinGameListDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w winGameListDo) Assign(attrs ...field.AssignExpr) IWinGameListDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w winGameListDo) Joins(fields ...field.RelationField) IWinGameListDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w winGameListDo) Preload(fields ...field.RelationField) IWinGameListDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w winGameListDo) FirstOrInit() (*model.WinGameList, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinGameList), nil
	}
}

func (w winGameListDo) FirstOrCreate() (*model.WinGameList, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinGameList), nil
	}
}

func (w winGameListDo) FindByPage(offset int, limit int) (result []*model.WinGameList, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w winGameListDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w winGameListDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w winGameListDo) Delete(models ...*model.WinGameList) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *winGameListDo) withDO(do gen.Dao) *winGameListDo {
	w.DO = *do.(*gen.DO)
	return w
}
