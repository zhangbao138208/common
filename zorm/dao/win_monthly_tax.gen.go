// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gitlab.skig.tech/zero-core/common/zorm/model"
)

func newWinMonthlyTax(db *gorm.DB, opts ...gen.DOOption) winMonthlyTax {
	_winMonthlyTax := winMonthlyTax{}

	_winMonthlyTax.winMonthlyTaxDo.UseDB(db, opts...)
	_winMonthlyTax.winMonthlyTaxDo.UseModel(&model.WinMonthlyTax{})

	tableName := _winMonthlyTax.winMonthlyTaxDo.TableName()
	_winMonthlyTax.ALL = field.NewAsterisk(tableName)
	_winMonthlyTax.ID = field.NewInt64(tableName, "id")
	_winMonthlyTax.GameID = field.NewInt64(tableName, "game_id")
	_winMonthlyTax.GameName = field.NewString(tableName, "game_name")
	_winMonthlyTax.Year = field.NewInt64(tableName, "year")
	_winMonthlyTax.Month = field.NewInt64(tableName, "month")
	_winMonthlyTax.CoinBet = field.NewField(tableName, "coin_bet")
	_winMonthlyTax.CoinProfit = field.NewField(tableName, "coin_profit")
	_winMonthlyTax.Rate = field.NewField(tableName, "rate")
	_winMonthlyTax.CoinTax = field.NewField(tableName, "coin_tax")
	_winMonthlyTax.CreatedAt = field.NewInt64(tableName, "created_at")
	_winMonthlyTax.UpdatedAt = field.NewInt64(tableName, "updated_at")

	_winMonthlyTax.fillFieldMap()

	return _winMonthlyTax
}

type winMonthlyTax struct {
	winMonthlyTaxDo

	ALL        field.Asterisk
	ID         field.Int64  // ID
	GameID     field.Int64  // 游戏ID
	GameName   field.String // 游戏名称
	Year       field.Int64  // 统计年
	Month      field.Int64  // 统计月
	CoinBet    field.Field  // 投注金额
	CoinProfit field.Field  // 负盈利金额
	Rate       field.Field  // 税收比例
	CoinTax    field.Field  // 税收金额
	CreatedAt  field.Int64  // 创建时间
	UpdatedAt  field.Int64  // 修改时间

	fieldMap map[string]field.Expr
}

func (w winMonthlyTax) Table(newTableName string) *winMonthlyTax {
	w.winMonthlyTaxDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w winMonthlyTax) As(alias string) *winMonthlyTax {
	w.winMonthlyTaxDo.DO = *(w.winMonthlyTaxDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *winMonthlyTax) updateTableName(table string) *winMonthlyTax {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt64(table, "id")
	w.GameID = field.NewInt64(table, "game_id")
	w.GameName = field.NewString(table, "game_name")
	w.Year = field.NewInt64(table, "year")
	w.Month = field.NewInt64(table, "month")
	w.CoinBet = field.NewField(table, "coin_bet")
	w.CoinProfit = field.NewField(table, "coin_profit")
	w.Rate = field.NewField(table, "rate")
	w.CoinTax = field.NewField(table, "coin_tax")
	w.CreatedAt = field.NewInt64(table, "created_at")
	w.UpdatedAt = field.NewInt64(table, "updated_at")

	w.fillFieldMap()

	return w
}

func (w *winMonthlyTax) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *winMonthlyTax) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 11)
	w.fieldMap["id"] = w.ID
	w.fieldMap["game_id"] = w.GameID
	w.fieldMap["game_name"] = w.GameName
	w.fieldMap["year"] = w.Year
	w.fieldMap["month"] = w.Month
	w.fieldMap["coin_bet"] = w.CoinBet
	w.fieldMap["coin_profit"] = w.CoinProfit
	w.fieldMap["rate"] = w.Rate
	w.fieldMap["coin_tax"] = w.CoinTax
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["updated_at"] = w.UpdatedAt
}

func (w winMonthlyTax) clone(db *gorm.DB) winMonthlyTax {
	w.winMonthlyTaxDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w winMonthlyTax) replaceDB(db *gorm.DB) winMonthlyTax {
	w.winMonthlyTaxDo.ReplaceDB(db)
	return w
}

type winMonthlyTaxDo struct{ gen.DO }

type IWinMonthlyTaxDo interface {
	gen.SubQuery
	Debug() IWinMonthlyTaxDo
	WithContext(ctx context.Context) IWinMonthlyTaxDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWinMonthlyTaxDo
	WriteDB() IWinMonthlyTaxDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWinMonthlyTaxDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWinMonthlyTaxDo
	Not(conds ...gen.Condition) IWinMonthlyTaxDo
	Or(conds ...gen.Condition) IWinMonthlyTaxDo
	Select(conds ...field.Expr) IWinMonthlyTaxDo
	Where(conds ...gen.Condition) IWinMonthlyTaxDo
	Order(conds ...field.Expr) IWinMonthlyTaxDo
	Distinct(cols ...field.Expr) IWinMonthlyTaxDo
	Omit(cols ...field.Expr) IWinMonthlyTaxDo
	Join(table schema.Tabler, on ...field.Expr) IWinMonthlyTaxDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWinMonthlyTaxDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWinMonthlyTaxDo
	Group(cols ...field.Expr) IWinMonthlyTaxDo
	Having(conds ...gen.Condition) IWinMonthlyTaxDo
	Limit(limit int) IWinMonthlyTaxDo
	Offset(offset int) IWinMonthlyTaxDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWinMonthlyTaxDo
	Unscoped() IWinMonthlyTaxDo
	Create(values ...*model.WinMonthlyTax) error
	CreateInBatches(values []*model.WinMonthlyTax, batchSize int) error
	Save(values ...*model.WinMonthlyTax) error
	First() (*model.WinMonthlyTax, error)
	Take() (*model.WinMonthlyTax, error)
	Last() (*model.WinMonthlyTax, error)
	Find() ([]*model.WinMonthlyTax, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinMonthlyTax, err error)
	FindInBatches(result *[]*model.WinMonthlyTax, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WinMonthlyTax) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWinMonthlyTaxDo
	Assign(attrs ...field.AssignExpr) IWinMonthlyTaxDo
	Joins(fields ...field.RelationField) IWinMonthlyTaxDo
	Preload(fields ...field.RelationField) IWinMonthlyTaxDo
	FirstOrInit() (*model.WinMonthlyTax, error)
	FirstOrCreate() (*model.WinMonthlyTax, error)
	FindByPage(offset int, limit int) (result []*model.WinMonthlyTax, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWinMonthlyTaxDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w winMonthlyTaxDo) Debug() IWinMonthlyTaxDo {
	return w.withDO(w.DO.Debug())
}

func (w winMonthlyTaxDo) WithContext(ctx context.Context) IWinMonthlyTaxDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w winMonthlyTaxDo) ReadDB() IWinMonthlyTaxDo {
	return w.Clauses(dbresolver.Read)
}

func (w winMonthlyTaxDo) WriteDB() IWinMonthlyTaxDo {
	return w.Clauses(dbresolver.Write)
}

func (w winMonthlyTaxDo) Session(config *gorm.Session) IWinMonthlyTaxDo {
	return w.withDO(w.DO.Session(config))
}

func (w winMonthlyTaxDo) Clauses(conds ...clause.Expression) IWinMonthlyTaxDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w winMonthlyTaxDo) Returning(value interface{}, columns ...string) IWinMonthlyTaxDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w winMonthlyTaxDo) Not(conds ...gen.Condition) IWinMonthlyTaxDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w winMonthlyTaxDo) Or(conds ...gen.Condition) IWinMonthlyTaxDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w winMonthlyTaxDo) Select(conds ...field.Expr) IWinMonthlyTaxDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w winMonthlyTaxDo) Where(conds ...gen.Condition) IWinMonthlyTaxDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w winMonthlyTaxDo) Order(conds ...field.Expr) IWinMonthlyTaxDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w winMonthlyTaxDo) Distinct(cols ...field.Expr) IWinMonthlyTaxDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w winMonthlyTaxDo) Omit(cols ...field.Expr) IWinMonthlyTaxDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w winMonthlyTaxDo) Join(table schema.Tabler, on ...field.Expr) IWinMonthlyTaxDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w winMonthlyTaxDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWinMonthlyTaxDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w winMonthlyTaxDo) RightJoin(table schema.Tabler, on ...field.Expr) IWinMonthlyTaxDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w winMonthlyTaxDo) Group(cols ...field.Expr) IWinMonthlyTaxDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w winMonthlyTaxDo) Having(conds ...gen.Condition) IWinMonthlyTaxDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w winMonthlyTaxDo) Limit(limit int) IWinMonthlyTaxDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w winMonthlyTaxDo) Offset(offset int) IWinMonthlyTaxDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w winMonthlyTaxDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWinMonthlyTaxDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w winMonthlyTaxDo) Unscoped() IWinMonthlyTaxDo {
	return w.withDO(w.DO.Unscoped())
}

func (w winMonthlyTaxDo) Create(values ...*model.WinMonthlyTax) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w winMonthlyTaxDo) CreateInBatches(values []*model.WinMonthlyTax, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w winMonthlyTaxDo) Save(values ...*model.WinMonthlyTax) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w winMonthlyTaxDo) First() (*model.WinMonthlyTax, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinMonthlyTax), nil
	}
}

func (w winMonthlyTaxDo) Take() (*model.WinMonthlyTax, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinMonthlyTax), nil
	}
}

func (w winMonthlyTaxDo) Last() (*model.WinMonthlyTax, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinMonthlyTax), nil
	}
}

func (w winMonthlyTaxDo) Find() ([]*model.WinMonthlyTax, error) {
	result, err := w.DO.Find()
	return result.([]*model.WinMonthlyTax), err
}

func (w winMonthlyTaxDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinMonthlyTax, err error) {
	buf := make([]*model.WinMonthlyTax, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w winMonthlyTaxDo) FindInBatches(result *[]*model.WinMonthlyTax, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w winMonthlyTaxDo) Attrs(attrs ...field.AssignExpr) IWinMonthlyTaxDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w winMonthlyTaxDo) Assign(attrs ...field.AssignExpr) IWinMonthlyTaxDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w winMonthlyTaxDo) Joins(fields ...field.RelationField) IWinMonthlyTaxDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w winMonthlyTaxDo) Preload(fields ...field.RelationField) IWinMonthlyTaxDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w winMonthlyTaxDo) FirstOrInit() (*model.WinMonthlyTax, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinMonthlyTax), nil
	}
}

func (w winMonthlyTaxDo) FirstOrCreate() (*model.WinMonthlyTax, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinMonthlyTax), nil
	}
}

func (w winMonthlyTaxDo) FindByPage(offset int, limit int) (result []*model.WinMonthlyTax, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w winMonthlyTaxDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w winMonthlyTaxDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w winMonthlyTaxDo) Delete(models ...*model.WinMonthlyTax) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *winMonthlyTaxDo) withDO(do gen.Dao) *winMonthlyTaxDo {
	w.DO = *do.(*gen.DO)
	return w
}
