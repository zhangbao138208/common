// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gitlab.skig.tech/zero-core/common/zorm/model"
)

func newWinBanner(db *gorm.DB, opts ...gen.DOOption) winBanner {
	_winBanner := winBanner{}

	_winBanner.winBannerDo.UseDB(db, opts...)
	_winBanner.winBannerDo.UseModel(&model.WinBanner{})

	tableName := _winBanner.winBannerDo.TableName()
	_winBanner.ALL = field.NewAsterisk(tableName)
	_winBanner.ID = field.NewInt64(tableName, "id")
	_winBanner.Type = field.NewInt64(tableName, "type")
	_winBanner.Img = field.NewString(tableName, "img")
	_winBanner.Href = field.NewString(tableName, "href")
	_winBanner.Sort = field.NewInt64(tableName, "sort")
	_winBanner.Status = field.NewInt64(tableName, "status")
	_winBanner.Device = field.NewString(tableName, "device")
	_winBanner.Language = field.NewString(tableName, "language")
	_winBanner.JumpType = field.NewInt64(tableName, "jump_type")
	_winBanner.SlotID = field.NewString(tableName, "slot_id")
	_winBanner.GameID = field.NewInt64(tableName, "game_id")
	_winBanner.GameGroupID = field.NewInt64(tableName, "game_group_id")
	_winBanner.PlatID = field.NewInt64(tableName, "plat_id")
	_winBanner.CreatedAt = field.NewInt64(tableName, "created_at")
	_winBanner.CreatedBy = field.NewString(tableName, "created_by")
	_winBanner.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_winBanner.UpdatedBy = field.NewString(tableName, "updated_by")
	_winBanner.OperatorName = field.NewString(tableName, "operator_name")

	_winBanner.fillFieldMap()

	return _winBanner
}

type winBanner struct {
	winBannerDo

	ALL          field.Asterisk
	ID           field.Int64
	Type         field.Int64  // 类型：1首页Banner，2登录/注册Banner
	Img          field.String // 图片地址
	Href         field.String // 跳转地址
	Sort         field.Int64  // 排序(从高到低)
	Status       field.Int64  // 状态:1-启用 0-停用
	Device       field.String // 设备:m-手机 d-电脑 ANDROID-安卓 IOS-苹果
	Language     field.String // 语言
	JumpType     field.Int64  // 跳转类型：1跳转链接 2跳转游戏
	SlotID       field.String // slotId
	GameID       field.Int64  // 游戏ID(关联game_list)
	GameGroupID  field.Int64  // 游戏大类类型
	PlatID       field.Int64  // 游戏平台id
	CreatedAt    field.Int64
	CreatedBy    field.String // 创建者
	UpdatedAt    field.Int64
	UpdatedBy    field.String // 更新人
	OperatorName field.String // 操作人姓名

	fieldMap map[string]field.Expr
}

func (w winBanner) Table(newTableName string) *winBanner {
	w.winBannerDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w winBanner) As(alias string) *winBanner {
	w.winBannerDo.DO = *(w.winBannerDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *winBanner) updateTableName(table string) *winBanner {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt64(table, "id")
	w.Type = field.NewInt64(table, "type")
	w.Img = field.NewString(table, "img")
	w.Href = field.NewString(table, "href")
	w.Sort = field.NewInt64(table, "sort")
	w.Status = field.NewInt64(table, "status")
	w.Device = field.NewString(table, "device")
	w.Language = field.NewString(table, "language")
	w.JumpType = field.NewInt64(table, "jump_type")
	w.SlotID = field.NewString(table, "slot_id")
	w.GameID = field.NewInt64(table, "game_id")
	w.GameGroupID = field.NewInt64(table, "game_group_id")
	w.PlatID = field.NewInt64(table, "plat_id")
	w.CreatedAt = field.NewInt64(table, "created_at")
	w.CreatedBy = field.NewString(table, "created_by")
	w.UpdatedAt = field.NewInt64(table, "updated_at")
	w.UpdatedBy = field.NewString(table, "updated_by")
	w.OperatorName = field.NewString(table, "operator_name")

	w.fillFieldMap()

	return w
}

func (w *winBanner) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *winBanner) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 18)
	w.fieldMap["id"] = w.ID
	w.fieldMap["type"] = w.Type
	w.fieldMap["img"] = w.Img
	w.fieldMap["href"] = w.Href
	w.fieldMap["sort"] = w.Sort
	w.fieldMap["status"] = w.Status
	w.fieldMap["device"] = w.Device
	w.fieldMap["language"] = w.Language
	w.fieldMap["jump_type"] = w.JumpType
	w.fieldMap["slot_id"] = w.SlotID
	w.fieldMap["game_id"] = w.GameID
	w.fieldMap["game_group_id"] = w.GameGroupID
	w.fieldMap["plat_id"] = w.PlatID
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["created_by"] = w.CreatedBy
	w.fieldMap["updated_at"] = w.UpdatedAt
	w.fieldMap["updated_by"] = w.UpdatedBy
	w.fieldMap["operator_name"] = w.OperatorName
}

func (w winBanner) clone(db *gorm.DB) winBanner {
	w.winBannerDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w winBanner) replaceDB(db *gorm.DB) winBanner {
	w.winBannerDo.ReplaceDB(db)
	return w
}

type winBannerDo struct{ gen.DO }

type IWinBannerDo interface {
	gen.SubQuery
	Debug() IWinBannerDo
	WithContext(ctx context.Context) IWinBannerDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWinBannerDo
	WriteDB() IWinBannerDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWinBannerDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWinBannerDo
	Not(conds ...gen.Condition) IWinBannerDo
	Or(conds ...gen.Condition) IWinBannerDo
	Select(conds ...field.Expr) IWinBannerDo
	Where(conds ...gen.Condition) IWinBannerDo
	Order(conds ...field.Expr) IWinBannerDo
	Distinct(cols ...field.Expr) IWinBannerDo
	Omit(cols ...field.Expr) IWinBannerDo
	Join(table schema.Tabler, on ...field.Expr) IWinBannerDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWinBannerDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWinBannerDo
	Group(cols ...field.Expr) IWinBannerDo
	Having(conds ...gen.Condition) IWinBannerDo
	Limit(limit int) IWinBannerDo
	Offset(offset int) IWinBannerDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWinBannerDo
	Unscoped() IWinBannerDo
	Create(values ...*model.WinBanner) error
	CreateInBatches(values []*model.WinBanner, batchSize int) error
	Save(values ...*model.WinBanner) error
	First() (*model.WinBanner, error)
	Take() (*model.WinBanner, error)
	Last() (*model.WinBanner, error)
	Find() ([]*model.WinBanner, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinBanner, err error)
	FindInBatches(result *[]*model.WinBanner, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WinBanner) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWinBannerDo
	Assign(attrs ...field.AssignExpr) IWinBannerDo
	Joins(fields ...field.RelationField) IWinBannerDo
	Preload(fields ...field.RelationField) IWinBannerDo
	FirstOrInit() (*model.WinBanner, error)
	FirstOrCreate() (*model.WinBanner, error)
	FindByPage(offset int, limit int) (result []*model.WinBanner, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWinBannerDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w winBannerDo) Debug() IWinBannerDo {
	return w.withDO(w.DO.Debug())
}

func (w winBannerDo) WithContext(ctx context.Context) IWinBannerDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w winBannerDo) ReadDB() IWinBannerDo {
	return w.Clauses(dbresolver.Read)
}

func (w winBannerDo) WriteDB() IWinBannerDo {
	return w.Clauses(dbresolver.Write)
}

func (w winBannerDo) Session(config *gorm.Session) IWinBannerDo {
	return w.withDO(w.DO.Session(config))
}

func (w winBannerDo) Clauses(conds ...clause.Expression) IWinBannerDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w winBannerDo) Returning(value interface{}, columns ...string) IWinBannerDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w winBannerDo) Not(conds ...gen.Condition) IWinBannerDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w winBannerDo) Or(conds ...gen.Condition) IWinBannerDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w winBannerDo) Select(conds ...field.Expr) IWinBannerDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w winBannerDo) Where(conds ...gen.Condition) IWinBannerDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w winBannerDo) Order(conds ...field.Expr) IWinBannerDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w winBannerDo) Distinct(cols ...field.Expr) IWinBannerDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w winBannerDo) Omit(cols ...field.Expr) IWinBannerDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w winBannerDo) Join(table schema.Tabler, on ...field.Expr) IWinBannerDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w winBannerDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWinBannerDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w winBannerDo) RightJoin(table schema.Tabler, on ...field.Expr) IWinBannerDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w winBannerDo) Group(cols ...field.Expr) IWinBannerDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w winBannerDo) Having(conds ...gen.Condition) IWinBannerDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w winBannerDo) Limit(limit int) IWinBannerDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w winBannerDo) Offset(offset int) IWinBannerDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w winBannerDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWinBannerDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w winBannerDo) Unscoped() IWinBannerDo {
	return w.withDO(w.DO.Unscoped())
}

func (w winBannerDo) Create(values ...*model.WinBanner) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w winBannerDo) CreateInBatches(values []*model.WinBanner, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w winBannerDo) Save(values ...*model.WinBanner) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w winBannerDo) First() (*model.WinBanner, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinBanner), nil
	}
}

func (w winBannerDo) Take() (*model.WinBanner, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinBanner), nil
	}
}

func (w winBannerDo) Last() (*model.WinBanner, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinBanner), nil
	}
}

func (w winBannerDo) Find() ([]*model.WinBanner, error) {
	result, err := w.DO.Find()
	return result.([]*model.WinBanner), err
}

func (w winBannerDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinBanner, err error) {
	buf := make([]*model.WinBanner, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w winBannerDo) FindInBatches(result *[]*model.WinBanner, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w winBannerDo) Attrs(attrs ...field.AssignExpr) IWinBannerDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w winBannerDo) Assign(attrs ...field.AssignExpr) IWinBannerDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w winBannerDo) Joins(fields ...field.RelationField) IWinBannerDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w winBannerDo) Preload(fields ...field.RelationField) IWinBannerDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w winBannerDo) FirstOrInit() (*model.WinBanner, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinBanner), nil
	}
}

func (w winBannerDo) FirstOrCreate() (*model.WinBanner, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinBanner), nil
	}
}

func (w winBannerDo) FindByPage(offset int, limit int) (result []*model.WinBanner, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w winBannerDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w winBannerDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w winBannerDo) Delete(models ...*model.WinBanner) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *winBannerDo) withDO(do gen.Dao) *winBannerDo {
	w.DO = *do.(*gen.DO)
	return w
}
