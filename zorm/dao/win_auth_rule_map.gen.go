// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gitlab.skig.tech/zero-core/common/zorm/model"
)

func newWinAuthRuleMap(db *gorm.DB, opts ...gen.DOOption) winAuthRuleMap {
	_winAuthRuleMap := winAuthRuleMap{}

	_winAuthRuleMap.winAuthRuleMapDo.UseDB(db, opts...)
	_winAuthRuleMap.winAuthRuleMapDo.UseModel(&model.WinAuthRuleMap{})

	tableName := _winAuthRuleMap.winAuthRuleMapDo.TableName()
	_winAuthRuleMap.ALL = field.NewAsterisk(tableName)
	_winAuthRuleMap.ID = field.NewInt64(tableName, "id")
	_winAuthRuleMap.APIPath = field.NewString(tableName, "api_path")
	_winAuthRuleMap.AuthRuleID = field.NewInt64(tableName, "auth_rule_id")

	_winAuthRuleMap.fillFieldMap()

	return _winAuthRuleMap
}

type winAuthRuleMap struct {
	winAuthRuleMapDo

	ALL        field.Asterisk
	ID         field.Int64
	APIPath    field.String // 权限路径
	AuthRuleID field.Int64  // 权限ID

	fieldMap map[string]field.Expr
}

func (w winAuthRuleMap) Table(newTableName string) *winAuthRuleMap {
	w.winAuthRuleMapDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w winAuthRuleMap) As(alias string) *winAuthRuleMap {
	w.winAuthRuleMapDo.DO = *(w.winAuthRuleMapDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *winAuthRuleMap) updateTableName(table string) *winAuthRuleMap {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt64(table, "id")
	w.APIPath = field.NewString(table, "api_path")
	w.AuthRuleID = field.NewInt64(table, "auth_rule_id")

	w.fillFieldMap()

	return w
}

func (w *winAuthRuleMap) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *winAuthRuleMap) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 3)
	w.fieldMap["id"] = w.ID
	w.fieldMap["api_path"] = w.APIPath
	w.fieldMap["auth_rule_id"] = w.AuthRuleID
}

func (w winAuthRuleMap) clone(db *gorm.DB) winAuthRuleMap {
	w.winAuthRuleMapDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w winAuthRuleMap) replaceDB(db *gorm.DB) winAuthRuleMap {
	w.winAuthRuleMapDo.ReplaceDB(db)
	return w
}

type winAuthRuleMapDo struct{ gen.DO }

type IWinAuthRuleMapDo interface {
	gen.SubQuery
	Debug() IWinAuthRuleMapDo
	WithContext(ctx context.Context) IWinAuthRuleMapDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWinAuthRuleMapDo
	WriteDB() IWinAuthRuleMapDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWinAuthRuleMapDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWinAuthRuleMapDo
	Not(conds ...gen.Condition) IWinAuthRuleMapDo
	Or(conds ...gen.Condition) IWinAuthRuleMapDo
	Select(conds ...field.Expr) IWinAuthRuleMapDo
	Where(conds ...gen.Condition) IWinAuthRuleMapDo
	Order(conds ...field.Expr) IWinAuthRuleMapDo
	Distinct(cols ...field.Expr) IWinAuthRuleMapDo
	Omit(cols ...field.Expr) IWinAuthRuleMapDo
	Join(table schema.Tabler, on ...field.Expr) IWinAuthRuleMapDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWinAuthRuleMapDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWinAuthRuleMapDo
	Group(cols ...field.Expr) IWinAuthRuleMapDo
	Having(conds ...gen.Condition) IWinAuthRuleMapDo
	Limit(limit int) IWinAuthRuleMapDo
	Offset(offset int) IWinAuthRuleMapDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWinAuthRuleMapDo
	Unscoped() IWinAuthRuleMapDo
	Create(values ...*model.WinAuthRuleMap) error
	CreateInBatches(values []*model.WinAuthRuleMap, batchSize int) error
	Save(values ...*model.WinAuthRuleMap) error
	First() (*model.WinAuthRuleMap, error)
	Take() (*model.WinAuthRuleMap, error)
	Last() (*model.WinAuthRuleMap, error)
	Find() ([]*model.WinAuthRuleMap, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinAuthRuleMap, err error)
	FindInBatches(result *[]*model.WinAuthRuleMap, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WinAuthRuleMap) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWinAuthRuleMapDo
	Assign(attrs ...field.AssignExpr) IWinAuthRuleMapDo
	Joins(fields ...field.RelationField) IWinAuthRuleMapDo
	Preload(fields ...field.RelationField) IWinAuthRuleMapDo
	FirstOrInit() (*model.WinAuthRuleMap, error)
	FirstOrCreate() (*model.WinAuthRuleMap, error)
	FindByPage(offset int, limit int) (result []*model.WinAuthRuleMap, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWinAuthRuleMapDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w winAuthRuleMapDo) Debug() IWinAuthRuleMapDo {
	return w.withDO(w.DO.Debug())
}

func (w winAuthRuleMapDo) WithContext(ctx context.Context) IWinAuthRuleMapDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w winAuthRuleMapDo) ReadDB() IWinAuthRuleMapDo {
	return w.Clauses(dbresolver.Read)
}

func (w winAuthRuleMapDo) WriteDB() IWinAuthRuleMapDo {
	return w.Clauses(dbresolver.Write)
}

func (w winAuthRuleMapDo) Session(config *gorm.Session) IWinAuthRuleMapDo {
	return w.withDO(w.DO.Session(config))
}

func (w winAuthRuleMapDo) Clauses(conds ...clause.Expression) IWinAuthRuleMapDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w winAuthRuleMapDo) Returning(value interface{}, columns ...string) IWinAuthRuleMapDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w winAuthRuleMapDo) Not(conds ...gen.Condition) IWinAuthRuleMapDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w winAuthRuleMapDo) Or(conds ...gen.Condition) IWinAuthRuleMapDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w winAuthRuleMapDo) Select(conds ...field.Expr) IWinAuthRuleMapDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w winAuthRuleMapDo) Where(conds ...gen.Condition) IWinAuthRuleMapDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w winAuthRuleMapDo) Order(conds ...field.Expr) IWinAuthRuleMapDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w winAuthRuleMapDo) Distinct(cols ...field.Expr) IWinAuthRuleMapDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w winAuthRuleMapDo) Omit(cols ...field.Expr) IWinAuthRuleMapDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w winAuthRuleMapDo) Join(table schema.Tabler, on ...field.Expr) IWinAuthRuleMapDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w winAuthRuleMapDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWinAuthRuleMapDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w winAuthRuleMapDo) RightJoin(table schema.Tabler, on ...field.Expr) IWinAuthRuleMapDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w winAuthRuleMapDo) Group(cols ...field.Expr) IWinAuthRuleMapDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w winAuthRuleMapDo) Having(conds ...gen.Condition) IWinAuthRuleMapDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w winAuthRuleMapDo) Limit(limit int) IWinAuthRuleMapDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w winAuthRuleMapDo) Offset(offset int) IWinAuthRuleMapDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w winAuthRuleMapDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWinAuthRuleMapDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w winAuthRuleMapDo) Unscoped() IWinAuthRuleMapDo {
	return w.withDO(w.DO.Unscoped())
}

func (w winAuthRuleMapDo) Create(values ...*model.WinAuthRuleMap) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w winAuthRuleMapDo) CreateInBatches(values []*model.WinAuthRuleMap, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w winAuthRuleMapDo) Save(values ...*model.WinAuthRuleMap) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w winAuthRuleMapDo) First() (*model.WinAuthRuleMap, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinAuthRuleMap), nil
	}
}

func (w winAuthRuleMapDo) Take() (*model.WinAuthRuleMap, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinAuthRuleMap), nil
	}
}

func (w winAuthRuleMapDo) Last() (*model.WinAuthRuleMap, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinAuthRuleMap), nil
	}
}

func (w winAuthRuleMapDo) Find() ([]*model.WinAuthRuleMap, error) {
	result, err := w.DO.Find()
	return result.([]*model.WinAuthRuleMap), err
}

func (w winAuthRuleMapDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinAuthRuleMap, err error) {
	buf := make([]*model.WinAuthRuleMap, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w winAuthRuleMapDo) FindInBatches(result *[]*model.WinAuthRuleMap, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w winAuthRuleMapDo) Attrs(attrs ...field.AssignExpr) IWinAuthRuleMapDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w winAuthRuleMapDo) Assign(attrs ...field.AssignExpr) IWinAuthRuleMapDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w winAuthRuleMapDo) Joins(fields ...field.RelationField) IWinAuthRuleMapDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w winAuthRuleMapDo) Preload(fields ...field.RelationField) IWinAuthRuleMapDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w winAuthRuleMapDo) FirstOrInit() (*model.WinAuthRuleMap, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinAuthRuleMap), nil
	}
}

func (w winAuthRuleMapDo) FirstOrCreate() (*model.WinAuthRuleMap, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinAuthRuleMap), nil
	}
}

func (w winAuthRuleMapDo) FindByPage(offset int, limit int) (result []*model.WinAuthRuleMap, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w winAuthRuleMapDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w winAuthRuleMapDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w winAuthRuleMapDo) Delete(models ...*model.WinAuthRuleMap) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *winAuthRuleMapDo) withDO(do gen.Dao) *winAuthRuleMapDo {
	w.DO = *do.(*gen.DO)
	return w
}
