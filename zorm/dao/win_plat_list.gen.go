// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gitlab.skig.tech/zero-core/common/zorm/model"
)

func newWinPlatList(db *gorm.DB, opts ...gen.DOOption) winPlatList {
	_winPlatList := winPlatList{}

	_winPlatList.winPlatListDo.UseDB(db, opts...)
	_winPlatList.winPlatListDo.UseModel(&model.WinPlatList{})

	tableName := _winPlatList.winPlatListDo.TableName()
	_winPlatList.ALL = field.NewAsterisk(tableName)
	_winPlatList.ID = field.NewInt64(tableName, "id")
	_winPlatList.Code = field.NewString(tableName, "code")
	_winPlatList.Name = field.NewString(tableName, "name")
	_winPlatList.Config = field.NewString(tableName, "config")
	_winPlatList.Rate = field.NewString(tableName, "rate")
	_winPlatList.Sort = field.NewInt64(tableName, "sort")
	_winPlatList.Status = field.NewInt64(tableName, "status")
	_winPlatList.CreatedAt = field.NewInt64(tableName, "created_at")
	_winPlatList.UpdatedAt = field.NewInt64(tableName, "updated_at")

	_winPlatList.fillFieldMap()

	return _winPlatList
}

type winPlatList struct {
	winPlatListDo

	ALL       field.Asterisk
	ID        field.Int64
	Code      field.String // 平台编码
	Name      field.String // 平台名称
	Config    field.String // 配置信息
	Rate      field.String // 费率
	Sort      field.Int64  // 排序(从高到底、ID降序)
	Status    field.Int64  // 状态: 1-启用 0-停用
	CreatedAt field.Int64
	UpdatedAt field.Int64

	fieldMap map[string]field.Expr
}

func (w winPlatList) Table(newTableName string) *winPlatList {
	w.winPlatListDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w winPlatList) As(alias string) *winPlatList {
	w.winPlatListDo.DO = *(w.winPlatListDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *winPlatList) updateTableName(table string) *winPlatList {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt64(table, "id")
	w.Code = field.NewString(table, "code")
	w.Name = field.NewString(table, "name")
	w.Config = field.NewString(table, "config")
	w.Rate = field.NewString(table, "rate")
	w.Sort = field.NewInt64(table, "sort")
	w.Status = field.NewInt64(table, "status")
	w.CreatedAt = field.NewInt64(table, "created_at")
	w.UpdatedAt = field.NewInt64(table, "updated_at")

	w.fillFieldMap()

	return w
}

func (w *winPlatList) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *winPlatList) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 9)
	w.fieldMap["id"] = w.ID
	w.fieldMap["code"] = w.Code
	w.fieldMap["name"] = w.Name
	w.fieldMap["config"] = w.Config
	w.fieldMap["rate"] = w.Rate
	w.fieldMap["sort"] = w.Sort
	w.fieldMap["status"] = w.Status
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["updated_at"] = w.UpdatedAt
}

func (w winPlatList) clone(db *gorm.DB) winPlatList {
	w.winPlatListDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w winPlatList) replaceDB(db *gorm.DB) winPlatList {
	w.winPlatListDo.ReplaceDB(db)
	return w
}

type winPlatListDo struct{ gen.DO }

type IWinPlatListDo interface {
	gen.SubQuery
	Debug() IWinPlatListDo
	WithContext(ctx context.Context) IWinPlatListDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWinPlatListDo
	WriteDB() IWinPlatListDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWinPlatListDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWinPlatListDo
	Not(conds ...gen.Condition) IWinPlatListDo
	Or(conds ...gen.Condition) IWinPlatListDo
	Select(conds ...field.Expr) IWinPlatListDo
	Where(conds ...gen.Condition) IWinPlatListDo
	Order(conds ...field.Expr) IWinPlatListDo
	Distinct(cols ...field.Expr) IWinPlatListDo
	Omit(cols ...field.Expr) IWinPlatListDo
	Join(table schema.Tabler, on ...field.Expr) IWinPlatListDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWinPlatListDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWinPlatListDo
	Group(cols ...field.Expr) IWinPlatListDo
	Having(conds ...gen.Condition) IWinPlatListDo
	Limit(limit int) IWinPlatListDo
	Offset(offset int) IWinPlatListDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWinPlatListDo
	Unscoped() IWinPlatListDo
	Create(values ...*model.WinPlatList) error
	CreateInBatches(values []*model.WinPlatList, batchSize int) error
	Save(values ...*model.WinPlatList) error
	First() (*model.WinPlatList, error)
	Take() (*model.WinPlatList, error)
	Last() (*model.WinPlatList, error)
	Find() ([]*model.WinPlatList, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinPlatList, err error)
	FindInBatches(result *[]*model.WinPlatList, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WinPlatList) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWinPlatListDo
	Assign(attrs ...field.AssignExpr) IWinPlatListDo
	Joins(fields ...field.RelationField) IWinPlatListDo
	Preload(fields ...field.RelationField) IWinPlatListDo
	FirstOrInit() (*model.WinPlatList, error)
	FirstOrCreate() (*model.WinPlatList, error)
	FindByPage(offset int, limit int) (result []*model.WinPlatList, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWinPlatListDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w winPlatListDo) Debug() IWinPlatListDo {
	return w.withDO(w.DO.Debug())
}

func (w winPlatListDo) WithContext(ctx context.Context) IWinPlatListDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w winPlatListDo) ReadDB() IWinPlatListDo {
	return w.Clauses(dbresolver.Read)
}

func (w winPlatListDo) WriteDB() IWinPlatListDo {
	return w.Clauses(dbresolver.Write)
}

func (w winPlatListDo) Session(config *gorm.Session) IWinPlatListDo {
	return w.withDO(w.DO.Session(config))
}

func (w winPlatListDo) Clauses(conds ...clause.Expression) IWinPlatListDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w winPlatListDo) Returning(value interface{}, columns ...string) IWinPlatListDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w winPlatListDo) Not(conds ...gen.Condition) IWinPlatListDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w winPlatListDo) Or(conds ...gen.Condition) IWinPlatListDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w winPlatListDo) Select(conds ...field.Expr) IWinPlatListDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w winPlatListDo) Where(conds ...gen.Condition) IWinPlatListDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w winPlatListDo) Order(conds ...field.Expr) IWinPlatListDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w winPlatListDo) Distinct(cols ...field.Expr) IWinPlatListDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w winPlatListDo) Omit(cols ...field.Expr) IWinPlatListDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w winPlatListDo) Join(table schema.Tabler, on ...field.Expr) IWinPlatListDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w winPlatListDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWinPlatListDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w winPlatListDo) RightJoin(table schema.Tabler, on ...field.Expr) IWinPlatListDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w winPlatListDo) Group(cols ...field.Expr) IWinPlatListDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w winPlatListDo) Having(conds ...gen.Condition) IWinPlatListDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w winPlatListDo) Limit(limit int) IWinPlatListDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w winPlatListDo) Offset(offset int) IWinPlatListDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w winPlatListDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWinPlatListDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w winPlatListDo) Unscoped() IWinPlatListDo {
	return w.withDO(w.DO.Unscoped())
}

func (w winPlatListDo) Create(values ...*model.WinPlatList) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w winPlatListDo) CreateInBatches(values []*model.WinPlatList, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w winPlatListDo) Save(values ...*model.WinPlatList) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w winPlatListDo) First() (*model.WinPlatList, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinPlatList), nil
	}
}

func (w winPlatListDo) Take() (*model.WinPlatList, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinPlatList), nil
	}
}

func (w winPlatListDo) Last() (*model.WinPlatList, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinPlatList), nil
	}
}

func (w winPlatListDo) Find() ([]*model.WinPlatList, error) {
	result, err := w.DO.Find()
	return result.([]*model.WinPlatList), err
}

func (w winPlatListDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinPlatList, err error) {
	buf := make([]*model.WinPlatList, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w winPlatListDo) FindInBatches(result *[]*model.WinPlatList, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w winPlatListDo) Attrs(attrs ...field.AssignExpr) IWinPlatListDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w winPlatListDo) Assign(attrs ...field.AssignExpr) IWinPlatListDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w winPlatListDo) Joins(fields ...field.RelationField) IWinPlatListDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w winPlatListDo) Preload(fields ...field.RelationField) IWinPlatListDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w winPlatListDo) FirstOrInit() (*model.WinPlatList, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinPlatList), nil
	}
}

func (w winPlatListDo) FirstOrCreate() (*model.WinPlatList, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinPlatList), nil
	}
}

func (w winPlatListDo) FindByPage(offset int, limit int) (result []*model.WinPlatList, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w winPlatListDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w winPlatListDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w winPlatListDo) Delete(models ...*model.WinPlatList) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *winPlatListDo) withDO(do gen.Dao) *winPlatListDo {
	w.DO = *do.(*gen.DO)
	return w
}
