// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gitlab.skig.tech/zero-core/common/zorm/model"
)

func newWinGameSlotFavorite(db *gorm.DB, opts ...gen.DOOption) winGameSlotFavorite {
	_winGameSlotFavorite := winGameSlotFavorite{}

	_winGameSlotFavorite.winGameSlotFavoriteDo.UseDB(db, opts...)
	_winGameSlotFavorite.winGameSlotFavoriteDo.UseModel(&model.WinGameSlotFavorite{})

	tableName := _winGameSlotFavorite.winGameSlotFavoriteDo.TableName()
	_winGameSlotFavorite.ALL = field.NewAsterisk(tableName)
	_winGameSlotFavorite.ID = field.NewInt64(tableName, "id")
	_winGameSlotFavorite.UID = field.NewInt64(tableName, "uid")
	_winGameSlotFavorite.GameID = field.NewInt64(tableName, "game_id")
	_winGameSlotFavorite.GameSlotID = field.NewString(tableName, "game_slot_id")
	_winGameSlotFavorite.CreatedAt = field.NewInt64(tableName, "created_at")
	_winGameSlotFavorite.UpdatedAt = field.NewInt64(tableName, "updated_at")

	_winGameSlotFavorite.fillFieldMap()

	return _winGameSlotFavorite
}

type winGameSlotFavorite struct {
	winGameSlotFavoriteDo

	ALL        field.Asterisk
	ID         field.Int64
	UID        field.Int64  // UID
	GameID     field.Int64  // 游戏类型ID
	GameSlotID field.String // 游戏(子老虎机)ID
	CreatedAt  field.Int64
	UpdatedAt  field.Int64

	fieldMap map[string]field.Expr
}

func (w winGameSlotFavorite) Table(newTableName string) *winGameSlotFavorite {
	w.winGameSlotFavoriteDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w winGameSlotFavorite) As(alias string) *winGameSlotFavorite {
	w.winGameSlotFavoriteDo.DO = *(w.winGameSlotFavoriteDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *winGameSlotFavorite) updateTableName(table string) *winGameSlotFavorite {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt64(table, "id")
	w.UID = field.NewInt64(table, "uid")
	w.GameID = field.NewInt64(table, "game_id")
	w.GameSlotID = field.NewString(table, "game_slot_id")
	w.CreatedAt = field.NewInt64(table, "created_at")
	w.UpdatedAt = field.NewInt64(table, "updated_at")

	w.fillFieldMap()

	return w
}

func (w *winGameSlotFavorite) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *winGameSlotFavorite) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 6)
	w.fieldMap["id"] = w.ID
	w.fieldMap["uid"] = w.UID
	w.fieldMap["game_id"] = w.GameID
	w.fieldMap["game_slot_id"] = w.GameSlotID
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["updated_at"] = w.UpdatedAt
}

func (w winGameSlotFavorite) clone(db *gorm.DB) winGameSlotFavorite {
	w.winGameSlotFavoriteDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w winGameSlotFavorite) replaceDB(db *gorm.DB) winGameSlotFavorite {
	w.winGameSlotFavoriteDo.ReplaceDB(db)
	return w
}

type winGameSlotFavoriteDo struct{ gen.DO }

type IWinGameSlotFavoriteDo interface {
	gen.SubQuery
	Debug() IWinGameSlotFavoriteDo
	WithContext(ctx context.Context) IWinGameSlotFavoriteDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWinGameSlotFavoriteDo
	WriteDB() IWinGameSlotFavoriteDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWinGameSlotFavoriteDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWinGameSlotFavoriteDo
	Not(conds ...gen.Condition) IWinGameSlotFavoriteDo
	Or(conds ...gen.Condition) IWinGameSlotFavoriteDo
	Select(conds ...field.Expr) IWinGameSlotFavoriteDo
	Where(conds ...gen.Condition) IWinGameSlotFavoriteDo
	Order(conds ...field.Expr) IWinGameSlotFavoriteDo
	Distinct(cols ...field.Expr) IWinGameSlotFavoriteDo
	Omit(cols ...field.Expr) IWinGameSlotFavoriteDo
	Join(table schema.Tabler, on ...field.Expr) IWinGameSlotFavoriteDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWinGameSlotFavoriteDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWinGameSlotFavoriteDo
	Group(cols ...field.Expr) IWinGameSlotFavoriteDo
	Having(conds ...gen.Condition) IWinGameSlotFavoriteDo
	Limit(limit int) IWinGameSlotFavoriteDo
	Offset(offset int) IWinGameSlotFavoriteDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWinGameSlotFavoriteDo
	Unscoped() IWinGameSlotFavoriteDo
	Create(values ...*model.WinGameSlotFavorite) error
	CreateInBatches(values []*model.WinGameSlotFavorite, batchSize int) error
	Save(values ...*model.WinGameSlotFavorite) error
	First() (*model.WinGameSlotFavorite, error)
	Take() (*model.WinGameSlotFavorite, error)
	Last() (*model.WinGameSlotFavorite, error)
	Find() ([]*model.WinGameSlotFavorite, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinGameSlotFavorite, err error)
	FindInBatches(result *[]*model.WinGameSlotFavorite, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WinGameSlotFavorite) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWinGameSlotFavoriteDo
	Assign(attrs ...field.AssignExpr) IWinGameSlotFavoriteDo
	Joins(fields ...field.RelationField) IWinGameSlotFavoriteDo
	Preload(fields ...field.RelationField) IWinGameSlotFavoriteDo
	FirstOrInit() (*model.WinGameSlotFavorite, error)
	FirstOrCreate() (*model.WinGameSlotFavorite, error)
	FindByPage(offset int, limit int) (result []*model.WinGameSlotFavorite, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWinGameSlotFavoriteDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w winGameSlotFavoriteDo) Debug() IWinGameSlotFavoriteDo {
	return w.withDO(w.DO.Debug())
}

func (w winGameSlotFavoriteDo) WithContext(ctx context.Context) IWinGameSlotFavoriteDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w winGameSlotFavoriteDo) ReadDB() IWinGameSlotFavoriteDo {
	return w.Clauses(dbresolver.Read)
}

func (w winGameSlotFavoriteDo) WriteDB() IWinGameSlotFavoriteDo {
	return w.Clauses(dbresolver.Write)
}

func (w winGameSlotFavoriteDo) Session(config *gorm.Session) IWinGameSlotFavoriteDo {
	return w.withDO(w.DO.Session(config))
}

func (w winGameSlotFavoriteDo) Clauses(conds ...clause.Expression) IWinGameSlotFavoriteDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w winGameSlotFavoriteDo) Returning(value interface{}, columns ...string) IWinGameSlotFavoriteDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w winGameSlotFavoriteDo) Not(conds ...gen.Condition) IWinGameSlotFavoriteDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w winGameSlotFavoriteDo) Or(conds ...gen.Condition) IWinGameSlotFavoriteDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w winGameSlotFavoriteDo) Select(conds ...field.Expr) IWinGameSlotFavoriteDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w winGameSlotFavoriteDo) Where(conds ...gen.Condition) IWinGameSlotFavoriteDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w winGameSlotFavoriteDo) Order(conds ...field.Expr) IWinGameSlotFavoriteDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w winGameSlotFavoriteDo) Distinct(cols ...field.Expr) IWinGameSlotFavoriteDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w winGameSlotFavoriteDo) Omit(cols ...field.Expr) IWinGameSlotFavoriteDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w winGameSlotFavoriteDo) Join(table schema.Tabler, on ...field.Expr) IWinGameSlotFavoriteDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w winGameSlotFavoriteDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWinGameSlotFavoriteDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w winGameSlotFavoriteDo) RightJoin(table schema.Tabler, on ...field.Expr) IWinGameSlotFavoriteDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w winGameSlotFavoriteDo) Group(cols ...field.Expr) IWinGameSlotFavoriteDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w winGameSlotFavoriteDo) Having(conds ...gen.Condition) IWinGameSlotFavoriteDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w winGameSlotFavoriteDo) Limit(limit int) IWinGameSlotFavoriteDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w winGameSlotFavoriteDo) Offset(offset int) IWinGameSlotFavoriteDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w winGameSlotFavoriteDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWinGameSlotFavoriteDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w winGameSlotFavoriteDo) Unscoped() IWinGameSlotFavoriteDo {
	return w.withDO(w.DO.Unscoped())
}

func (w winGameSlotFavoriteDo) Create(values ...*model.WinGameSlotFavorite) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w winGameSlotFavoriteDo) CreateInBatches(values []*model.WinGameSlotFavorite, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w winGameSlotFavoriteDo) Save(values ...*model.WinGameSlotFavorite) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w winGameSlotFavoriteDo) First() (*model.WinGameSlotFavorite, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinGameSlotFavorite), nil
	}
}

func (w winGameSlotFavoriteDo) Take() (*model.WinGameSlotFavorite, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinGameSlotFavorite), nil
	}
}

func (w winGameSlotFavoriteDo) Last() (*model.WinGameSlotFavorite, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinGameSlotFavorite), nil
	}
}

func (w winGameSlotFavoriteDo) Find() ([]*model.WinGameSlotFavorite, error) {
	result, err := w.DO.Find()
	return result.([]*model.WinGameSlotFavorite), err
}

func (w winGameSlotFavoriteDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinGameSlotFavorite, err error) {
	buf := make([]*model.WinGameSlotFavorite, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w winGameSlotFavoriteDo) FindInBatches(result *[]*model.WinGameSlotFavorite, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w winGameSlotFavoriteDo) Attrs(attrs ...field.AssignExpr) IWinGameSlotFavoriteDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w winGameSlotFavoriteDo) Assign(attrs ...field.AssignExpr) IWinGameSlotFavoriteDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w winGameSlotFavoriteDo) Joins(fields ...field.RelationField) IWinGameSlotFavoriteDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w winGameSlotFavoriteDo) Preload(fields ...field.RelationField) IWinGameSlotFavoriteDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w winGameSlotFavoriteDo) FirstOrInit() (*model.WinGameSlotFavorite, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinGameSlotFavorite), nil
	}
}

func (w winGameSlotFavoriteDo) FirstOrCreate() (*model.WinGameSlotFavorite, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinGameSlotFavorite), nil
	}
}

func (w winGameSlotFavoriteDo) FindByPage(offset int, limit int) (result []*model.WinGameSlotFavorite, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w winGameSlotFavoriteDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w winGameSlotFavoriteDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w winGameSlotFavoriteDo) Delete(models ...*model.WinGameSlotFavorite) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *winGameSlotFavoriteDo) withDO(do gen.Dao) *winGameSlotFavoriteDo {
	w.DO = *do.(*gen.DO)
	return w
}
