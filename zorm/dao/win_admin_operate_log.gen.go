// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gitlab.skig.tech/zero-core/common/zorm/model"
)

func newWinAdminOperateLog(db *gorm.DB, opts ...gen.DOOption) winAdminOperateLog {
	_winAdminOperateLog := winAdminOperateLog{}

	_winAdminOperateLog.winAdminOperateLogDo.UseDB(db, opts...)
	_winAdminOperateLog.winAdminOperateLogDo.UseModel(&model.WinAdminOperateLog{})

	tableName := _winAdminOperateLog.winAdminOperateLogDo.TableName()
	_winAdminOperateLog.ALL = field.NewAsterisk(tableName)
	_winAdminOperateLog.ID = field.NewInt64(tableName, "id")
	_winAdminOperateLog.UID = field.NewInt64(tableName, "uid")
	_winAdminOperateLog.Username = field.NewString(tableName, "username")
	_winAdminOperateLog.Title = field.NewString(tableName, "title")
	_winAdminOperateLog.URL = field.NewString(tableName, "url")
	_winAdminOperateLog.ReqParams = field.NewString(tableName, "req_params")
	_winAdminOperateLog.ResParams = field.NewString(tableName, "res_params")
	_winAdminOperateLog.IP = field.NewString(tableName, "ip")
	_winAdminOperateLog.CreatedAt = field.NewInt64(tableName, "created_at")
	_winAdminOperateLog.UpdatedAt = field.NewInt64(tableName, "updated_at")

	_winAdminOperateLog.fillFieldMap()

	return _winAdminOperateLog
}

type winAdminOperateLog struct {
	winAdminOperateLogDo

	ALL       field.Asterisk
	ID        field.Int64
	UID       field.Int64  // UID
	Username  field.String // 用户名
	Title     field.String // 标题
	URL       field.String // 请求url
	ReqParams field.String // 请求参数
	ResParams field.String // 响应参数
	IP        field.String // IP地址
	CreatedAt field.Int64
	UpdatedAt field.Int64

	fieldMap map[string]field.Expr
}

func (w winAdminOperateLog) Table(newTableName string) *winAdminOperateLog {
	w.winAdminOperateLogDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w winAdminOperateLog) As(alias string) *winAdminOperateLog {
	w.winAdminOperateLogDo.DO = *(w.winAdminOperateLogDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *winAdminOperateLog) updateTableName(table string) *winAdminOperateLog {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt64(table, "id")
	w.UID = field.NewInt64(table, "uid")
	w.Username = field.NewString(table, "username")
	w.Title = field.NewString(table, "title")
	w.URL = field.NewString(table, "url")
	w.ReqParams = field.NewString(table, "req_params")
	w.ResParams = field.NewString(table, "res_params")
	w.IP = field.NewString(table, "ip")
	w.CreatedAt = field.NewInt64(table, "created_at")
	w.UpdatedAt = field.NewInt64(table, "updated_at")

	w.fillFieldMap()

	return w
}

func (w *winAdminOperateLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *winAdminOperateLog) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 10)
	w.fieldMap["id"] = w.ID
	w.fieldMap["uid"] = w.UID
	w.fieldMap["username"] = w.Username
	w.fieldMap["title"] = w.Title
	w.fieldMap["url"] = w.URL
	w.fieldMap["req_params"] = w.ReqParams
	w.fieldMap["res_params"] = w.ResParams
	w.fieldMap["ip"] = w.IP
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["updated_at"] = w.UpdatedAt
}

func (w winAdminOperateLog) clone(db *gorm.DB) winAdminOperateLog {
	w.winAdminOperateLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w winAdminOperateLog) replaceDB(db *gorm.DB) winAdminOperateLog {
	w.winAdminOperateLogDo.ReplaceDB(db)
	return w
}

type winAdminOperateLogDo struct{ gen.DO }

type IWinAdminOperateLogDo interface {
	gen.SubQuery
	Debug() IWinAdminOperateLogDo
	WithContext(ctx context.Context) IWinAdminOperateLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWinAdminOperateLogDo
	WriteDB() IWinAdminOperateLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWinAdminOperateLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWinAdminOperateLogDo
	Not(conds ...gen.Condition) IWinAdminOperateLogDo
	Or(conds ...gen.Condition) IWinAdminOperateLogDo
	Select(conds ...field.Expr) IWinAdminOperateLogDo
	Where(conds ...gen.Condition) IWinAdminOperateLogDo
	Order(conds ...field.Expr) IWinAdminOperateLogDo
	Distinct(cols ...field.Expr) IWinAdminOperateLogDo
	Omit(cols ...field.Expr) IWinAdminOperateLogDo
	Join(table schema.Tabler, on ...field.Expr) IWinAdminOperateLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWinAdminOperateLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWinAdminOperateLogDo
	Group(cols ...field.Expr) IWinAdminOperateLogDo
	Having(conds ...gen.Condition) IWinAdminOperateLogDo
	Limit(limit int) IWinAdminOperateLogDo
	Offset(offset int) IWinAdminOperateLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWinAdminOperateLogDo
	Unscoped() IWinAdminOperateLogDo
	Create(values ...*model.WinAdminOperateLog) error
	CreateInBatches(values []*model.WinAdminOperateLog, batchSize int) error
	Save(values ...*model.WinAdminOperateLog) error
	First() (*model.WinAdminOperateLog, error)
	Take() (*model.WinAdminOperateLog, error)
	Last() (*model.WinAdminOperateLog, error)
	Find() ([]*model.WinAdminOperateLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinAdminOperateLog, err error)
	FindInBatches(result *[]*model.WinAdminOperateLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WinAdminOperateLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWinAdminOperateLogDo
	Assign(attrs ...field.AssignExpr) IWinAdminOperateLogDo
	Joins(fields ...field.RelationField) IWinAdminOperateLogDo
	Preload(fields ...field.RelationField) IWinAdminOperateLogDo
	FirstOrInit() (*model.WinAdminOperateLog, error)
	FirstOrCreate() (*model.WinAdminOperateLog, error)
	FindByPage(offset int, limit int) (result []*model.WinAdminOperateLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWinAdminOperateLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w winAdminOperateLogDo) Debug() IWinAdminOperateLogDo {
	return w.withDO(w.DO.Debug())
}

func (w winAdminOperateLogDo) WithContext(ctx context.Context) IWinAdminOperateLogDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w winAdminOperateLogDo) ReadDB() IWinAdminOperateLogDo {
	return w.Clauses(dbresolver.Read)
}

func (w winAdminOperateLogDo) WriteDB() IWinAdminOperateLogDo {
	return w.Clauses(dbresolver.Write)
}

func (w winAdminOperateLogDo) Session(config *gorm.Session) IWinAdminOperateLogDo {
	return w.withDO(w.DO.Session(config))
}

func (w winAdminOperateLogDo) Clauses(conds ...clause.Expression) IWinAdminOperateLogDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w winAdminOperateLogDo) Returning(value interface{}, columns ...string) IWinAdminOperateLogDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w winAdminOperateLogDo) Not(conds ...gen.Condition) IWinAdminOperateLogDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w winAdminOperateLogDo) Or(conds ...gen.Condition) IWinAdminOperateLogDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w winAdminOperateLogDo) Select(conds ...field.Expr) IWinAdminOperateLogDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w winAdminOperateLogDo) Where(conds ...gen.Condition) IWinAdminOperateLogDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w winAdminOperateLogDo) Order(conds ...field.Expr) IWinAdminOperateLogDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w winAdminOperateLogDo) Distinct(cols ...field.Expr) IWinAdminOperateLogDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w winAdminOperateLogDo) Omit(cols ...field.Expr) IWinAdminOperateLogDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w winAdminOperateLogDo) Join(table schema.Tabler, on ...field.Expr) IWinAdminOperateLogDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w winAdminOperateLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWinAdminOperateLogDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w winAdminOperateLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IWinAdminOperateLogDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w winAdminOperateLogDo) Group(cols ...field.Expr) IWinAdminOperateLogDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w winAdminOperateLogDo) Having(conds ...gen.Condition) IWinAdminOperateLogDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w winAdminOperateLogDo) Limit(limit int) IWinAdminOperateLogDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w winAdminOperateLogDo) Offset(offset int) IWinAdminOperateLogDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w winAdminOperateLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWinAdminOperateLogDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w winAdminOperateLogDo) Unscoped() IWinAdminOperateLogDo {
	return w.withDO(w.DO.Unscoped())
}

func (w winAdminOperateLogDo) Create(values ...*model.WinAdminOperateLog) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w winAdminOperateLogDo) CreateInBatches(values []*model.WinAdminOperateLog, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w winAdminOperateLogDo) Save(values ...*model.WinAdminOperateLog) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w winAdminOperateLogDo) First() (*model.WinAdminOperateLog, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinAdminOperateLog), nil
	}
}

func (w winAdminOperateLogDo) Take() (*model.WinAdminOperateLog, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinAdminOperateLog), nil
	}
}

func (w winAdminOperateLogDo) Last() (*model.WinAdminOperateLog, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinAdminOperateLog), nil
	}
}

func (w winAdminOperateLogDo) Find() ([]*model.WinAdminOperateLog, error) {
	result, err := w.DO.Find()
	return result.([]*model.WinAdminOperateLog), err
}

func (w winAdminOperateLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinAdminOperateLog, err error) {
	buf := make([]*model.WinAdminOperateLog, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w winAdminOperateLogDo) FindInBatches(result *[]*model.WinAdminOperateLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w winAdminOperateLogDo) Attrs(attrs ...field.AssignExpr) IWinAdminOperateLogDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w winAdminOperateLogDo) Assign(attrs ...field.AssignExpr) IWinAdminOperateLogDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w winAdminOperateLogDo) Joins(fields ...field.RelationField) IWinAdminOperateLogDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w winAdminOperateLogDo) Preload(fields ...field.RelationField) IWinAdminOperateLogDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w winAdminOperateLogDo) FirstOrInit() (*model.WinAdminOperateLog, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinAdminOperateLog), nil
	}
}

func (w winAdminOperateLogDo) FirstOrCreate() (*model.WinAdminOperateLog, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinAdminOperateLog), nil
	}
}

func (w winAdminOperateLogDo) FindByPage(offset int, limit int) (result []*model.WinAdminOperateLog, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w winAdminOperateLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w winAdminOperateLogDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w winAdminOperateLogDo) Delete(models ...*model.WinAdminOperateLog) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *winAdminOperateLogDo) withDO(do gen.Dao) *winAdminOperateLogDo {
	w.DO = *do.(*gen.DO)
	return w
}
