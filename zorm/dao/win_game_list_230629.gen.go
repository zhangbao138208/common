// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gitlab.skig.tech/zero-core/common/zorm/model"
)

func newWinGameList230629(db *gorm.DB, opts ...gen.DOOption) winGameList230629 {
	_winGameList230629 := winGameList230629{}

	_winGameList230629.winGameList230629Do.UseDB(db, opts...)
	_winGameList230629.winGameList230629Do.UseModel(&model.WinGameList230629{})

	tableName := _winGameList230629.winGameList230629Do.TableName()
	_winGameList230629.ALL = field.NewAsterisk(tableName)
	_winGameList230629.ID = field.NewInt64(tableName, "id")
	_winGameList230629.Code = field.NewString(tableName, "code")
	_winGameList230629.Name = field.NewString(tableName, "name")
	_winGameList230629.Icon = field.NewString(tableName, "icon")
	_winGameList230629.GroupID = field.NewInt64(tableName, "group_id")
	_winGameList230629.PlatListID = field.NewInt64(tableName, "plat_list_id")
	_winGameList230629.RevenueRate = field.NewField(tableName, "revenue_rate")
	_winGameList230629.Maintenance = field.NewString(tableName, "maintenance")
	_winGameList230629.GameCount = field.NewInt64(tableName, "game_count")
	_winGameList230629.Remark = field.NewString(tableName, "remark")
	_winGameList230629.Sort = field.NewInt64(tableName, "sort")
	_winGameList230629.Status = field.NewInt64(tableName, "status")
	_winGameList230629.CreatedAt = field.NewInt64(tableName, "created_at")
	_winGameList230629.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_winGameList230629.UpdatedUser = field.NewString(tableName, "updated_user")
	_winGameList230629.OperatorName = field.NewString(tableName, "operator_name")

	_winGameList230629.fillFieldMap()

	return _winGameList230629
}

type winGameList230629 struct {
	winGameList230629Do

	ALL          field.Asterisk
	ID           field.Int64
	Code         field.String // 平台编码
	Name         field.String // 名称
	Icon         field.String // 图标
	GroupID      field.Int64  // 类型:1-体育 2-电子 3-真人 4-捕鱼 5-棋牌 6-电竞 7-彩票 8-动物 9-快速 10-技能 11-table game
	PlatListID   field.Int64  // 平台配置表ID(plat_list)
	RevenueRate  field.Field  // 税收比例
	Maintenance  field.String // 维护时间
	GameCount    field.Int64  // 游戏数量
	Remark       field.String // 备注
	Sort         field.Int64  // 排序: 从高到低
	Status       field.Int64  // 状态: 1-启用 0-停用
	CreatedAt    field.Int64
	UpdatedAt    field.Int64
	UpdatedUser  field.String // 最后更新人
	OperatorName field.String // 操作人姓名

	fieldMap map[string]field.Expr
}

func (w winGameList230629) Table(newTableName string) *winGameList230629 {
	w.winGameList230629Do.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w winGameList230629) As(alias string) *winGameList230629 {
	w.winGameList230629Do.DO = *(w.winGameList230629Do.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *winGameList230629) updateTableName(table string) *winGameList230629 {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt64(table, "id")
	w.Code = field.NewString(table, "code")
	w.Name = field.NewString(table, "name")
	w.Icon = field.NewString(table, "icon")
	w.GroupID = field.NewInt64(table, "group_id")
	w.PlatListID = field.NewInt64(table, "plat_list_id")
	w.RevenueRate = field.NewField(table, "revenue_rate")
	w.Maintenance = field.NewString(table, "maintenance")
	w.GameCount = field.NewInt64(table, "game_count")
	w.Remark = field.NewString(table, "remark")
	w.Sort = field.NewInt64(table, "sort")
	w.Status = field.NewInt64(table, "status")
	w.CreatedAt = field.NewInt64(table, "created_at")
	w.UpdatedAt = field.NewInt64(table, "updated_at")
	w.UpdatedUser = field.NewString(table, "updated_user")
	w.OperatorName = field.NewString(table, "operator_name")

	w.fillFieldMap()

	return w
}

func (w *winGameList230629) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *winGameList230629) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 16)
	w.fieldMap["id"] = w.ID
	w.fieldMap["code"] = w.Code
	w.fieldMap["name"] = w.Name
	w.fieldMap["icon"] = w.Icon
	w.fieldMap["group_id"] = w.GroupID
	w.fieldMap["plat_list_id"] = w.PlatListID
	w.fieldMap["revenue_rate"] = w.RevenueRate
	w.fieldMap["maintenance"] = w.Maintenance
	w.fieldMap["game_count"] = w.GameCount
	w.fieldMap["remark"] = w.Remark
	w.fieldMap["sort"] = w.Sort
	w.fieldMap["status"] = w.Status
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["updated_at"] = w.UpdatedAt
	w.fieldMap["updated_user"] = w.UpdatedUser
	w.fieldMap["operator_name"] = w.OperatorName
}

func (w winGameList230629) clone(db *gorm.DB) winGameList230629 {
	w.winGameList230629Do.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w winGameList230629) replaceDB(db *gorm.DB) winGameList230629 {
	w.winGameList230629Do.ReplaceDB(db)
	return w
}

type winGameList230629Do struct{ gen.DO }

type IWinGameList230629Do interface {
	gen.SubQuery
	Debug() IWinGameList230629Do
	WithContext(ctx context.Context) IWinGameList230629Do
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWinGameList230629Do
	WriteDB() IWinGameList230629Do
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWinGameList230629Do
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWinGameList230629Do
	Not(conds ...gen.Condition) IWinGameList230629Do
	Or(conds ...gen.Condition) IWinGameList230629Do
	Select(conds ...field.Expr) IWinGameList230629Do
	Where(conds ...gen.Condition) IWinGameList230629Do
	Order(conds ...field.Expr) IWinGameList230629Do
	Distinct(cols ...field.Expr) IWinGameList230629Do
	Omit(cols ...field.Expr) IWinGameList230629Do
	Join(table schema.Tabler, on ...field.Expr) IWinGameList230629Do
	LeftJoin(table schema.Tabler, on ...field.Expr) IWinGameList230629Do
	RightJoin(table schema.Tabler, on ...field.Expr) IWinGameList230629Do
	Group(cols ...field.Expr) IWinGameList230629Do
	Having(conds ...gen.Condition) IWinGameList230629Do
	Limit(limit int) IWinGameList230629Do
	Offset(offset int) IWinGameList230629Do
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWinGameList230629Do
	Unscoped() IWinGameList230629Do
	Create(values ...*model.WinGameList230629) error
	CreateInBatches(values []*model.WinGameList230629, batchSize int) error
	Save(values ...*model.WinGameList230629) error
	First() (*model.WinGameList230629, error)
	Take() (*model.WinGameList230629, error)
	Last() (*model.WinGameList230629, error)
	Find() ([]*model.WinGameList230629, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinGameList230629, err error)
	FindInBatches(result *[]*model.WinGameList230629, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WinGameList230629) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWinGameList230629Do
	Assign(attrs ...field.AssignExpr) IWinGameList230629Do
	Joins(fields ...field.RelationField) IWinGameList230629Do
	Preload(fields ...field.RelationField) IWinGameList230629Do
	FirstOrInit() (*model.WinGameList230629, error)
	FirstOrCreate() (*model.WinGameList230629, error)
	FindByPage(offset int, limit int) (result []*model.WinGameList230629, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWinGameList230629Do
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w winGameList230629Do) Debug() IWinGameList230629Do {
	return w.withDO(w.DO.Debug())
}

func (w winGameList230629Do) WithContext(ctx context.Context) IWinGameList230629Do {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w winGameList230629Do) ReadDB() IWinGameList230629Do {
	return w.Clauses(dbresolver.Read)
}

func (w winGameList230629Do) WriteDB() IWinGameList230629Do {
	return w.Clauses(dbresolver.Write)
}

func (w winGameList230629Do) Session(config *gorm.Session) IWinGameList230629Do {
	return w.withDO(w.DO.Session(config))
}

func (w winGameList230629Do) Clauses(conds ...clause.Expression) IWinGameList230629Do {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w winGameList230629Do) Returning(value interface{}, columns ...string) IWinGameList230629Do {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w winGameList230629Do) Not(conds ...gen.Condition) IWinGameList230629Do {
	return w.withDO(w.DO.Not(conds...))
}

func (w winGameList230629Do) Or(conds ...gen.Condition) IWinGameList230629Do {
	return w.withDO(w.DO.Or(conds...))
}

func (w winGameList230629Do) Select(conds ...field.Expr) IWinGameList230629Do {
	return w.withDO(w.DO.Select(conds...))
}

func (w winGameList230629Do) Where(conds ...gen.Condition) IWinGameList230629Do {
	return w.withDO(w.DO.Where(conds...))
}

func (w winGameList230629Do) Order(conds ...field.Expr) IWinGameList230629Do {
	return w.withDO(w.DO.Order(conds...))
}

func (w winGameList230629Do) Distinct(cols ...field.Expr) IWinGameList230629Do {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w winGameList230629Do) Omit(cols ...field.Expr) IWinGameList230629Do {
	return w.withDO(w.DO.Omit(cols...))
}

func (w winGameList230629Do) Join(table schema.Tabler, on ...field.Expr) IWinGameList230629Do {
	return w.withDO(w.DO.Join(table, on...))
}

func (w winGameList230629Do) LeftJoin(table schema.Tabler, on ...field.Expr) IWinGameList230629Do {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w winGameList230629Do) RightJoin(table schema.Tabler, on ...field.Expr) IWinGameList230629Do {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w winGameList230629Do) Group(cols ...field.Expr) IWinGameList230629Do {
	return w.withDO(w.DO.Group(cols...))
}

func (w winGameList230629Do) Having(conds ...gen.Condition) IWinGameList230629Do {
	return w.withDO(w.DO.Having(conds...))
}

func (w winGameList230629Do) Limit(limit int) IWinGameList230629Do {
	return w.withDO(w.DO.Limit(limit))
}

func (w winGameList230629Do) Offset(offset int) IWinGameList230629Do {
	return w.withDO(w.DO.Offset(offset))
}

func (w winGameList230629Do) Scopes(funcs ...func(gen.Dao) gen.Dao) IWinGameList230629Do {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w winGameList230629Do) Unscoped() IWinGameList230629Do {
	return w.withDO(w.DO.Unscoped())
}

func (w winGameList230629Do) Create(values ...*model.WinGameList230629) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w winGameList230629Do) CreateInBatches(values []*model.WinGameList230629, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w winGameList230629Do) Save(values ...*model.WinGameList230629) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w winGameList230629Do) First() (*model.WinGameList230629, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinGameList230629), nil
	}
}

func (w winGameList230629Do) Take() (*model.WinGameList230629, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinGameList230629), nil
	}
}

func (w winGameList230629Do) Last() (*model.WinGameList230629, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinGameList230629), nil
	}
}

func (w winGameList230629Do) Find() ([]*model.WinGameList230629, error) {
	result, err := w.DO.Find()
	return result.([]*model.WinGameList230629), err
}

func (w winGameList230629Do) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinGameList230629, err error) {
	buf := make([]*model.WinGameList230629, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w winGameList230629Do) FindInBatches(result *[]*model.WinGameList230629, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w winGameList230629Do) Attrs(attrs ...field.AssignExpr) IWinGameList230629Do {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w winGameList230629Do) Assign(attrs ...field.AssignExpr) IWinGameList230629Do {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w winGameList230629Do) Joins(fields ...field.RelationField) IWinGameList230629Do {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w winGameList230629Do) Preload(fields ...field.RelationField) IWinGameList230629Do {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w winGameList230629Do) FirstOrInit() (*model.WinGameList230629, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinGameList230629), nil
	}
}

func (w winGameList230629Do) FirstOrCreate() (*model.WinGameList230629, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinGameList230629), nil
	}
}

func (w winGameList230629Do) FindByPage(offset int, limit int) (result []*model.WinGameList230629, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w winGameList230629Do) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w winGameList230629Do) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w winGameList230629Do) Delete(models ...*model.WinGameList230629) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *winGameList230629Do) withDO(do gen.Dao) *winGameList230629Do {
	w.DO = *do.(*gen.DO)
	return w
}
