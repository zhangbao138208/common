// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gitlab.skig.tech/zero-core/common/zorm/model"
)

func newWinCodeAudit(db *gorm.DB, opts ...gen.DOOption) winCodeAudit {
	_winCodeAudit := winCodeAudit{}

	_winCodeAudit.winCodeAuditDo.UseDB(db, opts...)
	_winCodeAudit.winCodeAuditDo.UseModel(&model.WinCodeAudit{})

	tableName := _winCodeAudit.winCodeAuditDo.TableName()
	_winCodeAudit.ALL = field.NewAsterisk(tableName)
	_winCodeAudit.ID = field.NewInt64(tableName, "id")
	_winCodeAudit.UID = field.NewInt64(tableName, "uid")
	_winCodeAudit.Username = field.NewString(tableName, "username")
	_winCodeAudit.AuditUsername = field.NewString(tableName, "audit_username")
	_winCodeAudit.CodeRequire = field.NewField(tableName, "code_require")
	_winCodeAudit.CodeReal = field.NewField(tableName, "code_real")
	_winCodeAudit.ReferID = field.NewInt64(tableName, "refer_id")
	_winCodeAudit.Status = field.NewInt64(tableName, "status")
	_winCodeAudit.CreatedAt = field.NewInt64(tableName, "created_at")
	_winCodeAudit.UpdatedAt = field.NewInt64(tableName, "updated_at")

	_winCodeAudit.fillFieldMap()

	return _winCodeAudit
}

type winCodeAudit struct {
	winCodeAuditDo

	ALL           field.Asterisk
	ID            field.Int64  // ID
	UID           field.Int64  // uid
	Username      field.String // 用户名
	AuditUsername field.String // 审核人
	CodeRequire   field.Field  // 所需打码量
	CodeReal      field.Field  // 真实打码量
	ReferID       field.Int64  // 对应的提款订单ID
	Status        field.Int64  // 状态:1-稽核成功 2-稽核失败
	CreatedAt     field.Int64  // 创建时间
	UpdatedAt     field.Int64

	fieldMap map[string]field.Expr
}

func (w winCodeAudit) Table(newTableName string) *winCodeAudit {
	w.winCodeAuditDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w winCodeAudit) As(alias string) *winCodeAudit {
	w.winCodeAuditDo.DO = *(w.winCodeAuditDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *winCodeAudit) updateTableName(table string) *winCodeAudit {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt64(table, "id")
	w.UID = field.NewInt64(table, "uid")
	w.Username = field.NewString(table, "username")
	w.AuditUsername = field.NewString(table, "audit_username")
	w.CodeRequire = field.NewField(table, "code_require")
	w.CodeReal = field.NewField(table, "code_real")
	w.ReferID = field.NewInt64(table, "refer_id")
	w.Status = field.NewInt64(table, "status")
	w.CreatedAt = field.NewInt64(table, "created_at")
	w.UpdatedAt = field.NewInt64(table, "updated_at")

	w.fillFieldMap()

	return w
}

func (w *winCodeAudit) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *winCodeAudit) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 10)
	w.fieldMap["id"] = w.ID
	w.fieldMap["uid"] = w.UID
	w.fieldMap["username"] = w.Username
	w.fieldMap["audit_username"] = w.AuditUsername
	w.fieldMap["code_require"] = w.CodeRequire
	w.fieldMap["code_real"] = w.CodeReal
	w.fieldMap["refer_id"] = w.ReferID
	w.fieldMap["status"] = w.Status
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["updated_at"] = w.UpdatedAt
}

func (w winCodeAudit) clone(db *gorm.DB) winCodeAudit {
	w.winCodeAuditDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w winCodeAudit) replaceDB(db *gorm.DB) winCodeAudit {
	w.winCodeAuditDo.ReplaceDB(db)
	return w
}

type winCodeAuditDo struct{ gen.DO }

type IWinCodeAuditDo interface {
	gen.SubQuery
	Debug() IWinCodeAuditDo
	WithContext(ctx context.Context) IWinCodeAuditDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWinCodeAuditDo
	WriteDB() IWinCodeAuditDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWinCodeAuditDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWinCodeAuditDo
	Not(conds ...gen.Condition) IWinCodeAuditDo
	Or(conds ...gen.Condition) IWinCodeAuditDo
	Select(conds ...field.Expr) IWinCodeAuditDo
	Where(conds ...gen.Condition) IWinCodeAuditDo
	Order(conds ...field.Expr) IWinCodeAuditDo
	Distinct(cols ...field.Expr) IWinCodeAuditDo
	Omit(cols ...field.Expr) IWinCodeAuditDo
	Join(table schema.Tabler, on ...field.Expr) IWinCodeAuditDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWinCodeAuditDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWinCodeAuditDo
	Group(cols ...field.Expr) IWinCodeAuditDo
	Having(conds ...gen.Condition) IWinCodeAuditDo
	Limit(limit int) IWinCodeAuditDo
	Offset(offset int) IWinCodeAuditDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWinCodeAuditDo
	Unscoped() IWinCodeAuditDo
	Create(values ...*model.WinCodeAudit) error
	CreateInBatches(values []*model.WinCodeAudit, batchSize int) error
	Save(values ...*model.WinCodeAudit) error
	First() (*model.WinCodeAudit, error)
	Take() (*model.WinCodeAudit, error)
	Last() (*model.WinCodeAudit, error)
	Find() ([]*model.WinCodeAudit, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinCodeAudit, err error)
	FindInBatches(result *[]*model.WinCodeAudit, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WinCodeAudit) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWinCodeAuditDo
	Assign(attrs ...field.AssignExpr) IWinCodeAuditDo
	Joins(fields ...field.RelationField) IWinCodeAuditDo
	Preload(fields ...field.RelationField) IWinCodeAuditDo
	FirstOrInit() (*model.WinCodeAudit, error)
	FirstOrCreate() (*model.WinCodeAudit, error)
	FindByPage(offset int, limit int) (result []*model.WinCodeAudit, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWinCodeAuditDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w winCodeAuditDo) Debug() IWinCodeAuditDo {
	return w.withDO(w.DO.Debug())
}

func (w winCodeAuditDo) WithContext(ctx context.Context) IWinCodeAuditDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w winCodeAuditDo) ReadDB() IWinCodeAuditDo {
	return w.Clauses(dbresolver.Read)
}

func (w winCodeAuditDo) WriteDB() IWinCodeAuditDo {
	return w.Clauses(dbresolver.Write)
}

func (w winCodeAuditDo) Session(config *gorm.Session) IWinCodeAuditDo {
	return w.withDO(w.DO.Session(config))
}

func (w winCodeAuditDo) Clauses(conds ...clause.Expression) IWinCodeAuditDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w winCodeAuditDo) Returning(value interface{}, columns ...string) IWinCodeAuditDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w winCodeAuditDo) Not(conds ...gen.Condition) IWinCodeAuditDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w winCodeAuditDo) Or(conds ...gen.Condition) IWinCodeAuditDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w winCodeAuditDo) Select(conds ...field.Expr) IWinCodeAuditDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w winCodeAuditDo) Where(conds ...gen.Condition) IWinCodeAuditDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w winCodeAuditDo) Order(conds ...field.Expr) IWinCodeAuditDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w winCodeAuditDo) Distinct(cols ...field.Expr) IWinCodeAuditDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w winCodeAuditDo) Omit(cols ...field.Expr) IWinCodeAuditDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w winCodeAuditDo) Join(table schema.Tabler, on ...field.Expr) IWinCodeAuditDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w winCodeAuditDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWinCodeAuditDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w winCodeAuditDo) RightJoin(table schema.Tabler, on ...field.Expr) IWinCodeAuditDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w winCodeAuditDo) Group(cols ...field.Expr) IWinCodeAuditDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w winCodeAuditDo) Having(conds ...gen.Condition) IWinCodeAuditDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w winCodeAuditDo) Limit(limit int) IWinCodeAuditDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w winCodeAuditDo) Offset(offset int) IWinCodeAuditDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w winCodeAuditDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWinCodeAuditDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w winCodeAuditDo) Unscoped() IWinCodeAuditDo {
	return w.withDO(w.DO.Unscoped())
}

func (w winCodeAuditDo) Create(values ...*model.WinCodeAudit) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w winCodeAuditDo) CreateInBatches(values []*model.WinCodeAudit, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w winCodeAuditDo) Save(values ...*model.WinCodeAudit) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w winCodeAuditDo) First() (*model.WinCodeAudit, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinCodeAudit), nil
	}
}

func (w winCodeAuditDo) Take() (*model.WinCodeAudit, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinCodeAudit), nil
	}
}

func (w winCodeAuditDo) Last() (*model.WinCodeAudit, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinCodeAudit), nil
	}
}

func (w winCodeAuditDo) Find() ([]*model.WinCodeAudit, error) {
	result, err := w.DO.Find()
	return result.([]*model.WinCodeAudit), err
}

func (w winCodeAuditDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinCodeAudit, err error) {
	buf := make([]*model.WinCodeAudit, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w winCodeAuditDo) FindInBatches(result *[]*model.WinCodeAudit, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w winCodeAuditDo) Attrs(attrs ...field.AssignExpr) IWinCodeAuditDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w winCodeAuditDo) Assign(attrs ...field.AssignExpr) IWinCodeAuditDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w winCodeAuditDo) Joins(fields ...field.RelationField) IWinCodeAuditDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w winCodeAuditDo) Preload(fields ...field.RelationField) IWinCodeAuditDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w winCodeAuditDo) FirstOrInit() (*model.WinCodeAudit, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinCodeAudit), nil
	}
}

func (w winCodeAuditDo) FirstOrCreate() (*model.WinCodeAudit, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinCodeAudit), nil
	}
}

func (w winCodeAuditDo) FindByPage(offset int, limit int) (result []*model.WinCodeAudit, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w winCodeAuditDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w winCodeAuditDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w winCodeAuditDo) Delete(models ...*model.WinCodeAudit) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *winCodeAuditDo) withDO(do gen.Dao) *winCodeAuditDo {
	w.DO = *do.(*gen.DO)
	return w
}
