// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gitlab.skig.tech/zero-core/common/zorm/model"
)

func newWinUserFacebookLogin(db *gorm.DB, opts ...gen.DOOption) winUserFacebookLogin {
	_winUserFacebookLogin := winUserFacebookLogin{}

	_winUserFacebookLogin.winUserFacebookLoginDo.UseDB(db, opts...)
	_winUserFacebookLogin.winUserFacebookLoginDo.UseModel(&model.WinUserFacebookLogin{})

	tableName := _winUserFacebookLogin.winUserFacebookLoginDo.TableName()
	_winUserFacebookLogin.ALL = field.NewAsterisk(tableName)
	_winUserFacebookLogin.ID = field.NewInt64(tableName, "id")
	_winUserFacebookLogin.UserID = field.NewInt64(tableName, "user_id")
	_winUserFacebookLogin.Username = field.NewString(tableName, "username")
	_winUserFacebookLogin.FacebookUserID = field.NewString(tableName, "facebook_user_id")
	_winUserFacebookLogin.CreatedAt = field.NewInt64(tableName, "created_at")

	_winUserFacebookLogin.fillFieldMap()

	return _winUserFacebookLogin
}

type winUserFacebookLogin struct {
	winUserFacebookLoginDo

	ALL            field.Asterisk
	ID             field.Int64  // 主键
	UserID         field.Int64  // 客户表ID
	Username       field.String // 用户名
	FacebookUserID field.String // Facebook用户ID
	CreatedAt      field.Int64  // 创建时间

	fieldMap map[string]field.Expr
}

func (w winUserFacebookLogin) Table(newTableName string) *winUserFacebookLogin {
	w.winUserFacebookLoginDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w winUserFacebookLogin) As(alias string) *winUserFacebookLogin {
	w.winUserFacebookLoginDo.DO = *(w.winUserFacebookLoginDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *winUserFacebookLogin) updateTableName(table string) *winUserFacebookLogin {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt64(table, "id")
	w.UserID = field.NewInt64(table, "user_id")
	w.Username = field.NewString(table, "username")
	w.FacebookUserID = field.NewString(table, "facebook_user_id")
	w.CreatedAt = field.NewInt64(table, "created_at")

	w.fillFieldMap()

	return w
}

func (w *winUserFacebookLogin) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *winUserFacebookLogin) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 5)
	w.fieldMap["id"] = w.ID
	w.fieldMap["user_id"] = w.UserID
	w.fieldMap["username"] = w.Username
	w.fieldMap["facebook_user_id"] = w.FacebookUserID
	w.fieldMap["created_at"] = w.CreatedAt
}

func (w winUserFacebookLogin) clone(db *gorm.DB) winUserFacebookLogin {
	w.winUserFacebookLoginDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w winUserFacebookLogin) replaceDB(db *gorm.DB) winUserFacebookLogin {
	w.winUserFacebookLoginDo.ReplaceDB(db)
	return w
}

type winUserFacebookLoginDo struct{ gen.DO }

type IWinUserFacebookLoginDo interface {
	gen.SubQuery
	Debug() IWinUserFacebookLoginDo
	WithContext(ctx context.Context) IWinUserFacebookLoginDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWinUserFacebookLoginDo
	WriteDB() IWinUserFacebookLoginDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWinUserFacebookLoginDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWinUserFacebookLoginDo
	Not(conds ...gen.Condition) IWinUserFacebookLoginDo
	Or(conds ...gen.Condition) IWinUserFacebookLoginDo
	Select(conds ...field.Expr) IWinUserFacebookLoginDo
	Where(conds ...gen.Condition) IWinUserFacebookLoginDo
	Order(conds ...field.Expr) IWinUserFacebookLoginDo
	Distinct(cols ...field.Expr) IWinUserFacebookLoginDo
	Omit(cols ...field.Expr) IWinUserFacebookLoginDo
	Join(table schema.Tabler, on ...field.Expr) IWinUserFacebookLoginDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWinUserFacebookLoginDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWinUserFacebookLoginDo
	Group(cols ...field.Expr) IWinUserFacebookLoginDo
	Having(conds ...gen.Condition) IWinUserFacebookLoginDo
	Limit(limit int) IWinUserFacebookLoginDo
	Offset(offset int) IWinUserFacebookLoginDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWinUserFacebookLoginDo
	Unscoped() IWinUserFacebookLoginDo
	Create(values ...*model.WinUserFacebookLogin) error
	CreateInBatches(values []*model.WinUserFacebookLogin, batchSize int) error
	Save(values ...*model.WinUserFacebookLogin) error
	First() (*model.WinUserFacebookLogin, error)
	Take() (*model.WinUserFacebookLogin, error)
	Last() (*model.WinUserFacebookLogin, error)
	Find() ([]*model.WinUserFacebookLogin, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinUserFacebookLogin, err error)
	FindInBatches(result *[]*model.WinUserFacebookLogin, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WinUserFacebookLogin) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWinUserFacebookLoginDo
	Assign(attrs ...field.AssignExpr) IWinUserFacebookLoginDo
	Joins(fields ...field.RelationField) IWinUserFacebookLoginDo
	Preload(fields ...field.RelationField) IWinUserFacebookLoginDo
	FirstOrInit() (*model.WinUserFacebookLogin, error)
	FirstOrCreate() (*model.WinUserFacebookLogin, error)
	FindByPage(offset int, limit int) (result []*model.WinUserFacebookLogin, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWinUserFacebookLoginDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w winUserFacebookLoginDo) Debug() IWinUserFacebookLoginDo {
	return w.withDO(w.DO.Debug())
}

func (w winUserFacebookLoginDo) WithContext(ctx context.Context) IWinUserFacebookLoginDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w winUserFacebookLoginDo) ReadDB() IWinUserFacebookLoginDo {
	return w.Clauses(dbresolver.Read)
}

func (w winUserFacebookLoginDo) WriteDB() IWinUserFacebookLoginDo {
	return w.Clauses(dbresolver.Write)
}

func (w winUserFacebookLoginDo) Session(config *gorm.Session) IWinUserFacebookLoginDo {
	return w.withDO(w.DO.Session(config))
}

func (w winUserFacebookLoginDo) Clauses(conds ...clause.Expression) IWinUserFacebookLoginDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w winUserFacebookLoginDo) Returning(value interface{}, columns ...string) IWinUserFacebookLoginDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w winUserFacebookLoginDo) Not(conds ...gen.Condition) IWinUserFacebookLoginDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w winUserFacebookLoginDo) Or(conds ...gen.Condition) IWinUserFacebookLoginDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w winUserFacebookLoginDo) Select(conds ...field.Expr) IWinUserFacebookLoginDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w winUserFacebookLoginDo) Where(conds ...gen.Condition) IWinUserFacebookLoginDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w winUserFacebookLoginDo) Order(conds ...field.Expr) IWinUserFacebookLoginDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w winUserFacebookLoginDo) Distinct(cols ...field.Expr) IWinUserFacebookLoginDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w winUserFacebookLoginDo) Omit(cols ...field.Expr) IWinUserFacebookLoginDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w winUserFacebookLoginDo) Join(table schema.Tabler, on ...field.Expr) IWinUserFacebookLoginDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w winUserFacebookLoginDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWinUserFacebookLoginDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w winUserFacebookLoginDo) RightJoin(table schema.Tabler, on ...field.Expr) IWinUserFacebookLoginDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w winUserFacebookLoginDo) Group(cols ...field.Expr) IWinUserFacebookLoginDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w winUserFacebookLoginDo) Having(conds ...gen.Condition) IWinUserFacebookLoginDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w winUserFacebookLoginDo) Limit(limit int) IWinUserFacebookLoginDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w winUserFacebookLoginDo) Offset(offset int) IWinUserFacebookLoginDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w winUserFacebookLoginDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWinUserFacebookLoginDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w winUserFacebookLoginDo) Unscoped() IWinUserFacebookLoginDo {
	return w.withDO(w.DO.Unscoped())
}

func (w winUserFacebookLoginDo) Create(values ...*model.WinUserFacebookLogin) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w winUserFacebookLoginDo) CreateInBatches(values []*model.WinUserFacebookLogin, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w winUserFacebookLoginDo) Save(values ...*model.WinUserFacebookLogin) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w winUserFacebookLoginDo) First() (*model.WinUserFacebookLogin, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinUserFacebookLogin), nil
	}
}

func (w winUserFacebookLoginDo) Take() (*model.WinUserFacebookLogin, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinUserFacebookLogin), nil
	}
}

func (w winUserFacebookLoginDo) Last() (*model.WinUserFacebookLogin, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinUserFacebookLogin), nil
	}
}

func (w winUserFacebookLoginDo) Find() ([]*model.WinUserFacebookLogin, error) {
	result, err := w.DO.Find()
	return result.([]*model.WinUserFacebookLogin), err
}

func (w winUserFacebookLoginDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinUserFacebookLogin, err error) {
	buf := make([]*model.WinUserFacebookLogin, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w winUserFacebookLoginDo) FindInBatches(result *[]*model.WinUserFacebookLogin, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w winUserFacebookLoginDo) Attrs(attrs ...field.AssignExpr) IWinUserFacebookLoginDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w winUserFacebookLoginDo) Assign(attrs ...field.AssignExpr) IWinUserFacebookLoginDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w winUserFacebookLoginDo) Joins(fields ...field.RelationField) IWinUserFacebookLoginDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w winUserFacebookLoginDo) Preload(fields ...field.RelationField) IWinUserFacebookLoginDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w winUserFacebookLoginDo) FirstOrInit() (*model.WinUserFacebookLogin, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinUserFacebookLogin), nil
	}
}

func (w winUserFacebookLoginDo) FirstOrCreate() (*model.WinUserFacebookLogin, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinUserFacebookLogin), nil
	}
}

func (w winUserFacebookLoginDo) FindByPage(offset int, limit int) (result []*model.WinUserFacebookLogin, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w winUserFacebookLoginDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w winUserFacebookLoginDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w winUserFacebookLoginDo) Delete(models ...*model.WinUserFacebookLogin) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *winUserFacebookLoginDo) withDO(do gen.Dao) *winUserFacebookLoginDo {
	w.DO = *do.(*gen.DO)
	return w
}
