// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gitlab.skig.tech/zero-core/common/zorm/model"
)

func newWinUserLevelRebateTmp(db *gorm.DB, opts ...gen.DOOption) winUserLevelRebateTmp {
	_winUserLevelRebateTmp := winUserLevelRebateTmp{}

	_winUserLevelRebateTmp.winUserLevelRebateTmpDo.UseDB(db, opts...)
	_winUserLevelRebateTmp.winUserLevelRebateTmpDo.UseModel(&model.WinUserLevelRebateTmp{})

	tableName := _winUserLevelRebateTmp.winUserLevelRebateTmpDo.TableName()
	_winUserLevelRebateTmp.ALL = field.NewAsterisk(tableName)
	_winUserLevelRebateTmp.ID = field.NewInt64(tableName, "id")
	_winUserLevelRebateTmp.LevelID = field.NewInt64(tableName, "level_id")
	_winUserLevelRebateTmp.GroupID = field.NewInt64(tableName, "group_id")
	_winUserLevelRebateTmp.RebateRate = field.NewField(tableName, "rebate_rate")
	_winUserLevelRebateTmp.Status = field.NewInt64(tableName, "status")
	_winUserLevelRebateTmp.CreatedAt = field.NewInt64(tableName, "created_at")
	_winUserLevelRebateTmp.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_winUserLevelRebateTmp.UpdatedUser = field.NewString(tableName, "updated_user")

	_winUserLevelRebateTmp.fillFieldMap()

	return _winUserLevelRebateTmp
}

type winUserLevelRebateTmp struct {
	winUserLevelRebateTmpDo

	ALL         field.Asterisk
	ID          field.Int64 // ID主键
	LevelID     field.Int64 // 会员等级ID
	GroupID     field.Int64 // 类型:1-体育 2-电子 3-真人 4-捕鱼 5-棋牌 6-电竞 7-彩票 8-动物 9-快速 10-技能 11-table game
	RebateRate  field.Field // 返水比例
	Status      field.Int64 // 状态:1-启用 0-停用
	CreatedAt   field.Int64
	UpdatedAt   field.Int64
	UpdatedUser field.String // 最后修改人

	fieldMap map[string]field.Expr
}

func (w winUserLevelRebateTmp) Table(newTableName string) *winUserLevelRebateTmp {
	w.winUserLevelRebateTmpDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w winUserLevelRebateTmp) As(alias string) *winUserLevelRebateTmp {
	w.winUserLevelRebateTmpDo.DO = *(w.winUserLevelRebateTmpDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *winUserLevelRebateTmp) updateTableName(table string) *winUserLevelRebateTmp {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt64(table, "id")
	w.LevelID = field.NewInt64(table, "level_id")
	w.GroupID = field.NewInt64(table, "group_id")
	w.RebateRate = field.NewField(table, "rebate_rate")
	w.Status = field.NewInt64(table, "status")
	w.CreatedAt = field.NewInt64(table, "created_at")
	w.UpdatedAt = field.NewInt64(table, "updated_at")
	w.UpdatedUser = field.NewString(table, "updated_user")

	w.fillFieldMap()

	return w
}

func (w *winUserLevelRebateTmp) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *winUserLevelRebateTmp) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 8)
	w.fieldMap["id"] = w.ID
	w.fieldMap["level_id"] = w.LevelID
	w.fieldMap["group_id"] = w.GroupID
	w.fieldMap["rebate_rate"] = w.RebateRate
	w.fieldMap["status"] = w.Status
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["updated_at"] = w.UpdatedAt
	w.fieldMap["updated_user"] = w.UpdatedUser
}

func (w winUserLevelRebateTmp) clone(db *gorm.DB) winUserLevelRebateTmp {
	w.winUserLevelRebateTmpDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w winUserLevelRebateTmp) replaceDB(db *gorm.DB) winUserLevelRebateTmp {
	w.winUserLevelRebateTmpDo.ReplaceDB(db)
	return w
}

type winUserLevelRebateTmpDo struct{ gen.DO }

type IWinUserLevelRebateTmpDo interface {
	gen.SubQuery
	Debug() IWinUserLevelRebateTmpDo
	WithContext(ctx context.Context) IWinUserLevelRebateTmpDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWinUserLevelRebateTmpDo
	WriteDB() IWinUserLevelRebateTmpDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWinUserLevelRebateTmpDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWinUserLevelRebateTmpDo
	Not(conds ...gen.Condition) IWinUserLevelRebateTmpDo
	Or(conds ...gen.Condition) IWinUserLevelRebateTmpDo
	Select(conds ...field.Expr) IWinUserLevelRebateTmpDo
	Where(conds ...gen.Condition) IWinUserLevelRebateTmpDo
	Order(conds ...field.Expr) IWinUserLevelRebateTmpDo
	Distinct(cols ...field.Expr) IWinUserLevelRebateTmpDo
	Omit(cols ...field.Expr) IWinUserLevelRebateTmpDo
	Join(table schema.Tabler, on ...field.Expr) IWinUserLevelRebateTmpDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWinUserLevelRebateTmpDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWinUserLevelRebateTmpDo
	Group(cols ...field.Expr) IWinUserLevelRebateTmpDo
	Having(conds ...gen.Condition) IWinUserLevelRebateTmpDo
	Limit(limit int) IWinUserLevelRebateTmpDo
	Offset(offset int) IWinUserLevelRebateTmpDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWinUserLevelRebateTmpDo
	Unscoped() IWinUserLevelRebateTmpDo
	Create(values ...*model.WinUserLevelRebateTmp) error
	CreateInBatches(values []*model.WinUserLevelRebateTmp, batchSize int) error
	Save(values ...*model.WinUserLevelRebateTmp) error
	First() (*model.WinUserLevelRebateTmp, error)
	Take() (*model.WinUserLevelRebateTmp, error)
	Last() (*model.WinUserLevelRebateTmp, error)
	Find() ([]*model.WinUserLevelRebateTmp, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinUserLevelRebateTmp, err error)
	FindInBatches(result *[]*model.WinUserLevelRebateTmp, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WinUserLevelRebateTmp) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWinUserLevelRebateTmpDo
	Assign(attrs ...field.AssignExpr) IWinUserLevelRebateTmpDo
	Joins(fields ...field.RelationField) IWinUserLevelRebateTmpDo
	Preload(fields ...field.RelationField) IWinUserLevelRebateTmpDo
	FirstOrInit() (*model.WinUserLevelRebateTmp, error)
	FirstOrCreate() (*model.WinUserLevelRebateTmp, error)
	FindByPage(offset int, limit int) (result []*model.WinUserLevelRebateTmp, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWinUserLevelRebateTmpDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w winUserLevelRebateTmpDo) Debug() IWinUserLevelRebateTmpDo {
	return w.withDO(w.DO.Debug())
}

func (w winUserLevelRebateTmpDo) WithContext(ctx context.Context) IWinUserLevelRebateTmpDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w winUserLevelRebateTmpDo) ReadDB() IWinUserLevelRebateTmpDo {
	return w.Clauses(dbresolver.Read)
}

func (w winUserLevelRebateTmpDo) WriteDB() IWinUserLevelRebateTmpDo {
	return w.Clauses(dbresolver.Write)
}

func (w winUserLevelRebateTmpDo) Session(config *gorm.Session) IWinUserLevelRebateTmpDo {
	return w.withDO(w.DO.Session(config))
}

func (w winUserLevelRebateTmpDo) Clauses(conds ...clause.Expression) IWinUserLevelRebateTmpDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w winUserLevelRebateTmpDo) Returning(value interface{}, columns ...string) IWinUserLevelRebateTmpDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w winUserLevelRebateTmpDo) Not(conds ...gen.Condition) IWinUserLevelRebateTmpDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w winUserLevelRebateTmpDo) Or(conds ...gen.Condition) IWinUserLevelRebateTmpDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w winUserLevelRebateTmpDo) Select(conds ...field.Expr) IWinUserLevelRebateTmpDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w winUserLevelRebateTmpDo) Where(conds ...gen.Condition) IWinUserLevelRebateTmpDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w winUserLevelRebateTmpDo) Order(conds ...field.Expr) IWinUserLevelRebateTmpDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w winUserLevelRebateTmpDo) Distinct(cols ...field.Expr) IWinUserLevelRebateTmpDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w winUserLevelRebateTmpDo) Omit(cols ...field.Expr) IWinUserLevelRebateTmpDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w winUserLevelRebateTmpDo) Join(table schema.Tabler, on ...field.Expr) IWinUserLevelRebateTmpDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w winUserLevelRebateTmpDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWinUserLevelRebateTmpDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w winUserLevelRebateTmpDo) RightJoin(table schema.Tabler, on ...field.Expr) IWinUserLevelRebateTmpDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w winUserLevelRebateTmpDo) Group(cols ...field.Expr) IWinUserLevelRebateTmpDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w winUserLevelRebateTmpDo) Having(conds ...gen.Condition) IWinUserLevelRebateTmpDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w winUserLevelRebateTmpDo) Limit(limit int) IWinUserLevelRebateTmpDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w winUserLevelRebateTmpDo) Offset(offset int) IWinUserLevelRebateTmpDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w winUserLevelRebateTmpDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWinUserLevelRebateTmpDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w winUserLevelRebateTmpDo) Unscoped() IWinUserLevelRebateTmpDo {
	return w.withDO(w.DO.Unscoped())
}

func (w winUserLevelRebateTmpDo) Create(values ...*model.WinUserLevelRebateTmp) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w winUserLevelRebateTmpDo) CreateInBatches(values []*model.WinUserLevelRebateTmp, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w winUserLevelRebateTmpDo) Save(values ...*model.WinUserLevelRebateTmp) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w winUserLevelRebateTmpDo) First() (*model.WinUserLevelRebateTmp, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinUserLevelRebateTmp), nil
	}
}

func (w winUserLevelRebateTmpDo) Take() (*model.WinUserLevelRebateTmp, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinUserLevelRebateTmp), nil
	}
}

func (w winUserLevelRebateTmpDo) Last() (*model.WinUserLevelRebateTmp, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinUserLevelRebateTmp), nil
	}
}

func (w winUserLevelRebateTmpDo) Find() ([]*model.WinUserLevelRebateTmp, error) {
	result, err := w.DO.Find()
	return result.([]*model.WinUserLevelRebateTmp), err
}

func (w winUserLevelRebateTmpDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinUserLevelRebateTmp, err error) {
	buf := make([]*model.WinUserLevelRebateTmp, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w winUserLevelRebateTmpDo) FindInBatches(result *[]*model.WinUserLevelRebateTmp, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w winUserLevelRebateTmpDo) Attrs(attrs ...field.AssignExpr) IWinUserLevelRebateTmpDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w winUserLevelRebateTmpDo) Assign(attrs ...field.AssignExpr) IWinUserLevelRebateTmpDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w winUserLevelRebateTmpDo) Joins(fields ...field.RelationField) IWinUserLevelRebateTmpDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w winUserLevelRebateTmpDo) Preload(fields ...field.RelationField) IWinUserLevelRebateTmpDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w winUserLevelRebateTmpDo) FirstOrInit() (*model.WinUserLevelRebateTmp, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinUserLevelRebateTmp), nil
	}
}

func (w winUserLevelRebateTmpDo) FirstOrCreate() (*model.WinUserLevelRebateTmp, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinUserLevelRebateTmp), nil
	}
}

func (w winUserLevelRebateTmpDo) FindByPage(offset int, limit int) (result []*model.WinUserLevelRebateTmp, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w winUserLevelRebateTmpDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w winUserLevelRebateTmpDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w winUserLevelRebateTmpDo) Delete(models ...*model.WinUserLevelRebateTmp) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *winUserLevelRebateTmpDo) withDO(do gen.Dao) *winUserLevelRebateTmpDo {
	w.DO = *do.(*gen.DO)
	return w
}
