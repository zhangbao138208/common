// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gitlab.skig.tech/zero-core/common/zorm/model"
)

func newGamePagcor(db *gorm.DB, opts ...gen.DOOption) gamePagcor {
	_gamePagcor := gamePagcor{}

	_gamePagcor.gamePagcorDo.UseDB(db, opts...)
	_gamePagcor.gamePagcorDo.UseModel(&model.GamePagcor{})

	tableName := _gamePagcor.gamePagcorDo.TableName()
	_gamePagcor.ALL = field.NewAsterisk(tableName)
	_gamePagcor.ID = field.NewInt64(tableName, "id")
	_gamePagcor.Name = field.NewString(tableName, "name")
	_gamePagcor.Icon = field.NewString(tableName, "icon")
	_gamePagcor.Status = field.NewInt64(tableName, "status")
	_gamePagcor.TaxRate = field.NewField(tableName, "tax_rate")
	_gamePagcor.CreatedAt = field.NewInt64(tableName, "created_at")
	_gamePagcor.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_gamePagcor.CreatedBy = field.NewString(tableName, "created_by")
	_gamePagcor.UpdatedBy = field.NewString(tableName, "updated_by")

	_gamePagcor.fillFieldMap()

	return _gamePagcor
}

type gamePagcor struct {
	gamePagcorDo

	ALL       field.Asterisk
	ID        field.Int64  // 类型:1-e-game 2-e-bingo 3-sport 4-arcodes
	Name      field.String // 自定类型名称
	Icon      field.String
	Status    field.Int64 // 状态: 1-启用 0-停用
	TaxRate   field.Field // 监管税率
	CreatedAt field.Int64
	UpdatedAt field.Int64
	CreatedBy field.String // 操作人姓名
	UpdatedBy field.String // 最后更新人

	fieldMap map[string]field.Expr
}

func (g gamePagcor) Table(newTableName string) *gamePagcor {
	g.gamePagcorDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g gamePagcor) As(alias string) *gamePagcor {
	g.gamePagcorDo.DO = *(g.gamePagcorDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *gamePagcor) updateTableName(table string) *gamePagcor {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewInt64(table, "id")
	g.Name = field.NewString(table, "name")
	g.Icon = field.NewString(table, "icon")
	g.Status = field.NewInt64(table, "status")
	g.TaxRate = field.NewField(table, "tax_rate")
	g.CreatedAt = field.NewInt64(table, "created_at")
	g.UpdatedAt = field.NewInt64(table, "updated_at")
	g.CreatedBy = field.NewString(table, "created_by")
	g.UpdatedBy = field.NewString(table, "updated_by")

	g.fillFieldMap()

	return g
}

func (g *gamePagcor) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *gamePagcor) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 9)
	g.fieldMap["id"] = g.ID
	g.fieldMap["name"] = g.Name
	g.fieldMap["icon"] = g.Icon
	g.fieldMap["status"] = g.Status
	g.fieldMap["tax_rate"] = g.TaxRate
	g.fieldMap["created_at"] = g.CreatedAt
	g.fieldMap["updated_at"] = g.UpdatedAt
	g.fieldMap["created_by"] = g.CreatedBy
	g.fieldMap["updated_by"] = g.UpdatedBy
}

func (g gamePagcor) clone(db *gorm.DB) gamePagcor {
	g.gamePagcorDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g gamePagcor) replaceDB(db *gorm.DB) gamePagcor {
	g.gamePagcorDo.ReplaceDB(db)
	return g
}

type gamePagcorDo struct{ gen.DO }

type IGamePagcorDo interface {
	gen.SubQuery
	Debug() IGamePagcorDo
	WithContext(ctx context.Context) IGamePagcorDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGamePagcorDo
	WriteDB() IGamePagcorDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGamePagcorDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGamePagcorDo
	Not(conds ...gen.Condition) IGamePagcorDo
	Or(conds ...gen.Condition) IGamePagcorDo
	Select(conds ...field.Expr) IGamePagcorDo
	Where(conds ...gen.Condition) IGamePagcorDo
	Order(conds ...field.Expr) IGamePagcorDo
	Distinct(cols ...field.Expr) IGamePagcorDo
	Omit(cols ...field.Expr) IGamePagcorDo
	Join(table schema.Tabler, on ...field.Expr) IGamePagcorDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGamePagcorDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGamePagcorDo
	Group(cols ...field.Expr) IGamePagcorDo
	Having(conds ...gen.Condition) IGamePagcorDo
	Limit(limit int) IGamePagcorDo
	Offset(offset int) IGamePagcorDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGamePagcorDo
	Unscoped() IGamePagcorDo
	Create(values ...*model.GamePagcor) error
	CreateInBatches(values []*model.GamePagcor, batchSize int) error
	Save(values ...*model.GamePagcor) error
	First() (*model.GamePagcor, error)
	Take() (*model.GamePagcor, error)
	Last() (*model.GamePagcor, error)
	Find() ([]*model.GamePagcor, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GamePagcor, err error)
	FindInBatches(result *[]*model.GamePagcor, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GamePagcor) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGamePagcorDo
	Assign(attrs ...field.AssignExpr) IGamePagcorDo
	Joins(fields ...field.RelationField) IGamePagcorDo
	Preload(fields ...field.RelationField) IGamePagcorDo
	FirstOrInit() (*model.GamePagcor, error)
	FirstOrCreate() (*model.GamePagcor, error)
	FindByPage(offset int, limit int) (result []*model.GamePagcor, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGamePagcorDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g gamePagcorDo) Debug() IGamePagcorDo {
	return g.withDO(g.DO.Debug())
}

func (g gamePagcorDo) WithContext(ctx context.Context) IGamePagcorDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g gamePagcorDo) ReadDB() IGamePagcorDo {
	return g.Clauses(dbresolver.Read)
}

func (g gamePagcorDo) WriteDB() IGamePagcorDo {
	return g.Clauses(dbresolver.Write)
}

func (g gamePagcorDo) Session(config *gorm.Session) IGamePagcorDo {
	return g.withDO(g.DO.Session(config))
}

func (g gamePagcorDo) Clauses(conds ...clause.Expression) IGamePagcorDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g gamePagcorDo) Returning(value interface{}, columns ...string) IGamePagcorDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g gamePagcorDo) Not(conds ...gen.Condition) IGamePagcorDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g gamePagcorDo) Or(conds ...gen.Condition) IGamePagcorDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g gamePagcorDo) Select(conds ...field.Expr) IGamePagcorDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g gamePagcorDo) Where(conds ...gen.Condition) IGamePagcorDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g gamePagcorDo) Order(conds ...field.Expr) IGamePagcorDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g gamePagcorDo) Distinct(cols ...field.Expr) IGamePagcorDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g gamePagcorDo) Omit(cols ...field.Expr) IGamePagcorDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g gamePagcorDo) Join(table schema.Tabler, on ...field.Expr) IGamePagcorDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g gamePagcorDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGamePagcorDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g gamePagcorDo) RightJoin(table schema.Tabler, on ...field.Expr) IGamePagcorDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g gamePagcorDo) Group(cols ...field.Expr) IGamePagcorDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g gamePagcorDo) Having(conds ...gen.Condition) IGamePagcorDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g gamePagcorDo) Limit(limit int) IGamePagcorDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g gamePagcorDo) Offset(offset int) IGamePagcorDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g gamePagcorDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGamePagcorDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g gamePagcorDo) Unscoped() IGamePagcorDo {
	return g.withDO(g.DO.Unscoped())
}

func (g gamePagcorDo) Create(values ...*model.GamePagcor) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g gamePagcorDo) CreateInBatches(values []*model.GamePagcor, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g gamePagcorDo) Save(values ...*model.GamePagcor) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g gamePagcorDo) First() (*model.GamePagcor, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GamePagcor), nil
	}
}

func (g gamePagcorDo) Take() (*model.GamePagcor, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GamePagcor), nil
	}
}

func (g gamePagcorDo) Last() (*model.GamePagcor, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GamePagcor), nil
	}
}

func (g gamePagcorDo) Find() ([]*model.GamePagcor, error) {
	result, err := g.DO.Find()
	return result.([]*model.GamePagcor), err
}

func (g gamePagcorDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GamePagcor, err error) {
	buf := make([]*model.GamePagcor, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g gamePagcorDo) FindInBatches(result *[]*model.GamePagcor, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g gamePagcorDo) Attrs(attrs ...field.AssignExpr) IGamePagcorDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g gamePagcorDo) Assign(attrs ...field.AssignExpr) IGamePagcorDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g gamePagcorDo) Joins(fields ...field.RelationField) IGamePagcorDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g gamePagcorDo) Preload(fields ...field.RelationField) IGamePagcorDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g gamePagcorDo) FirstOrInit() (*model.GamePagcor, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GamePagcor), nil
	}
}

func (g gamePagcorDo) FirstOrCreate() (*model.GamePagcor, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GamePagcor), nil
	}
}

func (g gamePagcorDo) FindByPage(offset int, limit int) (result []*model.GamePagcor, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g gamePagcorDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g gamePagcorDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g gamePagcorDo) Delete(models ...*model.GamePagcor) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *gamePagcorDo) withDO(do gen.Dao) *gamePagcorDo {
	g.DO = *do.(*gen.DO)
	return g
}
