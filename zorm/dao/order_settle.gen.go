// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gitlab.skig.tech/zero-core/common/zorm/model"
)

func newOrderSettle(db *gorm.DB, opts ...gen.DOOption) orderSettle {
	_orderSettle := orderSettle{}

	_orderSettle.orderSettleDo.UseDB(db, opts...)
	_orderSettle.orderSettleDo.UseModel(&model.OrderSettle{})

	tableName := _orderSettle.orderSettleDo.TableName()
	_orderSettle.ALL = field.NewAsterisk(tableName)
	_orderSettle.ID = field.NewInt64(tableName, "id")
	_orderSettle.OperationID = field.NewString(tableName, "operation_id")
	_orderSettle.OrderType = field.NewInt64(tableName, "order_type")
	_orderSettle.ReqJSON = field.NewString(tableName, "req_json")
	_orderSettle.RetryCount = field.NewInt64(tableName, "retry_count")

	_orderSettle.fillFieldMap()

	return _orderSettle
}

type orderSettle struct {
	orderSettleDo

	ALL         field.Asterisk
	ID          field.Int64  // 主键
	OperationID field.String // 交易id
	OrderType   field.Int64  // 注单类型:1-结算,2-重新结算,3-取消结算
	ReqJSON     field.String // 请求注单信息
	RetryCount  field.Int64  // 重试次数

	fieldMap map[string]field.Expr
}

func (o orderSettle) Table(newTableName string) *orderSettle {
	o.orderSettleDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o orderSettle) As(alias string) *orderSettle {
	o.orderSettleDo.DO = *(o.orderSettleDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *orderSettle) updateTableName(table string) *orderSettle {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewInt64(table, "id")
	o.OperationID = field.NewString(table, "operation_id")
	o.OrderType = field.NewInt64(table, "order_type")
	o.ReqJSON = field.NewString(table, "req_json")
	o.RetryCount = field.NewInt64(table, "retry_count")

	o.fillFieldMap()

	return o
}

func (o *orderSettle) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *orderSettle) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 5)
	o.fieldMap["id"] = o.ID
	o.fieldMap["operation_id"] = o.OperationID
	o.fieldMap["order_type"] = o.OrderType
	o.fieldMap["req_json"] = o.ReqJSON
	o.fieldMap["retry_count"] = o.RetryCount
}

func (o orderSettle) clone(db *gorm.DB) orderSettle {
	o.orderSettleDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o orderSettle) replaceDB(db *gorm.DB) orderSettle {
	o.orderSettleDo.ReplaceDB(db)
	return o
}

type orderSettleDo struct{ gen.DO }

type IOrderSettleDo interface {
	gen.SubQuery
	Debug() IOrderSettleDo
	WithContext(ctx context.Context) IOrderSettleDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOrderSettleDo
	WriteDB() IOrderSettleDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOrderSettleDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOrderSettleDo
	Not(conds ...gen.Condition) IOrderSettleDo
	Or(conds ...gen.Condition) IOrderSettleDo
	Select(conds ...field.Expr) IOrderSettleDo
	Where(conds ...gen.Condition) IOrderSettleDo
	Order(conds ...field.Expr) IOrderSettleDo
	Distinct(cols ...field.Expr) IOrderSettleDo
	Omit(cols ...field.Expr) IOrderSettleDo
	Join(table schema.Tabler, on ...field.Expr) IOrderSettleDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOrderSettleDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOrderSettleDo
	Group(cols ...field.Expr) IOrderSettleDo
	Having(conds ...gen.Condition) IOrderSettleDo
	Limit(limit int) IOrderSettleDo
	Offset(offset int) IOrderSettleDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOrderSettleDo
	Unscoped() IOrderSettleDo
	Create(values ...*model.OrderSettle) error
	CreateInBatches(values []*model.OrderSettle, batchSize int) error
	Save(values ...*model.OrderSettle) error
	First() (*model.OrderSettle, error)
	Take() (*model.OrderSettle, error)
	Last() (*model.OrderSettle, error)
	Find() ([]*model.OrderSettle, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OrderSettle, err error)
	FindInBatches(result *[]*model.OrderSettle, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.OrderSettle) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOrderSettleDo
	Assign(attrs ...field.AssignExpr) IOrderSettleDo
	Joins(fields ...field.RelationField) IOrderSettleDo
	Preload(fields ...field.RelationField) IOrderSettleDo
	FirstOrInit() (*model.OrderSettle, error)
	FirstOrCreate() (*model.OrderSettle, error)
	FindByPage(offset int, limit int) (result []*model.OrderSettle, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOrderSettleDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o orderSettleDo) Debug() IOrderSettleDo {
	return o.withDO(o.DO.Debug())
}

func (o orderSettleDo) WithContext(ctx context.Context) IOrderSettleDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o orderSettleDo) ReadDB() IOrderSettleDo {
	return o.Clauses(dbresolver.Read)
}

func (o orderSettleDo) WriteDB() IOrderSettleDo {
	return o.Clauses(dbresolver.Write)
}

func (o orderSettleDo) Session(config *gorm.Session) IOrderSettleDo {
	return o.withDO(o.DO.Session(config))
}

func (o orderSettleDo) Clauses(conds ...clause.Expression) IOrderSettleDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o orderSettleDo) Returning(value interface{}, columns ...string) IOrderSettleDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o orderSettleDo) Not(conds ...gen.Condition) IOrderSettleDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o orderSettleDo) Or(conds ...gen.Condition) IOrderSettleDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o orderSettleDo) Select(conds ...field.Expr) IOrderSettleDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o orderSettleDo) Where(conds ...gen.Condition) IOrderSettleDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o orderSettleDo) Order(conds ...field.Expr) IOrderSettleDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o orderSettleDo) Distinct(cols ...field.Expr) IOrderSettleDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o orderSettleDo) Omit(cols ...field.Expr) IOrderSettleDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o orderSettleDo) Join(table schema.Tabler, on ...field.Expr) IOrderSettleDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o orderSettleDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOrderSettleDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o orderSettleDo) RightJoin(table schema.Tabler, on ...field.Expr) IOrderSettleDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o orderSettleDo) Group(cols ...field.Expr) IOrderSettleDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o orderSettleDo) Having(conds ...gen.Condition) IOrderSettleDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o orderSettleDo) Limit(limit int) IOrderSettleDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o orderSettleDo) Offset(offset int) IOrderSettleDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o orderSettleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOrderSettleDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o orderSettleDo) Unscoped() IOrderSettleDo {
	return o.withDO(o.DO.Unscoped())
}

func (o orderSettleDo) Create(values ...*model.OrderSettle) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o orderSettleDo) CreateInBatches(values []*model.OrderSettle, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o orderSettleDo) Save(values ...*model.OrderSettle) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o orderSettleDo) First() (*model.OrderSettle, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderSettle), nil
	}
}

func (o orderSettleDo) Take() (*model.OrderSettle, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderSettle), nil
	}
}

func (o orderSettleDo) Last() (*model.OrderSettle, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderSettle), nil
	}
}

func (o orderSettleDo) Find() ([]*model.OrderSettle, error) {
	result, err := o.DO.Find()
	return result.([]*model.OrderSettle), err
}

func (o orderSettleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OrderSettle, err error) {
	buf := make([]*model.OrderSettle, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o orderSettleDo) FindInBatches(result *[]*model.OrderSettle, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o orderSettleDo) Attrs(attrs ...field.AssignExpr) IOrderSettleDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o orderSettleDo) Assign(attrs ...field.AssignExpr) IOrderSettleDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o orderSettleDo) Joins(fields ...field.RelationField) IOrderSettleDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o orderSettleDo) Preload(fields ...field.RelationField) IOrderSettleDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o orderSettleDo) FirstOrInit() (*model.OrderSettle, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderSettle), nil
	}
}

func (o orderSettleDo) FirstOrCreate() (*model.OrderSettle, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderSettle), nil
	}
}

func (o orderSettleDo) FindByPage(offset int, limit int) (result []*model.OrderSettle, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o orderSettleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o orderSettleDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o orderSettleDo) Delete(models ...*model.OrderSettle) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *orderSettleDo) withDO(do gen.Dao) *orderSettleDo {
	o.DO = *do.(*gen.DO)
	return o
}
