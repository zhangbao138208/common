// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gitlab.skig.tech/zero-core/common/zorm/model"
)

func newWinNoticeStatus(db *gorm.DB, opts ...gen.DOOption) winNoticeStatus {
	_winNoticeStatus := winNoticeStatus{}

	_winNoticeStatus.winNoticeStatusDo.UseDB(db, opts...)
	_winNoticeStatus.winNoticeStatusDo.UseModel(&model.WinNoticeStatus{})

	tableName := _winNoticeStatus.winNoticeStatusDo.TableName()
	_winNoticeStatus.ALL = field.NewAsterisk(tableName)
	_winNoticeStatus.ID = field.NewInt64(tableName, "id")
	_winNoticeStatus.UID = field.NewInt64(tableName, "uid")
	_winNoticeStatus.NoticeID = field.NewInt64(tableName, "notice_id")
	_winNoticeStatus.IsRead = field.NewInt64(tableName, "is_read")
	_winNoticeStatus.IsDelete = field.NewInt64(tableName, "is_delete")
	_winNoticeStatus.CreateAt = field.NewInt64(tableName, "create_at")
	_winNoticeStatus.UpdateAt = field.NewInt64(tableName, "update_at")
	_winNoticeStatus.Category = field.NewInt64(tableName, "category")

	_winNoticeStatus.fillFieldMap()

	return _winNoticeStatus
}

type winNoticeStatus struct {
	winNoticeStatusDo

	ALL      field.Asterisk
	ID       field.Int64 // ID
	UID      field.Int64 // 用户ID
	NoticeID field.Int64 // 消息ID
	IsRead   field.Int64 // 0-未读1-已读
	IsDelete field.Int64 // 0-未删除1-删除
	CreateAt field.Int64 // 创建时间
	UpdateAt field.Int64 // 创基时间
	Category field.Int64 // 类型:1-系统公告2-站内信 3-系统消息

	fieldMap map[string]field.Expr
}

func (w winNoticeStatus) Table(newTableName string) *winNoticeStatus {
	w.winNoticeStatusDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w winNoticeStatus) As(alias string) *winNoticeStatus {
	w.winNoticeStatusDo.DO = *(w.winNoticeStatusDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *winNoticeStatus) updateTableName(table string) *winNoticeStatus {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt64(table, "id")
	w.UID = field.NewInt64(table, "uid")
	w.NoticeID = field.NewInt64(table, "notice_id")
	w.IsRead = field.NewInt64(table, "is_read")
	w.IsDelete = field.NewInt64(table, "is_delete")
	w.CreateAt = field.NewInt64(table, "create_at")
	w.UpdateAt = field.NewInt64(table, "update_at")
	w.Category = field.NewInt64(table, "category")

	w.fillFieldMap()

	return w
}

func (w *winNoticeStatus) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *winNoticeStatus) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 8)
	w.fieldMap["id"] = w.ID
	w.fieldMap["uid"] = w.UID
	w.fieldMap["notice_id"] = w.NoticeID
	w.fieldMap["is_read"] = w.IsRead
	w.fieldMap["is_delete"] = w.IsDelete
	w.fieldMap["create_at"] = w.CreateAt
	w.fieldMap["update_at"] = w.UpdateAt
	w.fieldMap["category"] = w.Category
}

func (w winNoticeStatus) clone(db *gorm.DB) winNoticeStatus {
	w.winNoticeStatusDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w winNoticeStatus) replaceDB(db *gorm.DB) winNoticeStatus {
	w.winNoticeStatusDo.ReplaceDB(db)
	return w
}

type winNoticeStatusDo struct{ gen.DO }

type IWinNoticeStatusDo interface {
	gen.SubQuery
	Debug() IWinNoticeStatusDo
	WithContext(ctx context.Context) IWinNoticeStatusDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWinNoticeStatusDo
	WriteDB() IWinNoticeStatusDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWinNoticeStatusDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWinNoticeStatusDo
	Not(conds ...gen.Condition) IWinNoticeStatusDo
	Or(conds ...gen.Condition) IWinNoticeStatusDo
	Select(conds ...field.Expr) IWinNoticeStatusDo
	Where(conds ...gen.Condition) IWinNoticeStatusDo
	Order(conds ...field.Expr) IWinNoticeStatusDo
	Distinct(cols ...field.Expr) IWinNoticeStatusDo
	Omit(cols ...field.Expr) IWinNoticeStatusDo
	Join(table schema.Tabler, on ...field.Expr) IWinNoticeStatusDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWinNoticeStatusDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWinNoticeStatusDo
	Group(cols ...field.Expr) IWinNoticeStatusDo
	Having(conds ...gen.Condition) IWinNoticeStatusDo
	Limit(limit int) IWinNoticeStatusDo
	Offset(offset int) IWinNoticeStatusDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWinNoticeStatusDo
	Unscoped() IWinNoticeStatusDo
	Create(values ...*model.WinNoticeStatus) error
	CreateInBatches(values []*model.WinNoticeStatus, batchSize int) error
	Save(values ...*model.WinNoticeStatus) error
	First() (*model.WinNoticeStatus, error)
	Take() (*model.WinNoticeStatus, error)
	Last() (*model.WinNoticeStatus, error)
	Find() ([]*model.WinNoticeStatus, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinNoticeStatus, err error)
	FindInBatches(result *[]*model.WinNoticeStatus, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WinNoticeStatus) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWinNoticeStatusDo
	Assign(attrs ...field.AssignExpr) IWinNoticeStatusDo
	Joins(fields ...field.RelationField) IWinNoticeStatusDo
	Preload(fields ...field.RelationField) IWinNoticeStatusDo
	FirstOrInit() (*model.WinNoticeStatus, error)
	FirstOrCreate() (*model.WinNoticeStatus, error)
	FindByPage(offset int, limit int) (result []*model.WinNoticeStatus, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWinNoticeStatusDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w winNoticeStatusDo) Debug() IWinNoticeStatusDo {
	return w.withDO(w.DO.Debug())
}

func (w winNoticeStatusDo) WithContext(ctx context.Context) IWinNoticeStatusDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w winNoticeStatusDo) ReadDB() IWinNoticeStatusDo {
	return w.Clauses(dbresolver.Read)
}

func (w winNoticeStatusDo) WriteDB() IWinNoticeStatusDo {
	return w.Clauses(dbresolver.Write)
}

func (w winNoticeStatusDo) Session(config *gorm.Session) IWinNoticeStatusDo {
	return w.withDO(w.DO.Session(config))
}

func (w winNoticeStatusDo) Clauses(conds ...clause.Expression) IWinNoticeStatusDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w winNoticeStatusDo) Returning(value interface{}, columns ...string) IWinNoticeStatusDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w winNoticeStatusDo) Not(conds ...gen.Condition) IWinNoticeStatusDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w winNoticeStatusDo) Or(conds ...gen.Condition) IWinNoticeStatusDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w winNoticeStatusDo) Select(conds ...field.Expr) IWinNoticeStatusDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w winNoticeStatusDo) Where(conds ...gen.Condition) IWinNoticeStatusDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w winNoticeStatusDo) Order(conds ...field.Expr) IWinNoticeStatusDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w winNoticeStatusDo) Distinct(cols ...field.Expr) IWinNoticeStatusDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w winNoticeStatusDo) Omit(cols ...field.Expr) IWinNoticeStatusDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w winNoticeStatusDo) Join(table schema.Tabler, on ...field.Expr) IWinNoticeStatusDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w winNoticeStatusDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWinNoticeStatusDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w winNoticeStatusDo) RightJoin(table schema.Tabler, on ...field.Expr) IWinNoticeStatusDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w winNoticeStatusDo) Group(cols ...field.Expr) IWinNoticeStatusDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w winNoticeStatusDo) Having(conds ...gen.Condition) IWinNoticeStatusDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w winNoticeStatusDo) Limit(limit int) IWinNoticeStatusDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w winNoticeStatusDo) Offset(offset int) IWinNoticeStatusDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w winNoticeStatusDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWinNoticeStatusDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w winNoticeStatusDo) Unscoped() IWinNoticeStatusDo {
	return w.withDO(w.DO.Unscoped())
}

func (w winNoticeStatusDo) Create(values ...*model.WinNoticeStatus) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w winNoticeStatusDo) CreateInBatches(values []*model.WinNoticeStatus, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w winNoticeStatusDo) Save(values ...*model.WinNoticeStatus) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w winNoticeStatusDo) First() (*model.WinNoticeStatus, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinNoticeStatus), nil
	}
}

func (w winNoticeStatusDo) Take() (*model.WinNoticeStatus, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinNoticeStatus), nil
	}
}

func (w winNoticeStatusDo) Last() (*model.WinNoticeStatus, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinNoticeStatus), nil
	}
}

func (w winNoticeStatusDo) Find() ([]*model.WinNoticeStatus, error) {
	result, err := w.DO.Find()
	return result.([]*model.WinNoticeStatus), err
}

func (w winNoticeStatusDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinNoticeStatus, err error) {
	buf := make([]*model.WinNoticeStatus, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w winNoticeStatusDo) FindInBatches(result *[]*model.WinNoticeStatus, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w winNoticeStatusDo) Attrs(attrs ...field.AssignExpr) IWinNoticeStatusDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w winNoticeStatusDo) Assign(attrs ...field.AssignExpr) IWinNoticeStatusDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w winNoticeStatusDo) Joins(fields ...field.RelationField) IWinNoticeStatusDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w winNoticeStatusDo) Preload(fields ...field.RelationField) IWinNoticeStatusDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w winNoticeStatusDo) FirstOrInit() (*model.WinNoticeStatus, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinNoticeStatus), nil
	}
}

func (w winNoticeStatusDo) FirstOrCreate() (*model.WinNoticeStatus, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinNoticeStatus), nil
	}
}

func (w winNoticeStatusDo) FindByPage(offset int, limit int) (result []*model.WinNoticeStatus, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w winNoticeStatusDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w winNoticeStatusDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w winNoticeStatusDo) Delete(models ...*model.WinNoticeStatus) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *winNoticeStatusDo) withDO(do gen.Dao) *winNoticeStatusDo {
	w.DO = *do.(*gen.DO)
	return w
}
