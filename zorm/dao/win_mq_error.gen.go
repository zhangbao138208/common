// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gitlab.skig.tech/zero-core/common/zorm/model"
)

func newWinMqError(db *gorm.DB, opts ...gen.DOOption) winMqError {
	_winMqError := winMqError{}

	_winMqError.winMqErrorDo.UseDB(db, opts...)
	_winMqError.winMqErrorDo.UseModel(&model.WinMqError{})

	tableName := _winMqError.winMqErrorDo.TableName()
	_winMqError.ALL = field.NewAsterisk(tableName)
	_winMqError.ID = field.NewInt64(tableName, "id")
	_winMqError.MessageNo = field.NewString(tableName, "message_no")
	_winMqError.MessageType = field.NewString(tableName, "message_type")
	_winMqError.Status = field.NewInt64(tableName, "status")
	_winMqError.Data = field.NewString(tableName, "data")
	_winMqError.CreatedAt = field.NewInt64(tableName, "created_at")
	_winMqError.CreatedUser = field.NewString(tableName, "created_user")
	_winMqError.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_winMqError.UpdateUser = field.NewString(tableName, "update_user")
	_winMqError.ExceptionInfo = field.NewString(tableName, "exception_info")

	_winMqError.fillFieldMap()

	return _winMqError
}

type winMqError struct {
	winMqErrorDo

	ALL           field.Asterisk
	ID            field.Int64  // ID主键
	MessageNo     field.String // 消息ID
	MessageType   field.String // 消息类型
	Status        field.Int64  // 0-未处理,1-已处理,2-忽略
	Data          field.String // 完整消息体
	CreatedAt     field.Int64  // 创建时间戳
	CreatedUser   field.String // 创建人
	UpdatedAt     field.Int64  // 修改时间戳
	UpdateUser    field.String // 最后修改人
	ExceptionInfo field.String // 异常信息

	fieldMap map[string]field.Expr
}

func (w winMqError) Table(newTableName string) *winMqError {
	w.winMqErrorDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w winMqError) As(alias string) *winMqError {
	w.winMqErrorDo.DO = *(w.winMqErrorDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *winMqError) updateTableName(table string) *winMqError {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt64(table, "id")
	w.MessageNo = field.NewString(table, "message_no")
	w.MessageType = field.NewString(table, "message_type")
	w.Status = field.NewInt64(table, "status")
	w.Data = field.NewString(table, "data")
	w.CreatedAt = field.NewInt64(table, "created_at")
	w.CreatedUser = field.NewString(table, "created_user")
	w.UpdatedAt = field.NewInt64(table, "updated_at")
	w.UpdateUser = field.NewString(table, "update_user")
	w.ExceptionInfo = field.NewString(table, "exception_info")

	w.fillFieldMap()

	return w
}

func (w *winMqError) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *winMqError) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 10)
	w.fieldMap["id"] = w.ID
	w.fieldMap["message_no"] = w.MessageNo
	w.fieldMap["message_type"] = w.MessageType
	w.fieldMap["status"] = w.Status
	w.fieldMap["data"] = w.Data
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["created_user"] = w.CreatedUser
	w.fieldMap["updated_at"] = w.UpdatedAt
	w.fieldMap["update_user"] = w.UpdateUser
	w.fieldMap["exception_info"] = w.ExceptionInfo
}

func (w winMqError) clone(db *gorm.DB) winMqError {
	w.winMqErrorDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w winMqError) replaceDB(db *gorm.DB) winMqError {
	w.winMqErrorDo.ReplaceDB(db)
	return w
}

type winMqErrorDo struct{ gen.DO }

type IWinMqErrorDo interface {
	gen.SubQuery
	Debug() IWinMqErrorDo
	WithContext(ctx context.Context) IWinMqErrorDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWinMqErrorDo
	WriteDB() IWinMqErrorDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWinMqErrorDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWinMqErrorDo
	Not(conds ...gen.Condition) IWinMqErrorDo
	Or(conds ...gen.Condition) IWinMqErrorDo
	Select(conds ...field.Expr) IWinMqErrorDo
	Where(conds ...gen.Condition) IWinMqErrorDo
	Order(conds ...field.Expr) IWinMqErrorDo
	Distinct(cols ...field.Expr) IWinMqErrorDo
	Omit(cols ...field.Expr) IWinMqErrorDo
	Join(table schema.Tabler, on ...field.Expr) IWinMqErrorDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWinMqErrorDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWinMqErrorDo
	Group(cols ...field.Expr) IWinMqErrorDo
	Having(conds ...gen.Condition) IWinMqErrorDo
	Limit(limit int) IWinMqErrorDo
	Offset(offset int) IWinMqErrorDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWinMqErrorDo
	Unscoped() IWinMqErrorDo
	Create(values ...*model.WinMqError) error
	CreateInBatches(values []*model.WinMqError, batchSize int) error
	Save(values ...*model.WinMqError) error
	First() (*model.WinMqError, error)
	Take() (*model.WinMqError, error)
	Last() (*model.WinMqError, error)
	Find() ([]*model.WinMqError, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinMqError, err error)
	FindInBatches(result *[]*model.WinMqError, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WinMqError) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWinMqErrorDo
	Assign(attrs ...field.AssignExpr) IWinMqErrorDo
	Joins(fields ...field.RelationField) IWinMqErrorDo
	Preload(fields ...field.RelationField) IWinMqErrorDo
	FirstOrInit() (*model.WinMqError, error)
	FirstOrCreate() (*model.WinMqError, error)
	FindByPage(offset int, limit int) (result []*model.WinMqError, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWinMqErrorDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w winMqErrorDo) Debug() IWinMqErrorDo {
	return w.withDO(w.DO.Debug())
}

func (w winMqErrorDo) WithContext(ctx context.Context) IWinMqErrorDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w winMqErrorDo) ReadDB() IWinMqErrorDo {
	return w.Clauses(dbresolver.Read)
}

func (w winMqErrorDo) WriteDB() IWinMqErrorDo {
	return w.Clauses(dbresolver.Write)
}

func (w winMqErrorDo) Session(config *gorm.Session) IWinMqErrorDo {
	return w.withDO(w.DO.Session(config))
}

func (w winMqErrorDo) Clauses(conds ...clause.Expression) IWinMqErrorDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w winMqErrorDo) Returning(value interface{}, columns ...string) IWinMqErrorDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w winMqErrorDo) Not(conds ...gen.Condition) IWinMqErrorDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w winMqErrorDo) Or(conds ...gen.Condition) IWinMqErrorDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w winMqErrorDo) Select(conds ...field.Expr) IWinMqErrorDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w winMqErrorDo) Where(conds ...gen.Condition) IWinMqErrorDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w winMqErrorDo) Order(conds ...field.Expr) IWinMqErrorDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w winMqErrorDo) Distinct(cols ...field.Expr) IWinMqErrorDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w winMqErrorDo) Omit(cols ...field.Expr) IWinMqErrorDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w winMqErrorDo) Join(table schema.Tabler, on ...field.Expr) IWinMqErrorDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w winMqErrorDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWinMqErrorDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w winMqErrorDo) RightJoin(table schema.Tabler, on ...field.Expr) IWinMqErrorDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w winMqErrorDo) Group(cols ...field.Expr) IWinMqErrorDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w winMqErrorDo) Having(conds ...gen.Condition) IWinMqErrorDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w winMqErrorDo) Limit(limit int) IWinMqErrorDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w winMqErrorDo) Offset(offset int) IWinMqErrorDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w winMqErrorDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWinMqErrorDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w winMqErrorDo) Unscoped() IWinMqErrorDo {
	return w.withDO(w.DO.Unscoped())
}

func (w winMqErrorDo) Create(values ...*model.WinMqError) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w winMqErrorDo) CreateInBatches(values []*model.WinMqError, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w winMqErrorDo) Save(values ...*model.WinMqError) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w winMqErrorDo) First() (*model.WinMqError, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinMqError), nil
	}
}

func (w winMqErrorDo) Take() (*model.WinMqError, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinMqError), nil
	}
}

func (w winMqErrorDo) Last() (*model.WinMqError, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinMqError), nil
	}
}

func (w winMqErrorDo) Find() ([]*model.WinMqError, error) {
	result, err := w.DO.Find()
	return result.([]*model.WinMqError), err
}

func (w winMqErrorDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinMqError, err error) {
	buf := make([]*model.WinMqError, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w winMqErrorDo) FindInBatches(result *[]*model.WinMqError, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w winMqErrorDo) Attrs(attrs ...field.AssignExpr) IWinMqErrorDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w winMqErrorDo) Assign(attrs ...field.AssignExpr) IWinMqErrorDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w winMqErrorDo) Joins(fields ...field.RelationField) IWinMqErrorDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w winMqErrorDo) Preload(fields ...field.RelationField) IWinMqErrorDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w winMqErrorDo) FirstOrInit() (*model.WinMqError, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinMqError), nil
	}
}

func (w winMqErrorDo) FirstOrCreate() (*model.WinMqError, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinMqError), nil
	}
}

func (w winMqErrorDo) FindByPage(offset int, limit int) (result []*model.WinMqError, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w winMqErrorDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w winMqErrorDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w winMqErrorDo) Delete(models ...*model.WinMqError) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *winMqErrorDo) withDO(do gen.Dao) *winMqErrorDo {
	w.DO = *do.(*gen.DO)
	return w
}
