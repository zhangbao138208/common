// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gitlab.skig.tech/zero-core/common/zorm/model"
)

func newWinPayChannel(db *gorm.DB, opts ...gen.DOOption) winPayChannel {
	_winPayChannel := winPayChannel{}

	_winPayChannel.winPayChannelDo.UseDB(db, opts...)
	_winPayChannel.winPayChannelDo.UseModel(&model.WinPayChannel{})

	tableName := _winPayChannel.winPayChannelDo.TableName()
	_winPayChannel.ALL = field.NewAsterisk(tableName)
	_winPayChannel.ID = field.NewInt64(tableName, "id")
	_winPayChannel.Code = field.NewString(tableName, "code")
	_winPayChannel.Name = field.NewString(tableName, "name")
	_winPayChannel.PlatID = field.NewInt64(tableName, "plat_id")
	_winPayChannel.PlatName = field.NewString(tableName, "plat_name")
	_winPayChannel.PlatNickName = field.NewString(tableName, "plat_nick_name")
	_winPayChannel.Category = field.NewInt64(tableName, "category")
	_winPayChannel.CategoryTransfer = field.NewInt64(tableName, "category_transfer")
	_winPayChannel.CategoryCurrency = field.NewInt64(tableName, "category_currency")
	_winPayChannel.MinCoin = field.NewInt64(tableName, "min_coin")
	_winPayChannel.MaxCoin = field.NewInt64(tableName, "max_coin")
	_winPayChannel.Status = field.NewInt64(tableName, "status")
	_winPayChannel.RequestURL = field.NewString(tableName, "request_url")
	_winPayChannel.NotifyURL = field.NewString(tableName, "notify_url")
	_winPayChannel.Currency = field.NewString(tableName, "currency")
	_winPayChannel.ChannelConfig = field.NewString(tableName, "channel_config")
	_winPayChannel.Sort = field.NewInt64(tableName, "sort")
	_winPayChannel.LogoURL = field.NewString(tableName, "logo_url")
	_winPayChannel.ChannelAppShowName = field.NewString(tableName, "channel_app_show_name")
	_winPayChannel.Remark = field.NewString(tableName, "remark")
	_winPayChannel.CreatedAt = field.NewInt64(tableName, "created_at")
	_winPayChannel.Operator = field.NewString(tableName, "operator")
	_winPayChannel.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_winPayChannel.OperatorName = field.NewString(tableName, "operator_name")

	_winPayChannel.fillFieldMap()

	return _winPayChannel
}

type winPayChannel struct {
	winPayChannelDo

	ALL                field.Asterisk
	ID                 field.Int64  // ID
	Code               field.String // 通道编码
	Name               field.String // 通道名称
	PlatID             field.Int64  // 平台ID
	PlatName           field.String // 平台名称
	PlatNickName       field.String // 平台自定义名称
	Category           field.Int64  // 支付类型；1:代收 2:代付
	CategoryTransfer   field.Int64  // 转账类型：1-TRC,2-ERC,3-BANK,4-PIX,5-GCASH,6-Maya,7-BPIA
	CategoryCurrency   field.Int64  // 提款货币类型:0-数字货币 1-法币方式;1:USDT 2:Bank Card
	MinCoin            field.Int64  // 最小金额
	MaxCoin            field.Int64  // 最大金额
	Status             field.Int64  // 状态;0:关闭 1:开启
	RequestURL         field.String // 请求三方支付地址
	NotifyURL          field.String // 回调地址
	Currency           field.String // 币种
	ChannelConfig      field.String // 通道配置参数
	Sort               field.Int64  // 排序
	LogoURL            field.String // LOGO地址
	ChannelAppShowName field.String // 通道网站名称
	Remark             field.String // 备注
	CreatedAt          field.Int64  // 创建时间
	Operator           field.String // 操作人
	UpdatedAt          field.Int64  // 修改时间
	OperatorName       field.String // 操作人姓名

	fieldMap map[string]field.Expr
}

func (w winPayChannel) Table(newTableName string) *winPayChannel {
	w.winPayChannelDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w winPayChannel) As(alias string) *winPayChannel {
	w.winPayChannelDo.DO = *(w.winPayChannelDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *winPayChannel) updateTableName(table string) *winPayChannel {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt64(table, "id")
	w.Code = field.NewString(table, "code")
	w.Name = field.NewString(table, "name")
	w.PlatID = field.NewInt64(table, "plat_id")
	w.PlatName = field.NewString(table, "plat_name")
	w.PlatNickName = field.NewString(table, "plat_nick_name")
	w.Category = field.NewInt64(table, "category")
	w.CategoryTransfer = field.NewInt64(table, "category_transfer")
	w.CategoryCurrency = field.NewInt64(table, "category_currency")
	w.MinCoin = field.NewInt64(table, "min_coin")
	w.MaxCoin = field.NewInt64(table, "max_coin")
	w.Status = field.NewInt64(table, "status")
	w.RequestURL = field.NewString(table, "request_url")
	w.NotifyURL = field.NewString(table, "notify_url")
	w.Currency = field.NewString(table, "currency")
	w.ChannelConfig = field.NewString(table, "channel_config")
	w.Sort = field.NewInt64(table, "sort")
	w.LogoURL = field.NewString(table, "logo_url")
	w.ChannelAppShowName = field.NewString(table, "channel_app_show_name")
	w.Remark = field.NewString(table, "remark")
	w.CreatedAt = field.NewInt64(table, "created_at")
	w.Operator = field.NewString(table, "operator")
	w.UpdatedAt = field.NewInt64(table, "updated_at")
	w.OperatorName = field.NewString(table, "operator_name")

	w.fillFieldMap()

	return w
}

func (w *winPayChannel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *winPayChannel) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 24)
	w.fieldMap["id"] = w.ID
	w.fieldMap["code"] = w.Code
	w.fieldMap["name"] = w.Name
	w.fieldMap["plat_id"] = w.PlatID
	w.fieldMap["plat_name"] = w.PlatName
	w.fieldMap["plat_nick_name"] = w.PlatNickName
	w.fieldMap["category"] = w.Category
	w.fieldMap["category_transfer"] = w.CategoryTransfer
	w.fieldMap["category_currency"] = w.CategoryCurrency
	w.fieldMap["min_coin"] = w.MinCoin
	w.fieldMap["max_coin"] = w.MaxCoin
	w.fieldMap["status"] = w.Status
	w.fieldMap["request_url"] = w.RequestURL
	w.fieldMap["notify_url"] = w.NotifyURL
	w.fieldMap["currency"] = w.Currency
	w.fieldMap["channel_config"] = w.ChannelConfig
	w.fieldMap["sort"] = w.Sort
	w.fieldMap["logo_url"] = w.LogoURL
	w.fieldMap["channel_app_show_name"] = w.ChannelAppShowName
	w.fieldMap["remark"] = w.Remark
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["operator"] = w.Operator
	w.fieldMap["updated_at"] = w.UpdatedAt
	w.fieldMap["operator_name"] = w.OperatorName
}

func (w winPayChannel) clone(db *gorm.DB) winPayChannel {
	w.winPayChannelDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w winPayChannel) replaceDB(db *gorm.DB) winPayChannel {
	w.winPayChannelDo.ReplaceDB(db)
	return w
}

type winPayChannelDo struct{ gen.DO }

type IWinPayChannelDo interface {
	gen.SubQuery
	Debug() IWinPayChannelDo
	WithContext(ctx context.Context) IWinPayChannelDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWinPayChannelDo
	WriteDB() IWinPayChannelDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWinPayChannelDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWinPayChannelDo
	Not(conds ...gen.Condition) IWinPayChannelDo
	Or(conds ...gen.Condition) IWinPayChannelDo
	Select(conds ...field.Expr) IWinPayChannelDo
	Where(conds ...gen.Condition) IWinPayChannelDo
	Order(conds ...field.Expr) IWinPayChannelDo
	Distinct(cols ...field.Expr) IWinPayChannelDo
	Omit(cols ...field.Expr) IWinPayChannelDo
	Join(table schema.Tabler, on ...field.Expr) IWinPayChannelDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWinPayChannelDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWinPayChannelDo
	Group(cols ...field.Expr) IWinPayChannelDo
	Having(conds ...gen.Condition) IWinPayChannelDo
	Limit(limit int) IWinPayChannelDo
	Offset(offset int) IWinPayChannelDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWinPayChannelDo
	Unscoped() IWinPayChannelDo
	Create(values ...*model.WinPayChannel) error
	CreateInBatches(values []*model.WinPayChannel, batchSize int) error
	Save(values ...*model.WinPayChannel) error
	First() (*model.WinPayChannel, error)
	Take() (*model.WinPayChannel, error)
	Last() (*model.WinPayChannel, error)
	Find() ([]*model.WinPayChannel, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinPayChannel, err error)
	FindInBatches(result *[]*model.WinPayChannel, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WinPayChannel) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWinPayChannelDo
	Assign(attrs ...field.AssignExpr) IWinPayChannelDo
	Joins(fields ...field.RelationField) IWinPayChannelDo
	Preload(fields ...field.RelationField) IWinPayChannelDo
	FirstOrInit() (*model.WinPayChannel, error)
	FirstOrCreate() (*model.WinPayChannel, error)
	FindByPage(offset int, limit int) (result []*model.WinPayChannel, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWinPayChannelDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w winPayChannelDo) Debug() IWinPayChannelDo {
	return w.withDO(w.DO.Debug())
}

func (w winPayChannelDo) WithContext(ctx context.Context) IWinPayChannelDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w winPayChannelDo) ReadDB() IWinPayChannelDo {
	return w.Clauses(dbresolver.Read)
}

func (w winPayChannelDo) WriteDB() IWinPayChannelDo {
	return w.Clauses(dbresolver.Write)
}

func (w winPayChannelDo) Session(config *gorm.Session) IWinPayChannelDo {
	return w.withDO(w.DO.Session(config))
}

func (w winPayChannelDo) Clauses(conds ...clause.Expression) IWinPayChannelDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w winPayChannelDo) Returning(value interface{}, columns ...string) IWinPayChannelDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w winPayChannelDo) Not(conds ...gen.Condition) IWinPayChannelDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w winPayChannelDo) Or(conds ...gen.Condition) IWinPayChannelDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w winPayChannelDo) Select(conds ...field.Expr) IWinPayChannelDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w winPayChannelDo) Where(conds ...gen.Condition) IWinPayChannelDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w winPayChannelDo) Order(conds ...field.Expr) IWinPayChannelDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w winPayChannelDo) Distinct(cols ...field.Expr) IWinPayChannelDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w winPayChannelDo) Omit(cols ...field.Expr) IWinPayChannelDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w winPayChannelDo) Join(table schema.Tabler, on ...field.Expr) IWinPayChannelDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w winPayChannelDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWinPayChannelDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w winPayChannelDo) RightJoin(table schema.Tabler, on ...field.Expr) IWinPayChannelDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w winPayChannelDo) Group(cols ...field.Expr) IWinPayChannelDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w winPayChannelDo) Having(conds ...gen.Condition) IWinPayChannelDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w winPayChannelDo) Limit(limit int) IWinPayChannelDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w winPayChannelDo) Offset(offset int) IWinPayChannelDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w winPayChannelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWinPayChannelDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w winPayChannelDo) Unscoped() IWinPayChannelDo {
	return w.withDO(w.DO.Unscoped())
}

func (w winPayChannelDo) Create(values ...*model.WinPayChannel) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w winPayChannelDo) CreateInBatches(values []*model.WinPayChannel, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w winPayChannelDo) Save(values ...*model.WinPayChannel) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w winPayChannelDo) First() (*model.WinPayChannel, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinPayChannel), nil
	}
}

func (w winPayChannelDo) Take() (*model.WinPayChannel, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinPayChannel), nil
	}
}

func (w winPayChannelDo) Last() (*model.WinPayChannel, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinPayChannel), nil
	}
}

func (w winPayChannelDo) Find() ([]*model.WinPayChannel, error) {
	result, err := w.DO.Find()
	return result.([]*model.WinPayChannel), err
}

func (w winPayChannelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinPayChannel, err error) {
	buf := make([]*model.WinPayChannel, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w winPayChannelDo) FindInBatches(result *[]*model.WinPayChannel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w winPayChannelDo) Attrs(attrs ...field.AssignExpr) IWinPayChannelDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w winPayChannelDo) Assign(attrs ...field.AssignExpr) IWinPayChannelDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w winPayChannelDo) Joins(fields ...field.RelationField) IWinPayChannelDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w winPayChannelDo) Preload(fields ...field.RelationField) IWinPayChannelDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w winPayChannelDo) FirstOrInit() (*model.WinPayChannel, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinPayChannel), nil
	}
}

func (w winPayChannelDo) FirstOrCreate() (*model.WinPayChannel, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinPayChannel), nil
	}
}

func (w winPayChannelDo) FindByPage(offset int, limit int) (result []*model.WinPayChannel, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w winPayChannelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w winPayChannelDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w winPayChannelDo) Delete(models ...*model.WinPayChannel) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *winPayChannelDo) withDO(do gen.Dao) *winPayChannelDo {
	w.DO = *do.(*gen.DO)
	return w
}
