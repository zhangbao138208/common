// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gitlab.skig.tech/zero-core/common/zorm/model"
)

func newWinBetslipsExt(db *gorm.DB, opts ...gen.DOOption) winBetslipsExt {
	_winBetslipsExt := winBetslipsExt{}

	_winBetslipsExt.winBetslipsExtDo.UseDB(db, opts...)
	_winBetslipsExt.winBetslipsExtDo.UseModel(&model.WinBetslipsExt{})

	tableName := _winBetslipsExt.winBetslipsExtDo.TableName()
	_winBetslipsExt.ALL = field.NewAsterisk(tableName)
	_winBetslipsExt.ID = field.NewInt64(tableName, "id")
	_winBetslipsExt.BetslipsID = field.NewInt64(tableName, "betslips_id")
	_winBetslipsExt.ThirdCode = field.NewString(tableName, "third_code")
	_winBetslipsExt.CreatedAt = field.NewInt64(tableName, "created_at")
	_winBetslipsExt.GameListID = field.NewInt64(tableName, "game_list_id")
	_winBetslipsExt.Roundid = field.NewString(tableName, "roundid")
	_winBetslipsExt.UID = field.NewInt64(tableName, "uid")
	_winBetslipsExt.GameCode = field.NewString(tableName, "game_code")

	_winBetslipsExt.fillFieldMap()

	return _winBetslipsExt
}

type winBetslipsExt struct {
	winBetslipsExtDo

	ALL        field.Asterisk
	ID         field.Int64
	BetslipsID field.Int64  // 注单id
	ThirdCode  field.String // 三方请求code
	CreatedAt  field.Int64  // 创建时间戳
	GameListID field.Int64  // 游戏类型编号101
	Roundid    field.String // 游戏局编号
	UID        field.Int64  // uid
	GameCode   field.String // 游戏编号

	fieldMap map[string]field.Expr
}

func (w winBetslipsExt) Table(newTableName string) *winBetslipsExt {
	w.winBetslipsExtDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w winBetslipsExt) As(alias string) *winBetslipsExt {
	w.winBetslipsExtDo.DO = *(w.winBetslipsExtDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *winBetslipsExt) updateTableName(table string) *winBetslipsExt {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt64(table, "id")
	w.BetslipsID = field.NewInt64(table, "betslips_id")
	w.ThirdCode = field.NewString(table, "third_code")
	w.CreatedAt = field.NewInt64(table, "created_at")
	w.GameListID = field.NewInt64(table, "game_list_id")
	w.Roundid = field.NewString(table, "roundid")
	w.UID = field.NewInt64(table, "uid")
	w.GameCode = field.NewString(table, "game_code")

	w.fillFieldMap()

	return w
}

func (w *winBetslipsExt) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *winBetslipsExt) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 8)
	w.fieldMap["id"] = w.ID
	w.fieldMap["betslips_id"] = w.BetslipsID
	w.fieldMap["third_code"] = w.ThirdCode
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["game_list_id"] = w.GameListID
	w.fieldMap["roundid"] = w.Roundid
	w.fieldMap["uid"] = w.UID
	w.fieldMap["game_code"] = w.GameCode
}

func (w winBetslipsExt) clone(db *gorm.DB) winBetslipsExt {
	w.winBetslipsExtDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w winBetslipsExt) replaceDB(db *gorm.DB) winBetslipsExt {
	w.winBetslipsExtDo.ReplaceDB(db)
	return w
}

type winBetslipsExtDo struct{ gen.DO }

type IWinBetslipsExtDo interface {
	gen.SubQuery
	Debug() IWinBetslipsExtDo
	WithContext(ctx context.Context) IWinBetslipsExtDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWinBetslipsExtDo
	WriteDB() IWinBetslipsExtDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWinBetslipsExtDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWinBetslipsExtDo
	Not(conds ...gen.Condition) IWinBetslipsExtDo
	Or(conds ...gen.Condition) IWinBetslipsExtDo
	Select(conds ...field.Expr) IWinBetslipsExtDo
	Where(conds ...gen.Condition) IWinBetslipsExtDo
	Order(conds ...field.Expr) IWinBetslipsExtDo
	Distinct(cols ...field.Expr) IWinBetslipsExtDo
	Omit(cols ...field.Expr) IWinBetslipsExtDo
	Join(table schema.Tabler, on ...field.Expr) IWinBetslipsExtDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWinBetslipsExtDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWinBetslipsExtDo
	Group(cols ...field.Expr) IWinBetslipsExtDo
	Having(conds ...gen.Condition) IWinBetslipsExtDo
	Limit(limit int) IWinBetslipsExtDo
	Offset(offset int) IWinBetslipsExtDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWinBetslipsExtDo
	Unscoped() IWinBetslipsExtDo
	Create(values ...*model.WinBetslipsExt) error
	CreateInBatches(values []*model.WinBetslipsExt, batchSize int) error
	Save(values ...*model.WinBetslipsExt) error
	First() (*model.WinBetslipsExt, error)
	Take() (*model.WinBetslipsExt, error)
	Last() (*model.WinBetslipsExt, error)
	Find() ([]*model.WinBetslipsExt, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinBetslipsExt, err error)
	FindInBatches(result *[]*model.WinBetslipsExt, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WinBetslipsExt) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWinBetslipsExtDo
	Assign(attrs ...field.AssignExpr) IWinBetslipsExtDo
	Joins(fields ...field.RelationField) IWinBetslipsExtDo
	Preload(fields ...field.RelationField) IWinBetslipsExtDo
	FirstOrInit() (*model.WinBetslipsExt, error)
	FirstOrCreate() (*model.WinBetslipsExt, error)
	FindByPage(offset int, limit int) (result []*model.WinBetslipsExt, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWinBetslipsExtDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w winBetslipsExtDo) Debug() IWinBetslipsExtDo {
	return w.withDO(w.DO.Debug())
}

func (w winBetslipsExtDo) WithContext(ctx context.Context) IWinBetslipsExtDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w winBetslipsExtDo) ReadDB() IWinBetslipsExtDo {
	return w.Clauses(dbresolver.Read)
}

func (w winBetslipsExtDo) WriteDB() IWinBetslipsExtDo {
	return w.Clauses(dbresolver.Write)
}

func (w winBetslipsExtDo) Session(config *gorm.Session) IWinBetslipsExtDo {
	return w.withDO(w.DO.Session(config))
}

func (w winBetslipsExtDo) Clauses(conds ...clause.Expression) IWinBetslipsExtDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w winBetslipsExtDo) Returning(value interface{}, columns ...string) IWinBetslipsExtDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w winBetslipsExtDo) Not(conds ...gen.Condition) IWinBetslipsExtDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w winBetslipsExtDo) Or(conds ...gen.Condition) IWinBetslipsExtDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w winBetslipsExtDo) Select(conds ...field.Expr) IWinBetslipsExtDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w winBetslipsExtDo) Where(conds ...gen.Condition) IWinBetslipsExtDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w winBetslipsExtDo) Order(conds ...field.Expr) IWinBetslipsExtDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w winBetslipsExtDo) Distinct(cols ...field.Expr) IWinBetslipsExtDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w winBetslipsExtDo) Omit(cols ...field.Expr) IWinBetslipsExtDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w winBetslipsExtDo) Join(table schema.Tabler, on ...field.Expr) IWinBetslipsExtDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w winBetslipsExtDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWinBetslipsExtDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w winBetslipsExtDo) RightJoin(table schema.Tabler, on ...field.Expr) IWinBetslipsExtDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w winBetslipsExtDo) Group(cols ...field.Expr) IWinBetslipsExtDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w winBetslipsExtDo) Having(conds ...gen.Condition) IWinBetslipsExtDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w winBetslipsExtDo) Limit(limit int) IWinBetslipsExtDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w winBetslipsExtDo) Offset(offset int) IWinBetslipsExtDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w winBetslipsExtDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWinBetslipsExtDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w winBetslipsExtDo) Unscoped() IWinBetslipsExtDo {
	return w.withDO(w.DO.Unscoped())
}

func (w winBetslipsExtDo) Create(values ...*model.WinBetslipsExt) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w winBetslipsExtDo) CreateInBatches(values []*model.WinBetslipsExt, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w winBetslipsExtDo) Save(values ...*model.WinBetslipsExt) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w winBetslipsExtDo) First() (*model.WinBetslipsExt, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinBetslipsExt), nil
	}
}

func (w winBetslipsExtDo) Take() (*model.WinBetslipsExt, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinBetslipsExt), nil
	}
}

func (w winBetslipsExtDo) Last() (*model.WinBetslipsExt, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinBetslipsExt), nil
	}
}

func (w winBetslipsExtDo) Find() ([]*model.WinBetslipsExt, error) {
	result, err := w.DO.Find()
	return result.([]*model.WinBetslipsExt), err
}

func (w winBetslipsExtDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinBetslipsExt, err error) {
	buf := make([]*model.WinBetslipsExt, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w winBetslipsExtDo) FindInBatches(result *[]*model.WinBetslipsExt, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w winBetslipsExtDo) Attrs(attrs ...field.AssignExpr) IWinBetslipsExtDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w winBetslipsExtDo) Assign(attrs ...field.AssignExpr) IWinBetslipsExtDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w winBetslipsExtDo) Joins(fields ...field.RelationField) IWinBetslipsExtDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w winBetslipsExtDo) Preload(fields ...field.RelationField) IWinBetslipsExtDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w winBetslipsExtDo) FirstOrInit() (*model.WinBetslipsExt, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinBetslipsExt), nil
	}
}

func (w winBetslipsExtDo) FirstOrCreate() (*model.WinBetslipsExt, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinBetslipsExt), nil
	}
}

func (w winBetslipsExtDo) FindByPage(offset int, limit int) (result []*model.WinBetslipsExt, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w winBetslipsExtDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w winBetslipsExtDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w winBetslipsExtDo) Delete(models ...*model.WinBetslipsExt) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *winBetslipsExtDo) withDO(do gen.Dao) *winBetslipsExtDo {
	w.DO = *do.(*gen.DO)
	return w
}
