// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gitlab.skig.tech/zero-core/common/zorm/model"
)

func newAgentConfig(db *gorm.DB, opts ...gen.DOOption) agentConfig {
	_agentConfig := agentConfig{}

	_agentConfig.agentConfigDo.UseDB(db, opts...)
	_agentConfig.agentConfigDo.UseModel(&model.AgentConfig{})

	tableName := _agentConfig.agentConfigDo.TableName()
	_agentConfig.ALL = field.NewAsterisk(tableName)
	_agentConfig.ID = field.NewInt64(tableName, "id")
	_agentConfig.AgentID = field.NewInt64(tableName, "agent_id")
	_agentConfig.Agentname = field.NewString(tableName, "agentname")
	_agentConfig.AgentLevel = field.NewInt64(tableName, "agent_level")
	_agentConfig.CommissionRate = field.NewField(tableName, "commission_rate")
	_agentConfig.ExpiredAt = field.NewInt64(tableName, "expired_at")

	_agentConfig.fillFieldMap()

	return _agentConfig
}

type agentConfig struct {
	agentConfigDo

	ALL            field.Asterisk
	ID             field.Int64
	AgentID        field.Int64  // 代理ID
	Agentname      field.String // 代理名称
	AgentLevel     field.Int64  // 代理层级
	CommissionRate field.Field  // 佣金比例
	ExpiredAt      field.Int64  // 会员代理关系过期天数

	fieldMap map[string]field.Expr
}

func (a agentConfig) Table(newTableName string) *agentConfig {
	a.agentConfigDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a agentConfig) As(alias string) *agentConfig {
	a.agentConfigDo.DO = *(a.agentConfigDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *agentConfig) updateTableName(table string) *agentConfig {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.AgentID = field.NewInt64(table, "agent_id")
	a.Agentname = field.NewString(table, "agentname")
	a.AgentLevel = field.NewInt64(table, "agent_level")
	a.CommissionRate = field.NewField(table, "commission_rate")
	a.ExpiredAt = field.NewInt64(table, "expired_at")

	a.fillFieldMap()

	return a
}

func (a *agentConfig) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *agentConfig) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 6)
	a.fieldMap["id"] = a.ID
	a.fieldMap["agent_id"] = a.AgentID
	a.fieldMap["agentname"] = a.Agentname
	a.fieldMap["agent_level"] = a.AgentLevel
	a.fieldMap["commission_rate"] = a.CommissionRate
	a.fieldMap["expired_at"] = a.ExpiredAt
}

func (a agentConfig) clone(db *gorm.DB) agentConfig {
	a.agentConfigDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a agentConfig) replaceDB(db *gorm.DB) agentConfig {
	a.agentConfigDo.ReplaceDB(db)
	return a
}

type agentConfigDo struct{ gen.DO }

type IAgentConfigDo interface {
	gen.SubQuery
	Debug() IAgentConfigDo
	WithContext(ctx context.Context) IAgentConfigDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAgentConfigDo
	WriteDB() IAgentConfigDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAgentConfigDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAgentConfigDo
	Not(conds ...gen.Condition) IAgentConfigDo
	Or(conds ...gen.Condition) IAgentConfigDo
	Select(conds ...field.Expr) IAgentConfigDo
	Where(conds ...gen.Condition) IAgentConfigDo
	Order(conds ...field.Expr) IAgentConfigDo
	Distinct(cols ...field.Expr) IAgentConfigDo
	Omit(cols ...field.Expr) IAgentConfigDo
	Join(table schema.Tabler, on ...field.Expr) IAgentConfigDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAgentConfigDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAgentConfigDo
	Group(cols ...field.Expr) IAgentConfigDo
	Having(conds ...gen.Condition) IAgentConfigDo
	Limit(limit int) IAgentConfigDo
	Offset(offset int) IAgentConfigDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAgentConfigDo
	Unscoped() IAgentConfigDo
	Create(values ...*model.AgentConfig) error
	CreateInBatches(values []*model.AgentConfig, batchSize int) error
	Save(values ...*model.AgentConfig) error
	First() (*model.AgentConfig, error)
	Take() (*model.AgentConfig, error)
	Last() (*model.AgentConfig, error)
	Find() ([]*model.AgentConfig, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AgentConfig, err error)
	FindInBatches(result *[]*model.AgentConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AgentConfig) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAgentConfigDo
	Assign(attrs ...field.AssignExpr) IAgentConfigDo
	Joins(fields ...field.RelationField) IAgentConfigDo
	Preload(fields ...field.RelationField) IAgentConfigDo
	FirstOrInit() (*model.AgentConfig, error)
	FirstOrCreate() (*model.AgentConfig, error)
	FindByPage(offset int, limit int) (result []*model.AgentConfig, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAgentConfigDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a agentConfigDo) Debug() IAgentConfigDo {
	return a.withDO(a.DO.Debug())
}

func (a agentConfigDo) WithContext(ctx context.Context) IAgentConfigDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a agentConfigDo) ReadDB() IAgentConfigDo {
	return a.Clauses(dbresolver.Read)
}

func (a agentConfigDo) WriteDB() IAgentConfigDo {
	return a.Clauses(dbresolver.Write)
}

func (a agentConfigDo) Session(config *gorm.Session) IAgentConfigDo {
	return a.withDO(a.DO.Session(config))
}

func (a agentConfigDo) Clauses(conds ...clause.Expression) IAgentConfigDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a agentConfigDo) Returning(value interface{}, columns ...string) IAgentConfigDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a agentConfigDo) Not(conds ...gen.Condition) IAgentConfigDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a agentConfigDo) Or(conds ...gen.Condition) IAgentConfigDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a agentConfigDo) Select(conds ...field.Expr) IAgentConfigDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a agentConfigDo) Where(conds ...gen.Condition) IAgentConfigDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a agentConfigDo) Order(conds ...field.Expr) IAgentConfigDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a agentConfigDo) Distinct(cols ...field.Expr) IAgentConfigDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a agentConfigDo) Omit(cols ...field.Expr) IAgentConfigDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a agentConfigDo) Join(table schema.Tabler, on ...field.Expr) IAgentConfigDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a agentConfigDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAgentConfigDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a agentConfigDo) RightJoin(table schema.Tabler, on ...field.Expr) IAgentConfigDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a agentConfigDo) Group(cols ...field.Expr) IAgentConfigDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a agentConfigDo) Having(conds ...gen.Condition) IAgentConfigDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a agentConfigDo) Limit(limit int) IAgentConfigDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a agentConfigDo) Offset(offset int) IAgentConfigDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a agentConfigDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAgentConfigDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a agentConfigDo) Unscoped() IAgentConfigDo {
	return a.withDO(a.DO.Unscoped())
}

func (a agentConfigDo) Create(values ...*model.AgentConfig) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a agentConfigDo) CreateInBatches(values []*model.AgentConfig, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a agentConfigDo) Save(values ...*model.AgentConfig) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a agentConfigDo) First() (*model.AgentConfig, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentConfig), nil
	}
}

func (a agentConfigDo) Take() (*model.AgentConfig, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentConfig), nil
	}
}

func (a agentConfigDo) Last() (*model.AgentConfig, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentConfig), nil
	}
}

func (a agentConfigDo) Find() ([]*model.AgentConfig, error) {
	result, err := a.DO.Find()
	return result.([]*model.AgentConfig), err
}

func (a agentConfigDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AgentConfig, err error) {
	buf := make([]*model.AgentConfig, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a agentConfigDo) FindInBatches(result *[]*model.AgentConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a agentConfigDo) Attrs(attrs ...field.AssignExpr) IAgentConfigDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a agentConfigDo) Assign(attrs ...field.AssignExpr) IAgentConfigDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a agentConfigDo) Joins(fields ...field.RelationField) IAgentConfigDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a agentConfigDo) Preload(fields ...field.RelationField) IAgentConfigDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a agentConfigDo) FirstOrInit() (*model.AgentConfig, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentConfig), nil
	}
}

func (a agentConfigDo) FirstOrCreate() (*model.AgentConfig, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AgentConfig), nil
	}
}

func (a agentConfigDo) FindByPage(offset int, limit int) (result []*model.AgentConfig, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a agentConfigDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a agentConfigDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a agentConfigDo) Delete(models ...*model.AgentConfig) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *agentConfigDo) withDO(do gen.Dao) *agentConfigDo {
	a.DO = *do.(*gen.DO)
	return a
}
