// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gitlab.skig.tech/zero-core/common/zorm/model"
)

func newWinCheckInRecord(db *gorm.DB, opts ...gen.DOOption) winCheckInRecord {
	_winCheckInRecord := winCheckInRecord{}

	_winCheckInRecord.winCheckInRecordDo.UseDB(db, opts...)
	_winCheckInRecord.winCheckInRecordDo.UseModel(&model.WinCheckInRecord{})

	tableName := _winCheckInRecord.winCheckInRecordDo.TableName()
	_winCheckInRecord.ALL = field.NewAsterisk(tableName)
	_winCheckInRecord.ID = field.NewInt64(tableName, "id")
	_winCheckInRecord.PromotionID = field.NewInt64(tableName, "promotion_id")
	_winCheckInRecord.UserID = field.NewInt64(tableName, "user_id")
	_winCheckInRecord.Username = field.NewString(tableName, "username")
	_winCheckInRecord.SupUID = field.NewInt64(tableName, "sup_uid")
	_winCheckInRecord.SupUsername = field.NewString(tableName, "sup_username")
	_winCheckInRecord.Days = field.NewInt64(tableName, "days")
	_winCheckInRecord.AwardAmount = field.NewField(tableName, "award_amount")
	_winCheckInRecord.AuditTimes = field.NewInt64(tableName, "audit_times")
	_winCheckInRecord.Status = field.NewInt64(tableName, "status")
	_winCheckInRecord.CheckInAt = field.NewInt64(tableName, "check_in_at")

	_winCheckInRecord.fillFieldMap()

	return _winCheckInRecord
}

type winCheckInRecord struct {
	winCheckInRecordDo

	ALL         field.Asterisk
	ID          field.Int64  // 主键
	PromotionID field.Int64  // 签到活动ID
	UserID      field.Int64  // 客户表ID
	Username    field.String // 用户名
	SupUID      field.Int64  // 上级代理ID
	SupUsername field.String // 上级代理名
	Days        field.Int64  // 连续签到天数
	AwardAmount field.Field  // 签到奖励
	AuditTimes  field.Int64  // 稽核倍数
	Status      field.Int64  // 状态：1有效0无效
	CheckInAt   field.Int64  // 领取时间

	fieldMap map[string]field.Expr
}

func (w winCheckInRecord) Table(newTableName string) *winCheckInRecord {
	w.winCheckInRecordDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w winCheckInRecord) As(alias string) *winCheckInRecord {
	w.winCheckInRecordDo.DO = *(w.winCheckInRecordDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *winCheckInRecord) updateTableName(table string) *winCheckInRecord {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt64(table, "id")
	w.PromotionID = field.NewInt64(table, "promotion_id")
	w.UserID = field.NewInt64(table, "user_id")
	w.Username = field.NewString(table, "username")
	w.SupUID = field.NewInt64(table, "sup_uid")
	w.SupUsername = field.NewString(table, "sup_username")
	w.Days = field.NewInt64(table, "days")
	w.AwardAmount = field.NewField(table, "award_amount")
	w.AuditTimes = field.NewInt64(table, "audit_times")
	w.Status = field.NewInt64(table, "status")
	w.CheckInAt = field.NewInt64(table, "check_in_at")

	w.fillFieldMap()

	return w
}

func (w *winCheckInRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *winCheckInRecord) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 11)
	w.fieldMap["id"] = w.ID
	w.fieldMap["promotion_id"] = w.PromotionID
	w.fieldMap["user_id"] = w.UserID
	w.fieldMap["username"] = w.Username
	w.fieldMap["sup_uid"] = w.SupUID
	w.fieldMap["sup_username"] = w.SupUsername
	w.fieldMap["days"] = w.Days
	w.fieldMap["award_amount"] = w.AwardAmount
	w.fieldMap["audit_times"] = w.AuditTimes
	w.fieldMap["status"] = w.Status
	w.fieldMap["check_in_at"] = w.CheckInAt
}

func (w winCheckInRecord) clone(db *gorm.DB) winCheckInRecord {
	w.winCheckInRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w winCheckInRecord) replaceDB(db *gorm.DB) winCheckInRecord {
	w.winCheckInRecordDo.ReplaceDB(db)
	return w
}

type winCheckInRecordDo struct{ gen.DO }

type IWinCheckInRecordDo interface {
	gen.SubQuery
	Debug() IWinCheckInRecordDo
	WithContext(ctx context.Context) IWinCheckInRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWinCheckInRecordDo
	WriteDB() IWinCheckInRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWinCheckInRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWinCheckInRecordDo
	Not(conds ...gen.Condition) IWinCheckInRecordDo
	Or(conds ...gen.Condition) IWinCheckInRecordDo
	Select(conds ...field.Expr) IWinCheckInRecordDo
	Where(conds ...gen.Condition) IWinCheckInRecordDo
	Order(conds ...field.Expr) IWinCheckInRecordDo
	Distinct(cols ...field.Expr) IWinCheckInRecordDo
	Omit(cols ...field.Expr) IWinCheckInRecordDo
	Join(table schema.Tabler, on ...field.Expr) IWinCheckInRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWinCheckInRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWinCheckInRecordDo
	Group(cols ...field.Expr) IWinCheckInRecordDo
	Having(conds ...gen.Condition) IWinCheckInRecordDo
	Limit(limit int) IWinCheckInRecordDo
	Offset(offset int) IWinCheckInRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWinCheckInRecordDo
	Unscoped() IWinCheckInRecordDo
	Create(values ...*model.WinCheckInRecord) error
	CreateInBatches(values []*model.WinCheckInRecord, batchSize int) error
	Save(values ...*model.WinCheckInRecord) error
	First() (*model.WinCheckInRecord, error)
	Take() (*model.WinCheckInRecord, error)
	Last() (*model.WinCheckInRecord, error)
	Find() ([]*model.WinCheckInRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinCheckInRecord, err error)
	FindInBatches(result *[]*model.WinCheckInRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WinCheckInRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWinCheckInRecordDo
	Assign(attrs ...field.AssignExpr) IWinCheckInRecordDo
	Joins(fields ...field.RelationField) IWinCheckInRecordDo
	Preload(fields ...field.RelationField) IWinCheckInRecordDo
	FirstOrInit() (*model.WinCheckInRecord, error)
	FirstOrCreate() (*model.WinCheckInRecord, error)
	FindByPage(offset int, limit int) (result []*model.WinCheckInRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWinCheckInRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w winCheckInRecordDo) Debug() IWinCheckInRecordDo {
	return w.withDO(w.DO.Debug())
}

func (w winCheckInRecordDo) WithContext(ctx context.Context) IWinCheckInRecordDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w winCheckInRecordDo) ReadDB() IWinCheckInRecordDo {
	return w.Clauses(dbresolver.Read)
}

func (w winCheckInRecordDo) WriteDB() IWinCheckInRecordDo {
	return w.Clauses(dbresolver.Write)
}

func (w winCheckInRecordDo) Session(config *gorm.Session) IWinCheckInRecordDo {
	return w.withDO(w.DO.Session(config))
}

func (w winCheckInRecordDo) Clauses(conds ...clause.Expression) IWinCheckInRecordDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w winCheckInRecordDo) Returning(value interface{}, columns ...string) IWinCheckInRecordDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w winCheckInRecordDo) Not(conds ...gen.Condition) IWinCheckInRecordDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w winCheckInRecordDo) Or(conds ...gen.Condition) IWinCheckInRecordDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w winCheckInRecordDo) Select(conds ...field.Expr) IWinCheckInRecordDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w winCheckInRecordDo) Where(conds ...gen.Condition) IWinCheckInRecordDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w winCheckInRecordDo) Order(conds ...field.Expr) IWinCheckInRecordDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w winCheckInRecordDo) Distinct(cols ...field.Expr) IWinCheckInRecordDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w winCheckInRecordDo) Omit(cols ...field.Expr) IWinCheckInRecordDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w winCheckInRecordDo) Join(table schema.Tabler, on ...field.Expr) IWinCheckInRecordDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w winCheckInRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWinCheckInRecordDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w winCheckInRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) IWinCheckInRecordDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w winCheckInRecordDo) Group(cols ...field.Expr) IWinCheckInRecordDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w winCheckInRecordDo) Having(conds ...gen.Condition) IWinCheckInRecordDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w winCheckInRecordDo) Limit(limit int) IWinCheckInRecordDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w winCheckInRecordDo) Offset(offset int) IWinCheckInRecordDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w winCheckInRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWinCheckInRecordDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w winCheckInRecordDo) Unscoped() IWinCheckInRecordDo {
	return w.withDO(w.DO.Unscoped())
}

func (w winCheckInRecordDo) Create(values ...*model.WinCheckInRecord) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w winCheckInRecordDo) CreateInBatches(values []*model.WinCheckInRecord, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w winCheckInRecordDo) Save(values ...*model.WinCheckInRecord) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w winCheckInRecordDo) First() (*model.WinCheckInRecord, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinCheckInRecord), nil
	}
}

func (w winCheckInRecordDo) Take() (*model.WinCheckInRecord, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinCheckInRecord), nil
	}
}

func (w winCheckInRecordDo) Last() (*model.WinCheckInRecord, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinCheckInRecord), nil
	}
}

func (w winCheckInRecordDo) Find() ([]*model.WinCheckInRecord, error) {
	result, err := w.DO.Find()
	return result.([]*model.WinCheckInRecord), err
}

func (w winCheckInRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinCheckInRecord, err error) {
	buf := make([]*model.WinCheckInRecord, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w winCheckInRecordDo) FindInBatches(result *[]*model.WinCheckInRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w winCheckInRecordDo) Attrs(attrs ...field.AssignExpr) IWinCheckInRecordDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w winCheckInRecordDo) Assign(attrs ...field.AssignExpr) IWinCheckInRecordDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w winCheckInRecordDo) Joins(fields ...field.RelationField) IWinCheckInRecordDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w winCheckInRecordDo) Preload(fields ...field.RelationField) IWinCheckInRecordDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w winCheckInRecordDo) FirstOrInit() (*model.WinCheckInRecord, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinCheckInRecord), nil
	}
}

func (w winCheckInRecordDo) FirstOrCreate() (*model.WinCheckInRecord, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinCheckInRecord), nil
	}
}

func (w winCheckInRecordDo) FindByPage(offset int, limit int) (result []*model.WinCheckInRecord, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w winCheckInRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w winCheckInRecordDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w winCheckInRecordDo) Delete(models ...*model.WinCheckInRecord) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *winCheckInRecordDo) withDO(do gen.Dao) *winCheckInRecordDo {
	w.DO = *do.(*gen.DO)
	return w
}
