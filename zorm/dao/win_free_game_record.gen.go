// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gitlab.skig.tech/zero-core/common/zorm/model"
)

func newWinFreeGameRecord(db *gorm.DB, opts ...gen.DOOption) winFreeGameRecord {
	_winFreeGameRecord := winFreeGameRecord{}

	_winFreeGameRecord.winFreeGameRecordDo.UseDB(db, opts...)
	_winFreeGameRecord.winFreeGameRecordDo.UseModel(&model.WinFreeGameRecord{})

	tableName := _winFreeGameRecord.winFreeGameRecordDo.TableName()
	_winFreeGameRecord.ALL = field.NewAsterisk(tableName)
	_winFreeGameRecord.ID = field.NewInt64(tableName, "id")
	_winFreeGameRecord.Username = field.NewString(tableName, "username")
	_winFreeGameRecord.BonusID = field.NewString(tableName, "bonus_id")
	_winFreeGameRecord.VipLevel = field.NewInt64(tableName, "vip_level")
	_winFreeGameRecord.Provider = field.NewString(tableName, "provider")
	_winFreeGameRecord.GameName = field.NewString(tableName, "game_name")
	_winFreeGameRecord.SpinNum = field.NewInt64(tableName, "spin_num")
	_winFreeGameRecord.CreatedAt = field.NewInt64(tableName, "created_at")
	_winFreeGameRecord.FinishedAt = field.NewInt64(tableName, "finished_at")
	_winFreeGameRecord.SpinType = field.NewInt64(tableName, "spin_type")
	_winFreeGameRecord.SpinAmount = field.NewInt64(tableName, "spin_amount")

	_winFreeGameRecord.fillFieldMap()

	return _winFreeGameRecord
}

type winFreeGameRecord struct {
	winFreeGameRecordDo

	ALL        field.Asterisk
	ID         field.Int64
	Username   field.String
	BonusID    field.String // ,
	VipLevel   field.Int64  // vip
	Provider   field.String
	GameName   field.String
	SpinNum    field.Int64
	CreatedAt  field.Int64
	FinishedAt field.Int64
	SpinType   field.Int64 //  0VIP 1
	SpinAmount field.Int64

	fieldMap map[string]field.Expr
}

func (w winFreeGameRecord) Table(newTableName string) *winFreeGameRecord {
	w.winFreeGameRecordDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w winFreeGameRecord) As(alias string) *winFreeGameRecord {
	w.winFreeGameRecordDo.DO = *(w.winFreeGameRecordDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *winFreeGameRecord) updateTableName(table string) *winFreeGameRecord {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt64(table, "id")
	w.Username = field.NewString(table, "username")
	w.BonusID = field.NewString(table, "bonus_id")
	w.VipLevel = field.NewInt64(table, "vip_level")
	w.Provider = field.NewString(table, "provider")
	w.GameName = field.NewString(table, "game_name")
	w.SpinNum = field.NewInt64(table, "spin_num")
	w.CreatedAt = field.NewInt64(table, "created_at")
	w.FinishedAt = field.NewInt64(table, "finished_at")
	w.SpinType = field.NewInt64(table, "spin_type")
	w.SpinAmount = field.NewInt64(table, "spin_amount")

	w.fillFieldMap()

	return w
}

func (w *winFreeGameRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *winFreeGameRecord) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 11)
	w.fieldMap["id"] = w.ID
	w.fieldMap["username"] = w.Username
	w.fieldMap["bonus_id"] = w.BonusID
	w.fieldMap["vip_level"] = w.VipLevel
	w.fieldMap["provider"] = w.Provider
	w.fieldMap["game_name"] = w.GameName
	w.fieldMap["spin_num"] = w.SpinNum
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["finished_at"] = w.FinishedAt
	w.fieldMap["spin_type"] = w.SpinType
	w.fieldMap["spin_amount"] = w.SpinAmount
}

func (w winFreeGameRecord) clone(db *gorm.DB) winFreeGameRecord {
	w.winFreeGameRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w winFreeGameRecord) replaceDB(db *gorm.DB) winFreeGameRecord {
	w.winFreeGameRecordDo.ReplaceDB(db)
	return w
}

type winFreeGameRecordDo struct{ gen.DO }

type IWinFreeGameRecordDo interface {
	gen.SubQuery
	Debug() IWinFreeGameRecordDo
	WithContext(ctx context.Context) IWinFreeGameRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWinFreeGameRecordDo
	WriteDB() IWinFreeGameRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWinFreeGameRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWinFreeGameRecordDo
	Not(conds ...gen.Condition) IWinFreeGameRecordDo
	Or(conds ...gen.Condition) IWinFreeGameRecordDo
	Select(conds ...field.Expr) IWinFreeGameRecordDo
	Where(conds ...gen.Condition) IWinFreeGameRecordDo
	Order(conds ...field.Expr) IWinFreeGameRecordDo
	Distinct(cols ...field.Expr) IWinFreeGameRecordDo
	Omit(cols ...field.Expr) IWinFreeGameRecordDo
	Join(table schema.Tabler, on ...field.Expr) IWinFreeGameRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWinFreeGameRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWinFreeGameRecordDo
	Group(cols ...field.Expr) IWinFreeGameRecordDo
	Having(conds ...gen.Condition) IWinFreeGameRecordDo
	Limit(limit int) IWinFreeGameRecordDo
	Offset(offset int) IWinFreeGameRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWinFreeGameRecordDo
	Unscoped() IWinFreeGameRecordDo
	Create(values ...*model.WinFreeGameRecord) error
	CreateInBatches(values []*model.WinFreeGameRecord, batchSize int) error
	Save(values ...*model.WinFreeGameRecord) error
	First() (*model.WinFreeGameRecord, error)
	Take() (*model.WinFreeGameRecord, error)
	Last() (*model.WinFreeGameRecord, error)
	Find() ([]*model.WinFreeGameRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinFreeGameRecord, err error)
	FindInBatches(result *[]*model.WinFreeGameRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WinFreeGameRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWinFreeGameRecordDo
	Assign(attrs ...field.AssignExpr) IWinFreeGameRecordDo
	Joins(fields ...field.RelationField) IWinFreeGameRecordDo
	Preload(fields ...field.RelationField) IWinFreeGameRecordDo
	FirstOrInit() (*model.WinFreeGameRecord, error)
	FirstOrCreate() (*model.WinFreeGameRecord, error)
	FindByPage(offset int, limit int) (result []*model.WinFreeGameRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWinFreeGameRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w winFreeGameRecordDo) Debug() IWinFreeGameRecordDo {
	return w.withDO(w.DO.Debug())
}

func (w winFreeGameRecordDo) WithContext(ctx context.Context) IWinFreeGameRecordDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w winFreeGameRecordDo) ReadDB() IWinFreeGameRecordDo {
	return w.Clauses(dbresolver.Read)
}

func (w winFreeGameRecordDo) WriteDB() IWinFreeGameRecordDo {
	return w.Clauses(dbresolver.Write)
}

func (w winFreeGameRecordDo) Session(config *gorm.Session) IWinFreeGameRecordDo {
	return w.withDO(w.DO.Session(config))
}

func (w winFreeGameRecordDo) Clauses(conds ...clause.Expression) IWinFreeGameRecordDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w winFreeGameRecordDo) Returning(value interface{}, columns ...string) IWinFreeGameRecordDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w winFreeGameRecordDo) Not(conds ...gen.Condition) IWinFreeGameRecordDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w winFreeGameRecordDo) Or(conds ...gen.Condition) IWinFreeGameRecordDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w winFreeGameRecordDo) Select(conds ...field.Expr) IWinFreeGameRecordDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w winFreeGameRecordDo) Where(conds ...gen.Condition) IWinFreeGameRecordDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w winFreeGameRecordDo) Order(conds ...field.Expr) IWinFreeGameRecordDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w winFreeGameRecordDo) Distinct(cols ...field.Expr) IWinFreeGameRecordDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w winFreeGameRecordDo) Omit(cols ...field.Expr) IWinFreeGameRecordDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w winFreeGameRecordDo) Join(table schema.Tabler, on ...field.Expr) IWinFreeGameRecordDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w winFreeGameRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWinFreeGameRecordDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w winFreeGameRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) IWinFreeGameRecordDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w winFreeGameRecordDo) Group(cols ...field.Expr) IWinFreeGameRecordDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w winFreeGameRecordDo) Having(conds ...gen.Condition) IWinFreeGameRecordDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w winFreeGameRecordDo) Limit(limit int) IWinFreeGameRecordDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w winFreeGameRecordDo) Offset(offset int) IWinFreeGameRecordDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w winFreeGameRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWinFreeGameRecordDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w winFreeGameRecordDo) Unscoped() IWinFreeGameRecordDo {
	return w.withDO(w.DO.Unscoped())
}

func (w winFreeGameRecordDo) Create(values ...*model.WinFreeGameRecord) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w winFreeGameRecordDo) CreateInBatches(values []*model.WinFreeGameRecord, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w winFreeGameRecordDo) Save(values ...*model.WinFreeGameRecord) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w winFreeGameRecordDo) First() (*model.WinFreeGameRecord, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinFreeGameRecord), nil
	}
}

func (w winFreeGameRecordDo) Take() (*model.WinFreeGameRecord, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinFreeGameRecord), nil
	}
}

func (w winFreeGameRecordDo) Last() (*model.WinFreeGameRecord, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinFreeGameRecord), nil
	}
}

func (w winFreeGameRecordDo) Find() ([]*model.WinFreeGameRecord, error) {
	result, err := w.DO.Find()
	return result.([]*model.WinFreeGameRecord), err
}

func (w winFreeGameRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinFreeGameRecord, err error) {
	buf := make([]*model.WinFreeGameRecord, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w winFreeGameRecordDo) FindInBatches(result *[]*model.WinFreeGameRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w winFreeGameRecordDo) Attrs(attrs ...field.AssignExpr) IWinFreeGameRecordDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w winFreeGameRecordDo) Assign(attrs ...field.AssignExpr) IWinFreeGameRecordDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w winFreeGameRecordDo) Joins(fields ...field.RelationField) IWinFreeGameRecordDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w winFreeGameRecordDo) Preload(fields ...field.RelationField) IWinFreeGameRecordDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w winFreeGameRecordDo) FirstOrInit() (*model.WinFreeGameRecord, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinFreeGameRecord), nil
	}
}

func (w winFreeGameRecordDo) FirstOrCreate() (*model.WinFreeGameRecord, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinFreeGameRecord), nil
	}
}

func (w winFreeGameRecordDo) FindByPage(offset int, limit int) (result []*model.WinFreeGameRecord, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w winFreeGameRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w winFreeGameRecordDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w winFreeGameRecordDo) Delete(models ...*model.WinFreeGameRecord) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *winFreeGameRecordDo) withDO(do gen.Dao) *winFreeGameRecordDo {
	w.DO = *do.(*gen.DO)
	return w
}