// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gitlab.skig.tech/zero-core/common/zorm/model"
)

func newWinBanner230629(db *gorm.DB, opts ...gen.DOOption) winBanner230629 {
	_winBanner230629 := winBanner230629{}

	_winBanner230629.winBanner230629Do.UseDB(db, opts...)
	_winBanner230629.winBanner230629Do.UseModel(&model.WinBanner230629{})

	tableName := _winBanner230629.winBanner230629Do.TableName()
	_winBanner230629.ALL = field.NewAsterisk(tableName)
	_winBanner230629.ID = field.NewInt64(tableName, "id")
	_winBanner230629.Type = field.NewInt64(tableName, "type")
	_winBanner230629.Img = field.NewString(tableName, "img")
	_winBanner230629.Href = field.NewString(tableName, "href")
	_winBanner230629.Sort = field.NewInt64(tableName, "sort")
	_winBanner230629.Status = field.NewInt64(tableName, "status")
	_winBanner230629.Device = field.NewString(tableName, "device")
	_winBanner230629.Language = field.NewString(tableName, "language")
	_winBanner230629.JumpType = field.NewInt64(tableName, "jump_type")
	_winBanner230629.SlotID = field.NewString(tableName, "slot_id")
	_winBanner230629.GameID = field.NewInt64(tableName, "game_id")
	_winBanner230629.GameGroupID = field.NewInt64(tableName, "game_group_id")
	_winBanner230629.PlatID = field.NewInt64(tableName, "plat_id")
	_winBanner230629.CreatedAt = field.NewInt64(tableName, "created_at")
	_winBanner230629.CreatedBy = field.NewString(tableName, "created_by")
	_winBanner230629.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_winBanner230629.UpdatedBy = field.NewString(tableName, "updated_by")
	_winBanner230629.OperatorName = field.NewString(tableName, "operator_name")

	_winBanner230629.fillFieldMap()

	return _winBanner230629
}

type winBanner230629 struct {
	winBanner230629Do

	ALL          field.Asterisk
	ID           field.Int64
	Type         field.Int64  // 类型：1首页Banner，2登录/注册Banner
	Img          field.String // 图片地址
	Href         field.String // 跳转地址
	Sort         field.Int64  // 排序(从高到低)
	Status       field.Int64  // 状态:1-启用 0-停用
	Device       field.String // 设备:m-手机 d-电脑 ANDROID-安卓 IOS-苹果
	Language     field.String // 语言
	JumpType     field.Int64  // 跳转类型：1跳转链接 2跳转游戏
	SlotID       field.String // slotId
	GameID       field.Int64  // 游戏ID(关联game_list)
	GameGroupID  field.Int64  // 游戏大类类型
	PlatID       field.Int64  // 游戏平台id
	CreatedAt    field.Int64
	CreatedBy    field.String // 创建者
	UpdatedAt    field.Int64
	UpdatedBy    field.String // 更新人
	OperatorName field.String // 操作人姓名

	fieldMap map[string]field.Expr
}

func (w winBanner230629) Table(newTableName string) *winBanner230629 {
	w.winBanner230629Do.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w winBanner230629) As(alias string) *winBanner230629 {
	w.winBanner230629Do.DO = *(w.winBanner230629Do.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *winBanner230629) updateTableName(table string) *winBanner230629 {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt64(table, "id")
	w.Type = field.NewInt64(table, "type")
	w.Img = field.NewString(table, "img")
	w.Href = field.NewString(table, "href")
	w.Sort = field.NewInt64(table, "sort")
	w.Status = field.NewInt64(table, "status")
	w.Device = field.NewString(table, "device")
	w.Language = field.NewString(table, "language")
	w.JumpType = field.NewInt64(table, "jump_type")
	w.SlotID = field.NewString(table, "slot_id")
	w.GameID = field.NewInt64(table, "game_id")
	w.GameGroupID = field.NewInt64(table, "game_group_id")
	w.PlatID = field.NewInt64(table, "plat_id")
	w.CreatedAt = field.NewInt64(table, "created_at")
	w.CreatedBy = field.NewString(table, "created_by")
	w.UpdatedAt = field.NewInt64(table, "updated_at")
	w.UpdatedBy = field.NewString(table, "updated_by")
	w.OperatorName = field.NewString(table, "operator_name")

	w.fillFieldMap()

	return w
}

func (w *winBanner230629) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *winBanner230629) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 18)
	w.fieldMap["id"] = w.ID
	w.fieldMap["type"] = w.Type
	w.fieldMap["img"] = w.Img
	w.fieldMap["href"] = w.Href
	w.fieldMap["sort"] = w.Sort
	w.fieldMap["status"] = w.Status
	w.fieldMap["device"] = w.Device
	w.fieldMap["language"] = w.Language
	w.fieldMap["jump_type"] = w.JumpType
	w.fieldMap["slot_id"] = w.SlotID
	w.fieldMap["game_id"] = w.GameID
	w.fieldMap["game_group_id"] = w.GameGroupID
	w.fieldMap["plat_id"] = w.PlatID
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["created_by"] = w.CreatedBy
	w.fieldMap["updated_at"] = w.UpdatedAt
	w.fieldMap["updated_by"] = w.UpdatedBy
	w.fieldMap["operator_name"] = w.OperatorName
}

func (w winBanner230629) clone(db *gorm.DB) winBanner230629 {
	w.winBanner230629Do.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w winBanner230629) replaceDB(db *gorm.DB) winBanner230629 {
	w.winBanner230629Do.ReplaceDB(db)
	return w
}

type winBanner230629Do struct{ gen.DO }

type IWinBanner230629Do interface {
	gen.SubQuery
	Debug() IWinBanner230629Do
	WithContext(ctx context.Context) IWinBanner230629Do
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWinBanner230629Do
	WriteDB() IWinBanner230629Do
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWinBanner230629Do
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWinBanner230629Do
	Not(conds ...gen.Condition) IWinBanner230629Do
	Or(conds ...gen.Condition) IWinBanner230629Do
	Select(conds ...field.Expr) IWinBanner230629Do
	Where(conds ...gen.Condition) IWinBanner230629Do
	Order(conds ...field.Expr) IWinBanner230629Do
	Distinct(cols ...field.Expr) IWinBanner230629Do
	Omit(cols ...field.Expr) IWinBanner230629Do
	Join(table schema.Tabler, on ...field.Expr) IWinBanner230629Do
	LeftJoin(table schema.Tabler, on ...field.Expr) IWinBanner230629Do
	RightJoin(table schema.Tabler, on ...field.Expr) IWinBanner230629Do
	Group(cols ...field.Expr) IWinBanner230629Do
	Having(conds ...gen.Condition) IWinBanner230629Do
	Limit(limit int) IWinBanner230629Do
	Offset(offset int) IWinBanner230629Do
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWinBanner230629Do
	Unscoped() IWinBanner230629Do
	Create(values ...*model.WinBanner230629) error
	CreateInBatches(values []*model.WinBanner230629, batchSize int) error
	Save(values ...*model.WinBanner230629) error
	First() (*model.WinBanner230629, error)
	Take() (*model.WinBanner230629, error)
	Last() (*model.WinBanner230629, error)
	Find() ([]*model.WinBanner230629, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinBanner230629, err error)
	FindInBatches(result *[]*model.WinBanner230629, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WinBanner230629) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWinBanner230629Do
	Assign(attrs ...field.AssignExpr) IWinBanner230629Do
	Joins(fields ...field.RelationField) IWinBanner230629Do
	Preload(fields ...field.RelationField) IWinBanner230629Do
	FirstOrInit() (*model.WinBanner230629, error)
	FirstOrCreate() (*model.WinBanner230629, error)
	FindByPage(offset int, limit int) (result []*model.WinBanner230629, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWinBanner230629Do
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w winBanner230629Do) Debug() IWinBanner230629Do {
	return w.withDO(w.DO.Debug())
}

func (w winBanner230629Do) WithContext(ctx context.Context) IWinBanner230629Do {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w winBanner230629Do) ReadDB() IWinBanner230629Do {
	return w.Clauses(dbresolver.Read)
}

func (w winBanner230629Do) WriteDB() IWinBanner230629Do {
	return w.Clauses(dbresolver.Write)
}

func (w winBanner230629Do) Session(config *gorm.Session) IWinBanner230629Do {
	return w.withDO(w.DO.Session(config))
}

func (w winBanner230629Do) Clauses(conds ...clause.Expression) IWinBanner230629Do {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w winBanner230629Do) Returning(value interface{}, columns ...string) IWinBanner230629Do {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w winBanner230629Do) Not(conds ...gen.Condition) IWinBanner230629Do {
	return w.withDO(w.DO.Not(conds...))
}

func (w winBanner230629Do) Or(conds ...gen.Condition) IWinBanner230629Do {
	return w.withDO(w.DO.Or(conds...))
}

func (w winBanner230629Do) Select(conds ...field.Expr) IWinBanner230629Do {
	return w.withDO(w.DO.Select(conds...))
}

func (w winBanner230629Do) Where(conds ...gen.Condition) IWinBanner230629Do {
	return w.withDO(w.DO.Where(conds...))
}

func (w winBanner230629Do) Order(conds ...field.Expr) IWinBanner230629Do {
	return w.withDO(w.DO.Order(conds...))
}

func (w winBanner230629Do) Distinct(cols ...field.Expr) IWinBanner230629Do {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w winBanner230629Do) Omit(cols ...field.Expr) IWinBanner230629Do {
	return w.withDO(w.DO.Omit(cols...))
}

func (w winBanner230629Do) Join(table schema.Tabler, on ...field.Expr) IWinBanner230629Do {
	return w.withDO(w.DO.Join(table, on...))
}

func (w winBanner230629Do) LeftJoin(table schema.Tabler, on ...field.Expr) IWinBanner230629Do {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w winBanner230629Do) RightJoin(table schema.Tabler, on ...field.Expr) IWinBanner230629Do {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w winBanner230629Do) Group(cols ...field.Expr) IWinBanner230629Do {
	return w.withDO(w.DO.Group(cols...))
}

func (w winBanner230629Do) Having(conds ...gen.Condition) IWinBanner230629Do {
	return w.withDO(w.DO.Having(conds...))
}

func (w winBanner230629Do) Limit(limit int) IWinBanner230629Do {
	return w.withDO(w.DO.Limit(limit))
}

func (w winBanner230629Do) Offset(offset int) IWinBanner230629Do {
	return w.withDO(w.DO.Offset(offset))
}

func (w winBanner230629Do) Scopes(funcs ...func(gen.Dao) gen.Dao) IWinBanner230629Do {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w winBanner230629Do) Unscoped() IWinBanner230629Do {
	return w.withDO(w.DO.Unscoped())
}

func (w winBanner230629Do) Create(values ...*model.WinBanner230629) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w winBanner230629Do) CreateInBatches(values []*model.WinBanner230629, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w winBanner230629Do) Save(values ...*model.WinBanner230629) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w winBanner230629Do) First() (*model.WinBanner230629, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinBanner230629), nil
	}
}

func (w winBanner230629Do) Take() (*model.WinBanner230629, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinBanner230629), nil
	}
}

func (w winBanner230629Do) Last() (*model.WinBanner230629, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinBanner230629), nil
	}
}

func (w winBanner230629Do) Find() ([]*model.WinBanner230629, error) {
	result, err := w.DO.Find()
	return result.([]*model.WinBanner230629), err
}

func (w winBanner230629Do) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinBanner230629, err error) {
	buf := make([]*model.WinBanner230629, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w winBanner230629Do) FindInBatches(result *[]*model.WinBanner230629, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w winBanner230629Do) Attrs(attrs ...field.AssignExpr) IWinBanner230629Do {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w winBanner230629Do) Assign(attrs ...field.AssignExpr) IWinBanner230629Do {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w winBanner230629Do) Joins(fields ...field.RelationField) IWinBanner230629Do {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w winBanner230629Do) Preload(fields ...field.RelationField) IWinBanner230629Do {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w winBanner230629Do) FirstOrInit() (*model.WinBanner230629, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinBanner230629), nil
	}
}

func (w winBanner230629Do) FirstOrCreate() (*model.WinBanner230629, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinBanner230629), nil
	}
}

func (w winBanner230629Do) FindByPage(offset int, limit int) (result []*model.WinBanner230629, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w winBanner230629Do) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w winBanner230629Do) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w winBanner230629Do) Delete(models ...*model.WinBanner230629) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *winBanner230629Do) withDO(do gen.Dao) *winBanner230629Do {
	w.DO = *do.(*gen.DO)
	return w
}
