// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gitlab.skig.tech/zero-core/common/zorm/model"
)

func newWinOperationLog(db *gorm.DB, opts ...gen.DOOption) winOperationLog {
	_winOperationLog := winOperationLog{}

	_winOperationLog.winOperationLogDo.UseDB(db, opts...)
	_winOperationLog.winOperationLogDo.UseModel(&model.WinOperationLog{})

	tableName := _winOperationLog.winOperationLogDo.TableName()
	_winOperationLog.ALL = field.NewAsterisk(tableName)
	_winOperationLog.ID = field.NewInt64(tableName, "id")
	_winOperationLog.UID = field.NewInt64(tableName, "uid")
	_winOperationLog.Username = field.NewString(tableName, "username")
	_winOperationLog.URL = field.NewString(tableName, "url")
	_winOperationLog.Menu = field.NewString(tableName, "menu")
	_winOperationLog.MenuIndex = field.NewInt64(tableName, "menu_index")
	_winOperationLog.Type = field.NewString(tableName, "type")
	_winOperationLog.Module = field.NewString(tableName, "module")
	_winOperationLog.Content = field.NewString(tableName, "content")
	_winOperationLog.IP = field.NewString(tableName, "ip")
	_winOperationLog.CreatedAt = field.NewInt64(tableName, "created_at")
	_winOperationLog.UpdatedAt = field.NewInt64(tableName, "updated_at")

	_winOperationLog.fillFieldMap()

	return _winOperationLog
}

type winOperationLog struct {
	winOperationLogDo

	ALL       field.Asterisk
	ID        field.Int64
	UID       field.Int64  // 操作人ID
	Username  field.String // 操作人
	URL       field.String // 请求url
	Menu      field.String // 菜单栏
	MenuIndex field.Int64  // 菜单栏索引值
	Type      field.String // 操作类型,(添加ADD,删除DELETE,修改UPDATE)
	Module    field.String // 操作位置
	Content   field.String // 操作内容
	IP        field.String // 操作IP
	CreatedAt field.Int64
	UpdatedAt field.Int64

	fieldMap map[string]field.Expr
}

func (w winOperationLog) Table(newTableName string) *winOperationLog {
	w.winOperationLogDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w winOperationLog) As(alias string) *winOperationLog {
	w.winOperationLogDo.DO = *(w.winOperationLogDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *winOperationLog) updateTableName(table string) *winOperationLog {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt64(table, "id")
	w.UID = field.NewInt64(table, "uid")
	w.Username = field.NewString(table, "username")
	w.URL = field.NewString(table, "url")
	w.Menu = field.NewString(table, "menu")
	w.MenuIndex = field.NewInt64(table, "menu_index")
	w.Type = field.NewString(table, "type")
	w.Module = field.NewString(table, "module")
	w.Content = field.NewString(table, "content")
	w.IP = field.NewString(table, "ip")
	w.CreatedAt = field.NewInt64(table, "created_at")
	w.UpdatedAt = field.NewInt64(table, "updated_at")

	w.fillFieldMap()

	return w
}

func (w *winOperationLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *winOperationLog) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 12)
	w.fieldMap["id"] = w.ID
	w.fieldMap["uid"] = w.UID
	w.fieldMap["username"] = w.Username
	w.fieldMap["url"] = w.URL
	w.fieldMap["menu"] = w.Menu
	w.fieldMap["menu_index"] = w.MenuIndex
	w.fieldMap["type"] = w.Type
	w.fieldMap["module"] = w.Module
	w.fieldMap["content"] = w.Content
	w.fieldMap["ip"] = w.IP
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["updated_at"] = w.UpdatedAt
}

func (w winOperationLog) clone(db *gorm.DB) winOperationLog {
	w.winOperationLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w winOperationLog) replaceDB(db *gorm.DB) winOperationLog {
	w.winOperationLogDo.ReplaceDB(db)
	return w
}

type winOperationLogDo struct{ gen.DO }

type IWinOperationLogDo interface {
	gen.SubQuery
	Debug() IWinOperationLogDo
	WithContext(ctx context.Context) IWinOperationLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWinOperationLogDo
	WriteDB() IWinOperationLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWinOperationLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWinOperationLogDo
	Not(conds ...gen.Condition) IWinOperationLogDo
	Or(conds ...gen.Condition) IWinOperationLogDo
	Select(conds ...field.Expr) IWinOperationLogDo
	Where(conds ...gen.Condition) IWinOperationLogDo
	Order(conds ...field.Expr) IWinOperationLogDo
	Distinct(cols ...field.Expr) IWinOperationLogDo
	Omit(cols ...field.Expr) IWinOperationLogDo
	Join(table schema.Tabler, on ...field.Expr) IWinOperationLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWinOperationLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWinOperationLogDo
	Group(cols ...field.Expr) IWinOperationLogDo
	Having(conds ...gen.Condition) IWinOperationLogDo
	Limit(limit int) IWinOperationLogDo
	Offset(offset int) IWinOperationLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWinOperationLogDo
	Unscoped() IWinOperationLogDo
	Create(values ...*model.WinOperationLog) error
	CreateInBatches(values []*model.WinOperationLog, batchSize int) error
	Save(values ...*model.WinOperationLog) error
	First() (*model.WinOperationLog, error)
	Take() (*model.WinOperationLog, error)
	Last() (*model.WinOperationLog, error)
	Find() ([]*model.WinOperationLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinOperationLog, err error)
	FindInBatches(result *[]*model.WinOperationLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WinOperationLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWinOperationLogDo
	Assign(attrs ...field.AssignExpr) IWinOperationLogDo
	Joins(fields ...field.RelationField) IWinOperationLogDo
	Preload(fields ...field.RelationField) IWinOperationLogDo
	FirstOrInit() (*model.WinOperationLog, error)
	FirstOrCreate() (*model.WinOperationLog, error)
	FindByPage(offset int, limit int) (result []*model.WinOperationLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWinOperationLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w winOperationLogDo) Debug() IWinOperationLogDo {
	return w.withDO(w.DO.Debug())
}

func (w winOperationLogDo) WithContext(ctx context.Context) IWinOperationLogDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w winOperationLogDo) ReadDB() IWinOperationLogDo {
	return w.Clauses(dbresolver.Read)
}

func (w winOperationLogDo) WriteDB() IWinOperationLogDo {
	return w.Clauses(dbresolver.Write)
}

func (w winOperationLogDo) Session(config *gorm.Session) IWinOperationLogDo {
	return w.withDO(w.DO.Session(config))
}

func (w winOperationLogDo) Clauses(conds ...clause.Expression) IWinOperationLogDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w winOperationLogDo) Returning(value interface{}, columns ...string) IWinOperationLogDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w winOperationLogDo) Not(conds ...gen.Condition) IWinOperationLogDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w winOperationLogDo) Or(conds ...gen.Condition) IWinOperationLogDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w winOperationLogDo) Select(conds ...field.Expr) IWinOperationLogDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w winOperationLogDo) Where(conds ...gen.Condition) IWinOperationLogDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w winOperationLogDo) Order(conds ...field.Expr) IWinOperationLogDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w winOperationLogDo) Distinct(cols ...field.Expr) IWinOperationLogDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w winOperationLogDo) Omit(cols ...field.Expr) IWinOperationLogDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w winOperationLogDo) Join(table schema.Tabler, on ...field.Expr) IWinOperationLogDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w winOperationLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWinOperationLogDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w winOperationLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IWinOperationLogDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w winOperationLogDo) Group(cols ...field.Expr) IWinOperationLogDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w winOperationLogDo) Having(conds ...gen.Condition) IWinOperationLogDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w winOperationLogDo) Limit(limit int) IWinOperationLogDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w winOperationLogDo) Offset(offset int) IWinOperationLogDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w winOperationLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWinOperationLogDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w winOperationLogDo) Unscoped() IWinOperationLogDo {
	return w.withDO(w.DO.Unscoped())
}

func (w winOperationLogDo) Create(values ...*model.WinOperationLog) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w winOperationLogDo) CreateInBatches(values []*model.WinOperationLog, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w winOperationLogDo) Save(values ...*model.WinOperationLog) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w winOperationLogDo) First() (*model.WinOperationLog, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinOperationLog), nil
	}
}

func (w winOperationLogDo) Take() (*model.WinOperationLog, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinOperationLog), nil
	}
}

func (w winOperationLogDo) Last() (*model.WinOperationLog, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinOperationLog), nil
	}
}

func (w winOperationLogDo) Find() ([]*model.WinOperationLog, error) {
	result, err := w.DO.Find()
	return result.([]*model.WinOperationLog), err
}

func (w winOperationLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinOperationLog, err error) {
	buf := make([]*model.WinOperationLog, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w winOperationLogDo) FindInBatches(result *[]*model.WinOperationLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w winOperationLogDo) Attrs(attrs ...field.AssignExpr) IWinOperationLogDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w winOperationLogDo) Assign(attrs ...field.AssignExpr) IWinOperationLogDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w winOperationLogDo) Joins(fields ...field.RelationField) IWinOperationLogDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w winOperationLogDo) Preload(fields ...field.RelationField) IWinOperationLogDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w winOperationLogDo) FirstOrInit() (*model.WinOperationLog, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinOperationLog), nil
	}
}

func (w winOperationLogDo) FirstOrCreate() (*model.WinOperationLog, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinOperationLog), nil
	}
}

func (w winOperationLogDo) FindByPage(offset int, limit int) (result []*model.WinOperationLog, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w winOperationLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w winOperationLogDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w winOperationLogDo) Delete(models ...*model.WinOperationLog) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *winOperationLogDo) withDO(do gen.Dao) *winOperationLogDo {
	w.DO = *do.(*gen.DO)
	return w
}
