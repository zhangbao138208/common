// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gitlab.skig.tech/zero-core/common/zorm/model"
)

func newWinNotice(db *gorm.DB, opts ...gen.DOOption) winNotice {
	_winNotice := winNotice{}

	_winNotice.winNoticeDo.UseDB(db, opts...)
	_winNotice.winNoticeDo.UseModel(&model.WinNotice{})

	tableName := _winNotice.winNoticeDo.TableName()
	_winNotice.ALL = field.NewAsterisk(tableName)
	_winNotice.ID = field.NewInt64(tableName, "id")
	_winNotice.Title = field.NewString(tableName, "title")
	_winNotice.Lang = field.NewString(tableName, "lang")
	_winNotice.Content = field.NewString(tableName, "content")
	_winNotice.Category = field.NewInt64(tableName, "category")
	_winNotice.Status = field.NewInt64(tableName, "status")
	_winNotice.Sort = field.NewInt64(tableName, "sort")
	_winNotice.CreatedAt = field.NewInt64(tableName, "created_at")
	_winNotice.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_winNotice.OperatorName = field.NewString(tableName, "operator_name")
	_winNotice.UID = field.NewInt64(tableName, "uid")

	_winNotice.fillFieldMap()

	return _winNotice
}

type winNotice struct {
	winNoticeDo

	ALL          field.Asterisk
	ID           field.Int64  // 自增ID
	Title        field.String // 标题
	Lang         field.String // 语言
	Content      field.String // 内容
	Category     field.Int64  // 类型:1-系统公告2-站内信 3-系统消息
	Status       field.Int64  // 状态:1-启用 0-停用
	Sort         field.Int64  // 排序:从大到小
	CreatedAt    field.Int64
	UpdatedAt    field.Int64
	OperatorName field.String // 操作人姓名
	UID          field.Int64  // 用户ID

	fieldMap map[string]field.Expr
}

func (w winNotice) Table(newTableName string) *winNotice {
	w.winNoticeDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w winNotice) As(alias string) *winNotice {
	w.winNoticeDo.DO = *(w.winNoticeDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *winNotice) updateTableName(table string) *winNotice {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt64(table, "id")
	w.Title = field.NewString(table, "title")
	w.Lang = field.NewString(table, "lang")
	w.Content = field.NewString(table, "content")
	w.Category = field.NewInt64(table, "category")
	w.Status = field.NewInt64(table, "status")
	w.Sort = field.NewInt64(table, "sort")
	w.CreatedAt = field.NewInt64(table, "created_at")
	w.UpdatedAt = field.NewInt64(table, "updated_at")
	w.OperatorName = field.NewString(table, "operator_name")
	w.UID = field.NewInt64(table, "uid")

	w.fillFieldMap()

	return w
}

func (w *winNotice) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *winNotice) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 11)
	w.fieldMap["id"] = w.ID
	w.fieldMap["title"] = w.Title
	w.fieldMap["lang"] = w.Lang
	w.fieldMap["content"] = w.Content
	w.fieldMap["category"] = w.Category
	w.fieldMap["status"] = w.Status
	w.fieldMap["sort"] = w.Sort
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["updated_at"] = w.UpdatedAt
	w.fieldMap["operator_name"] = w.OperatorName
	w.fieldMap["uid"] = w.UID
}

func (w winNotice) clone(db *gorm.DB) winNotice {
	w.winNoticeDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w winNotice) replaceDB(db *gorm.DB) winNotice {
	w.winNoticeDo.ReplaceDB(db)
	return w
}

type winNoticeDo struct{ gen.DO }

type IWinNoticeDo interface {
	gen.SubQuery
	Debug() IWinNoticeDo
	WithContext(ctx context.Context) IWinNoticeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWinNoticeDo
	WriteDB() IWinNoticeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWinNoticeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWinNoticeDo
	Not(conds ...gen.Condition) IWinNoticeDo
	Or(conds ...gen.Condition) IWinNoticeDo
	Select(conds ...field.Expr) IWinNoticeDo
	Where(conds ...gen.Condition) IWinNoticeDo
	Order(conds ...field.Expr) IWinNoticeDo
	Distinct(cols ...field.Expr) IWinNoticeDo
	Omit(cols ...field.Expr) IWinNoticeDo
	Join(table schema.Tabler, on ...field.Expr) IWinNoticeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWinNoticeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWinNoticeDo
	Group(cols ...field.Expr) IWinNoticeDo
	Having(conds ...gen.Condition) IWinNoticeDo
	Limit(limit int) IWinNoticeDo
	Offset(offset int) IWinNoticeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWinNoticeDo
	Unscoped() IWinNoticeDo
	Create(values ...*model.WinNotice) error
	CreateInBatches(values []*model.WinNotice, batchSize int) error
	Save(values ...*model.WinNotice) error
	First() (*model.WinNotice, error)
	Take() (*model.WinNotice, error)
	Last() (*model.WinNotice, error)
	Find() ([]*model.WinNotice, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinNotice, err error)
	FindInBatches(result *[]*model.WinNotice, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WinNotice) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWinNoticeDo
	Assign(attrs ...field.AssignExpr) IWinNoticeDo
	Joins(fields ...field.RelationField) IWinNoticeDo
	Preload(fields ...field.RelationField) IWinNoticeDo
	FirstOrInit() (*model.WinNotice, error)
	FirstOrCreate() (*model.WinNotice, error)
	FindByPage(offset int, limit int) (result []*model.WinNotice, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWinNoticeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w winNoticeDo) Debug() IWinNoticeDo {
	return w.withDO(w.DO.Debug())
}

func (w winNoticeDo) WithContext(ctx context.Context) IWinNoticeDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w winNoticeDo) ReadDB() IWinNoticeDo {
	return w.Clauses(dbresolver.Read)
}

func (w winNoticeDo) WriteDB() IWinNoticeDo {
	return w.Clauses(dbresolver.Write)
}

func (w winNoticeDo) Session(config *gorm.Session) IWinNoticeDo {
	return w.withDO(w.DO.Session(config))
}

func (w winNoticeDo) Clauses(conds ...clause.Expression) IWinNoticeDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w winNoticeDo) Returning(value interface{}, columns ...string) IWinNoticeDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w winNoticeDo) Not(conds ...gen.Condition) IWinNoticeDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w winNoticeDo) Or(conds ...gen.Condition) IWinNoticeDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w winNoticeDo) Select(conds ...field.Expr) IWinNoticeDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w winNoticeDo) Where(conds ...gen.Condition) IWinNoticeDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w winNoticeDo) Order(conds ...field.Expr) IWinNoticeDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w winNoticeDo) Distinct(cols ...field.Expr) IWinNoticeDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w winNoticeDo) Omit(cols ...field.Expr) IWinNoticeDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w winNoticeDo) Join(table schema.Tabler, on ...field.Expr) IWinNoticeDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w winNoticeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWinNoticeDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w winNoticeDo) RightJoin(table schema.Tabler, on ...field.Expr) IWinNoticeDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w winNoticeDo) Group(cols ...field.Expr) IWinNoticeDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w winNoticeDo) Having(conds ...gen.Condition) IWinNoticeDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w winNoticeDo) Limit(limit int) IWinNoticeDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w winNoticeDo) Offset(offset int) IWinNoticeDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w winNoticeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWinNoticeDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w winNoticeDo) Unscoped() IWinNoticeDo {
	return w.withDO(w.DO.Unscoped())
}

func (w winNoticeDo) Create(values ...*model.WinNotice) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w winNoticeDo) CreateInBatches(values []*model.WinNotice, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w winNoticeDo) Save(values ...*model.WinNotice) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w winNoticeDo) First() (*model.WinNotice, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinNotice), nil
	}
}

func (w winNoticeDo) Take() (*model.WinNotice, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinNotice), nil
	}
}

func (w winNoticeDo) Last() (*model.WinNotice, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinNotice), nil
	}
}

func (w winNoticeDo) Find() ([]*model.WinNotice, error) {
	result, err := w.DO.Find()
	return result.([]*model.WinNotice), err
}

func (w winNoticeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinNotice, err error) {
	buf := make([]*model.WinNotice, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w winNoticeDo) FindInBatches(result *[]*model.WinNotice, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w winNoticeDo) Attrs(attrs ...field.AssignExpr) IWinNoticeDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w winNoticeDo) Assign(attrs ...field.AssignExpr) IWinNoticeDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w winNoticeDo) Joins(fields ...field.RelationField) IWinNoticeDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w winNoticeDo) Preload(fields ...field.RelationField) IWinNoticeDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w winNoticeDo) FirstOrInit() (*model.WinNotice, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinNotice), nil
	}
}

func (w winNoticeDo) FirstOrCreate() (*model.WinNotice, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinNotice), nil
	}
}

func (w winNoticeDo) FindByPage(offset int, limit int) (result []*model.WinNotice, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w winNoticeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w winNoticeDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w winNoticeDo) Delete(models ...*model.WinNotice) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *winNoticeDo) withDO(do gen.Dao) *winNoticeDo {
	w.DO = *do.(*gen.DO)
	return w
}
