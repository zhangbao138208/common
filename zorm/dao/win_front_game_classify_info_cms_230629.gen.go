// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gitlab.skig.tech/zero-core/common/zorm/model"
)

func newWinFrontGameClassifyInfoCms230629(db *gorm.DB, opts ...gen.DOOption) winFrontGameClassifyInfoCms230629 {
	_winFrontGameClassifyInfoCms230629 := winFrontGameClassifyInfoCms230629{}

	_winFrontGameClassifyInfoCms230629.winFrontGameClassifyInfoCms230629Do.UseDB(db, opts...)
	_winFrontGameClassifyInfoCms230629.winFrontGameClassifyInfoCms230629Do.UseModel(&model.WinFrontGameClassifyInfoCms230629{})

	tableName := _winFrontGameClassifyInfoCms230629.winFrontGameClassifyInfoCms230629Do.TableName()
	_winFrontGameClassifyInfoCms230629.ALL = field.NewAsterisk(tableName)
	_winFrontGameClassifyInfoCms230629.ID = field.NewInt64(tableName, "id")
	_winFrontGameClassifyInfoCms230629.CID = field.NewInt64(tableName, "c_id")
	_winFrontGameClassifyInfoCms230629.SlotID = field.NewString(tableName, "slot_id")
	_winFrontGameClassifyInfoCms230629.GameID = field.NewInt64(tableName, "game_id")
	_winFrontGameClassifyInfoCms230629.GameGroupID = field.NewInt64(tableName, "game_group_id")
	_winFrontGameClassifyInfoCms230629.PlatID = field.NewInt64(tableName, "plat_id")
	_winFrontGameClassifyInfoCms230629.Sort = field.NewInt64(tableName, "sort")
	_winFrontGameClassifyInfoCms230629.CreatedAt = field.NewInt64(tableName, "created_at")
	_winFrontGameClassifyInfoCms230629.CreateUser = field.NewString(tableName, "create_user")
	_winFrontGameClassifyInfoCms230629.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_winFrontGameClassifyInfoCms230629.UpdateUser = field.NewString(tableName, "update_user")

	_winFrontGameClassifyInfoCms230629.fillFieldMap()

	return _winFrontGameClassifyInfoCms230629
}

type winFrontGameClassifyInfoCms230629 struct {
	winFrontGameClassifyInfoCms230629Do

	ALL         field.Asterisk
	ID          field.Int64
	CID         field.Int64  // 分类id
	SlotID      field.String // slotId
	GameID      field.Int64  // 游戏ID(关联game_list)
	GameGroupID field.Int64  // 游戏大类类型
	PlatID      field.Int64  // 游戏平台id
	Sort        field.Int64  // 排序
	CreatedAt   field.Int64  // 创建时间
	CreateUser  field.String // 创建人
	UpdatedAt   field.Int64  // 修改人
	UpdateUser  field.String // 修改人

	fieldMap map[string]field.Expr
}

func (w winFrontGameClassifyInfoCms230629) Table(newTableName string) *winFrontGameClassifyInfoCms230629 {
	w.winFrontGameClassifyInfoCms230629Do.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w winFrontGameClassifyInfoCms230629) As(alias string) *winFrontGameClassifyInfoCms230629 {
	w.winFrontGameClassifyInfoCms230629Do.DO = *(w.winFrontGameClassifyInfoCms230629Do.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *winFrontGameClassifyInfoCms230629) updateTableName(table string) *winFrontGameClassifyInfoCms230629 {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt64(table, "id")
	w.CID = field.NewInt64(table, "c_id")
	w.SlotID = field.NewString(table, "slot_id")
	w.GameID = field.NewInt64(table, "game_id")
	w.GameGroupID = field.NewInt64(table, "game_group_id")
	w.PlatID = field.NewInt64(table, "plat_id")
	w.Sort = field.NewInt64(table, "sort")
	w.CreatedAt = field.NewInt64(table, "created_at")
	w.CreateUser = field.NewString(table, "create_user")
	w.UpdatedAt = field.NewInt64(table, "updated_at")
	w.UpdateUser = field.NewString(table, "update_user")

	w.fillFieldMap()

	return w
}

func (w *winFrontGameClassifyInfoCms230629) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *winFrontGameClassifyInfoCms230629) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 11)
	w.fieldMap["id"] = w.ID
	w.fieldMap["c_id"] = w.CID
	w.fieldMap["slot_id"] = w.SlotID
	w.fieldMap["game_id"] = w.GameID
	w.fieldMap["game_group_id"] = w.GameGroupID
	w.fieldMap["plat_id"] = w.PlatID
	w.fieldMap["sort"] = w.Sort
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["create_user"] = w.CreateUser
	w.fieldMap["updated_at"] = w.UpdatedAt
	w.fieldMap["update_user"] = w.UpdateUser
}

func (w winFrontGameClassifyInfoCms230629) clone(db *gorm.DB) winFrontGameClassifyInfoCms230629 {
	w.winFrontGameClassifyInfoCms230629Do.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w winFrontGameClassifyInfoCms230629) replaceDB(db *gorm.DB) winFrontGameClassifyInfoCms230629 {
	w.winFrontGameClassifyInfoCms230629Do.ReplaceDB(db)
	return w
}

type winFrontGameClassifyInfoCms230629Do struct{ gen.DO }

type IWinFrontGameClassifyInfoCms230629Do interface {
	gen.SubQuery
	Debug() IWinFrontGameClassifyInfoCms230629Do
	WithContext(ctx context.Context) IWinFrontGameClassifyInfoCms230629Do
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWinFrontGameClassifyInfoCms230629Do
	WriteDB() IWinFrontGameClassifyInfoCms230629Do
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWinFrontGameClassifyInfoCms230629Do
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWinFrontGameClassifyInfoCms230629Do
	Not(conds ...gen.Condition) IWinFrontGameClassifyInfoCms230629Do
	Or(conds ...gen.Condition) IWinFrontGameClassifyInfoCms230629Do
	Select(conds ...field.Expr) IWinFrontGameClassifyInfoCms230629Do
	Where(conds ...gen.Condition) IWinFrontGameClassifyInfoCms230629Do
	Order(conds ...field.Expr) IWinFrontGameClassifyInfoCms230629Do
	Distinct(cols ...field.Expr) IWinFrontGameClassifyInfoCms230629Do
	Omit(cols ...field.Expr) IWinFrontGameClassifyInfoCms230629Do
	Join(table schema.Tabler, on ...field.Expr) IWinFrontGameClassifyInfoCms230629Do
	LeftJoin(table schema.Tabler, on ...field.Expr) IWinFrontGameClassifyInfoCms230629Do
	RightJoin(table schema.Tabler, on ...field.Expr) IWinFrontGameClassifyInfoCms230629Do
	Group(cols ...field.Expr) IWinFrontGameClassifyInfoCms230629Do
	Having(conds ...gen.Condition) IWinFrontGameClassifyInfoCms230629Do
	Limit(limit int) IWinFrontGameClassifyInfoCms230629Do
	Offset(offset int) IWinFrontGameClassifyInfoCms230629Do
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWinFrontGameClassifyInfoCms230629Do
	Unscoped() IWinFrontGameClassifyInfoCms230629Do
	Create(values ...*model.WinFrontGameClassifyInfoCms230629) error
	CreateInBatches(values []*model.WinFrontGameClassifyInfoCms230629, batchSize int) error
	Save(values ...*model.WinFrontGameClassifyInfoCms230629) error
	First() (*model.WinFrontGameClassifyInfoCms230629, error)
	Take() (*model.WinFrontGameClassifyInfoCms230629, error)
	Last() (*model.WinFrontGameClassifyInfoCms230629, error)
	Find() ([]*model.WinFrontGameClassifyInfoCms230629, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinFrontGameClassifyInfoCms230629, err error)
	FindInBatches(result *[]*model.WinFrontGameClassifyInfoCms230629, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WinFrontGameClassifyInfoCms230629) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWinFrontGameClassifyInfoCms230629Do
	Assign(attrs ...field.AssignExpr) IWinFrontGameClassifyInfoCms230629Do
	Joins(fields ...field.RelationField) IWinFrontGameClassifyInfoCms230629Do
	Preload(fields ...field.RelationField) IWinFrontGameClassifyInfoCms230629Do
	FirstOrInit() (*model.WinFrontGameClassifyInfoCms230629, error)
	FirstOrCreate() (*model.WinFrontGameClassifyInfoCms230629, error)
	FindByPage(offset int, limit int) (result []*model.WinFrontGameClassifyInfoCms230629, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWinFrontGameClassifyInfoCms230629Do
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w winFrontGameClassifyInfoCms230629Do) Debug() IWinFrontGameClassifyInfoCms230629Do {
	return w.withDO(w.DO.Debug())
}

func (w winFrontGameClassifyInfoCms230629Do) WithContext(ctx context.Context) IWinFrontGameClassifyInfoCms230629Do {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w winFrontGameClassifyInfoCms230629Do) ReadDB() IWinFrontGameClassifyInfoCms230629Do {
	return w.Clauses(dbresolver.Read)
}

func (w winFrontGameClassifyInfoCms230629Do) WriteDB() IWinFrontGameClassifyInfoCms230629Do {
	return w.Clauses(dbresolver.Write)
}

func (w winFrontGameClassifyInfoCms230629Do) Session(config *gorm.Session) IWinFrontGameClassifyInfoCms230629Do {
	return w.withDO(w.DO.Session(config))
}

func (w winFrontGameClassifyInfoCms230629Do) Clauses(conds ...clause.Expression) IWinFrontGameClassifyInfoCms230629Do {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w winFrontGameClassifyInfoCms230629Do) Returning(value interface{}, columns ...string) IWinFrontGameClassifyInfoCms230629Do {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w winFrontGameClassifyInfoCms230629Do) Not(conds ...gen.Condition) IWinFrontGameClassifyInfoCms230629Do {
	return w.withDO(w.DO.Not(conds...))
}

func (w winFrontGameClassifyInfoCms230629Do) Or(conds ...gen.Condition) IWinFrontGameClassifyInfoCms230629Do {
	return w.withDO(w.DO.Or(conds...))
}

func (w winFrontGameClassifyInfoCms230629Do) Select(conds ...field.Expr) IWinFrontGameClassifyInfoCms230629Do {
	return w.withDO(w.DO.Select(conds...))
}

func (w winFrontGameClassifyInfoCms230629Do) Where(conds ...gen.Condition) IWinFrontGameClassifyInfoCms230629Do {
	return w.withDO(w.DO.Where(conds...))
}

func (w winFrontGameClassifyInfoCms230629Do) Order(conds ...field.Expr) IWinFrontGameClassifyInfoCms230629Do {
	return w.withDO(w.DO.Order(conds...))
}

func (w winFrontGameClassifyInfoCms230629Do) Distinct(cols ...field.Expr) IWinFrontGameClassifyInfoCms230629Do {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w winFrontGameClassifyInfoCms230629Do) Omit(cols ...field.Expr) IWinFrontGameClassifyInfoCms230629Do {
	return w.withDO(w.DO.Omit(cols...))
}

func (w winFrontGameClassifyInfoCms230629Do) Join(table schema.Tabler, on ...field.Expr) IWinFrontGameClassifyInfoCms230629Do {
	return w.withDO(w.DO.Join(table, on...))
}

func (w winFrontGameClassifyInfoCms230629Do) LeftJoin(table schema.Tabler, on ...field.Expr) IWinFrontGameClassifyInfoCms230629Do {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w winFrontGameClassifyInfoCms230629Do) RightJoin(table schema.Tabler, on ...field.Expr) IWinFrontGameClassifyInfoCms230629Do {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w winFrontGameClassifyInfoCms230629Do) Group(cols ...field.Expr) IWinFrontGameClassifyInfoCms230629Do {
	return w.withDO(w.DO.Group(cols...))
}

func (w winFrontGameClassifyInfoCms230629Do) Having(conds ...gen.Condition) IWinFrontGameClassifyInfoCms230629Do {
	return w.withDO(w.DO.Having(conds...))
}

func (w winFrontGameClassifyInfoCms230629Do) Limit(limit int) IWinFrontGameClassifyInfoCms230629Do {
	return w.withDO(w.DO.Limit(limit))
}

func (w winFrontGameClassifyInfoCms230629Do) Offset(offset int) IWinFrontGameClassifyInfoCms230629Do {
	return w.withDO(w.DO.Offset(offset))
}

func (w winFrontGameClassifyInfoCms230629Do) Scopes(funcs ...func(gen.Dao) gen.Dao) IWinFrontGameClassifyInfoCms230629Do {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w winFrontGameClassifyInfoCms230629Do) Unscoped() IWinFrontGameClassifyInfoCms230629Do {
	return w.withDO(w.DO.Unscoped())
}

func (w winFrontGameClassifyInfoCms230629Do) Create(values ...*model.WinFrontGameClassifyInfoCms230629) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w winFrontGameClassifyInfoCms230629Do) CreateInBatches(values []*model.WinFrontGameClassifyInfoCms230629, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w winFrontGameClassifyInfoCms230629Do) Save(values ...*model.WinFrontGameClassifyInfoCms230629) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w winFrontGameClassifyInfoCms230629Do) First() (*model.WinFrontGameClassifyInfoCms230629, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinFrontGameClassifyInfoCms230629), nil
	}
}

func (w winFrontGameClassifyInfoCms230629Do) Take() (*model.WinFrontGameClassifyInfoCms230629, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinFrontGameClassifyInfoCms230629), nil
	}
}

func (w winFrontGameClassifyInfoCms230629Do) Last() (*model.WinFrontGameClassifyInfoCms230629, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinFrontGameClassifyInfoCms230629), nil
	}
}

func (w winFrontGameClassifyInfoCms230629Do) Find() ([]*model.WinFrontGameClassifyInfoCms230629, error) {
	result, err := w.DO.Find()
	return result.([]*model.WinFrontGameClassifyInfoCms230629), err
}

func (w winFrontGameClassifyInfoCms230629Do) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinFrontGameClassifyInfoCms230629, err error) {
	buf := make([]*model.WinFrontGameClassifyInfoCms230629, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w winFrontGameClassifyInfoCms230629Do) FindInBatches(result *[]*model.WinFrontGameClassifyInfoCms230629, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w winFrontGameClassifyInfoCms230629Do) Attrs(attrs ...field.AssignExpr) IWinFrontGameClassifyInfoCms230629Do {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w winFrontGameClassifyInfoCms230629Do) Assign(attrs ...field.AssignExpr) IWinFrontGameClassifyInfoCms230629Do {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w winFrontGameClassifyInfoCms230629Do) Joins(fields ...field.RelationField) IWinFrontGameClassifyInfoCms230629Do {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w winFrontGameClassifyInfoCms230629Do) Preload(fields ...field.RelationField) IWinFrontGameClassifyInfoCms230629Do {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w winFrontGameClassifyInfoCms230629Do) FirstOrInit() (*model.WinFrontGameClassifyInfoCms230629, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinFrontGameClassifyInfoCms230629), nil
	}
}

func (w winFrontGameClassifyInfoCms230629Do) FirstOrCreate() (*model.WinFrontGameClassifyInfoCms230629, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinFrontGameClassifyInfoCms230629), nil
	}
}

func (w winFrontGameClassifyInfoCms230629Do) FindByPage(offset int, limit int) (result []*model.WinFrontGameClassifyInfoCms230629, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w winFrontGameClassifyInfoCms230629Do) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w winFrontGameClassifyInfoCms230629Do) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w winFrontGameClassifyInfoCms230629Do) Delete(models ...*model.WinFrontGameClassifyInfoCms230629) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *winFrontGameClassifyInfoCms230629Do) withDO(do gen.Dao) *winFrontGameClassifyInfoCms230629Do {
	w.DO = *do.(*gen.DO)
	return w
}
