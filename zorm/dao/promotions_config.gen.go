// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gitlab.skig.tech/zero-core/common/zorm/model"
)

func newPromotionsConfig(db *gorm.DB, opts ...gen.DOOption) promotionsConfig {
	_promotionsConfig := promotionsConfig{}

	_promotionsConfig.promotionsConfigDo.UseDB(db, opts...)
	_promotionsConfig.promotionsConfigDo.UseModel(&model.PromotionsConfig{})

	tableName := _promotionsConfig.promotionsConfigDo.TableName()
	_promotionsConfig.ALL = field.NewAsterisk(tableName)
	_promotionsConfig.ID = field.NewInt64(tableName, "id")
	_promotionsConfig.PromotionsID = field.NewInt64(tableName, "promotions_id")
	_promotionsConfig.PromotionsCode = field.NewString(tableName, "promotions_code")
	_promotionsConfig.PromotionsCodeZh = field.NewString(tableName, "promotions_code_zh")
	_promotionsConfig.ConfigName = field.NewString(tableName, "config_name")
	_promotionsConfig.ConfigNameZh = field.NewString(tableName, "config_name_zh")
	_promotionsConfig.ConfigValue = field.NewString(tableName, "config_value")
	_promotionsConfig.CreateAt = field.NewInt64(tableName, "create_at")
	_promotionsConfig.UpdateAt = field.NewInt64(tableName, "update_at")

	_promotionsConfig.fillFieldMap()

	return _promotionsConfig
}

type promotionsConfig struct {
	promotionsConfigDo

	ALL              field.Asterisk
	ID               field.Int64  // 主键ID
	PromotionsID     field.Int64  // 优惠活动ID
	PromotionsCode   field.String // 活动标识:首充彩金,二充彩金等
	PromotionsCodeZh field.String // 活动标识-中文
	ConfigName       field.String // 配置名称
	ConfigNameZh     field.String // 配置名称-中文
	ConfigValue      field.String // 配置名称-值
	CreateAt         field.Int64  // 创建时间
	UpdateAt         field.Int64  // 修改时间

	fieldMap map[string]field.Expr
}

func (p promotionsConfig) Table(newTableName string) *promotionsConfig {
	p.promotionsConfigDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p promotionsConfig) As(alias string) *promotionsConfig {
	p.promotionsConfigDo.DO = *(p.promotionsConfigDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *promotionsConfig) updateTableName(table string) *promotionsConfig {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.PromotionsID = field.NewInt64(table, "promotions_id")
	p.PromotionsCode = field.NewString(table, "promotions_code")
	p.PromotionsCodeZh = field.NewString(table, "promotions_code_zh")
	p.ConfigName = field.NewString(table, "config_name")
	p.ConfigNameZh = field.NewString(table, "config_name_zh")
	p.ConfigValue = field.NewString(table, "config_value")
	p.CreateAt = field.NewInt64(table, "create_at")
	p.UpdateAt = field.NewInt64(table, "update_at")

	p.fillFieldMap()

	return p
}

func (p *promotionsConfig) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *promotionsConfig) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 9)
	p.fieldMap["id"] = p.ID
	p.fieldMap["promotions_id"] = p.PromotionsID
	p.fieldMap["promotions_code"] = p.PromotionsCode
	p.fieldMap["promotions_code_zh"] = p.PromotionsCodeZh
	p.fieldMap["config_name"] = p.ConfigName
	p.fieldMap["config_name_zh"] = p.ConfigNameZh
	p.fieldMap["config_value"] = p.ConfigValue
	p.fieldMap["create_at"] = p.CreateAt
	p.fieldMap["update_at"] = p.UpdateAt
}

func (p promotionsConfig) clone(db *gorm.DB) promotionsConfig {
	p.promotionsConfigDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p promotionsConfig) replaceDB(db *gorm.DB) promotionsConfig {
	p.promotionsConfigDo.ReplaceDB(db)
	return p
}

type promotionsConfigDo struct{ gen.DO }

type IPromotionsConfigDo interface {
	gen.SubQuery
	Debug() IPromotionsConfigDo
	WithContext(ctx context.Context) IPromotionsConfigDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPromotionsConfigDo
	WriteDB() IPromotionsConfigDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPromotionsConfigDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPromotionsConfigDo
	Not(conds ...gen.Condition) IPromotionsConfigDo
	Or(conds ...gen.Condition) IPromotionsConfigDo
	Select(conds ...field.Expr) IPromotionsConfigDo
	Where(conds ...gen.Condition) IPromotionsConfigDo
	Order(conds ...field.Expr) IPromotionsConfigDo
	Distinct(cols ...field.Expr) IPromotionsConfigDo
	Omit(cols ...field.Expr) IPromotionsConfigDo
	Join(table schema.Tabler, on ...field.Expr) IPromotionsConfigDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPromotionsConfigDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPromotionsConfigDo
	Group(cols ...field.Expr) IPromotionsConfigDo
	Having(conds ...gen.Condition) IPromotionsConfigDo
	Limit(limit int) IPromotionsConfigDo
	Offset(offset int) IPromotionsConfigDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPromotionsConfigDo
	Unscoped() IPromotionsConfigDo
	Create(values ...*model.PromotionsConfig) error
	CreateInBatches(values []*model.PromotionsConfig, batchSize int) error
	Save(values ...*model.PromotionsConfig) error
	First() (*model.PromotionsConfig, error)
	Take() (*model.PromotionsConfig, error)
	Last() (*model.PromotionsConfig, error)
	Find() ([]*model.PromotionsConfig, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PromotionsConfig, err error)
	FindInBatches(result *[]*model.PromotionsConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PromotionsConfig) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPromotionsConfigDo
	Assign(attrs ...field.AssignExpr) IPromotionsConfigDo
	Joins(fields ...field.RelationField) IPromotionsConfigDo
	Preload(fields ...field.RelationField) IPromotionsConfigDo
	FirstOrInit() (*model.PromotionsConfig, error)
	FirstOrCreate() (*model.PromotionsConfig, error)
	FindByPage(offset int, limit int) (result []*model.PromotionsConfig, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPromotionsConfigDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p promotionsConfigDo) Debug() IPromotionsConfigDo {
	return p.withDO(p.DO.Debug())
}

func (p promotionsConfigDo) WithContext(ctx context.Context) IPromotionsConfigDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p promotionsConfigDo) ReadDB() IPromotionsConfigDo {
	return p.Clauses(dbresolver.Read)
}

func (p promotionsConfigDo) WriteDB() IPromotionsConfigDo {
	return p.Clauses(dbresolver.Write)
}

func (p promotionsConfigDo) Session(config *gorm.Session) IPromotionsConfigDo {
	return p.withDO(p.DO.Session(config))
}

func (p promotionsConfigDo) Clauses(conds ...clause.Expression) IPromotionsConfigDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p promotionsConfigDo) Returning(value interface{}, columns ...string) IPromotionsConfigDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p promotionsConfigDo) Not(conds ...gen.Condition) IPromotionsConfigDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p promotionsConfigDo) Or(conds ...gen.Condition) IPromotionsConfigDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p promotionsConfigDo) Select(conds ...field.Expr) IPromotionsConfigDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p promotionsConfigDo) Where(conds ...gen.Condition) IPromotionsConfigDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p promotionsConfigDo) Order(conds ...field.Expr) IPromotionsConfigDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p promotionsConfigDo) Distinct(cols ...field.Expr) IPromotionsConfigDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p promotionsConfigDo) Omit(cols ...field.Expr) IPromotionsConfigDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p promotionsConfigDo) Join(table schema.Tabler, on ...field.Expr) IPromotionsConfigDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p promotionsConfigDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPromotionsConfigDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p promotionsConfigDo) RightJoin(table schema.Tabler, on ...field.Expr) IPromotionsConfigDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p promotionsConfigDo) Group(cols ...field.Expr) IPromotionsConfigDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p promotionsConfigDo) Having(conds ...gen.Condition) IPromotionsConfigDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p promotionsConfigDo) Limit(limit int) IPromotionsConfigDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p promotionsConfigDo) Offset(offset int) IPromotionsConfigDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p promotionsConfigDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPromotionsConfigDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p promotionsConfigDo) Unscoped() IPromotionsConfigDo {
	return p.withDO(p.DO.Unscoped())
}

func (p promotionsConfigDo) Create(values ...*model.PromotionsConfig) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p promotionsConfigDo) CreateInBatches(values []*model.PromotionsConfig, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p promotionsConfigDo) Save(values ...*model.PromotionsConfig) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p promotionsConfigDo) First() (*model.PromotionsConfig, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromotionsConfig), nil
	}
}

func (p promotionsConfigDo) Take() (*model.PromotionsConfig, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromotionsConfig), nil
	}
}

func (p promotionsConfigDo) Last() (*model.PromotionsConfig, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromotionsConfig), nil
	}
}

func (p promotionsConfigDo) Find() ([]*model.PromotionsConfig, error) {
	result, err := p.DO.Find()
	return result.([]*model.PromotionsConfig), err
}

func (p promotionsConfigDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PromotionsConfig, err error) {
	buf := make([]*model.PromotionsConfig, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p promotionsConfigDo) FindInBatches(result *[]*model.PromotionsConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p promotionsConfigDo) Attrs(attrs ...field.AssignExpr) IPromotionsConfigDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p promotionsConfigDo) Assign(attrs ...field.AssignExpr) IPromotionsConfigDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p promotionsConfigDo) Joins(fields ...field.RelationField) IPromotionsConfigDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p promotionsConfigDo) Preload(fields ...field.RelationField) IPromotionsConfigDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p promotionsConfigDo) FirstOrInit() (*model.PromotionsConfig, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromotionsConfig), nil
	}
}

func (p promotionsConfigDo) FirstOrCreate() (*model.PromotionsConfig, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromotionsConfig), nil
	}
}

func (p promotionsConfigDo) FindByPage(offset int, limit int) (result []*model.PromotionsConfig, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p promotionsConfigDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p promotionsConfigDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p promotionsConfigDo) Delete(models ...*model.PromotionsConfig) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *promotionsConfigDo) withDO(do gen.Dao) *promotionsConfigDo {
	p.DO = *do.(*gen.DO)
	return p
}
