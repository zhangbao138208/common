// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gitlab.skig.tech/zero-core/common/zorm/model"
)

func newGameType(db *gorm.DB, opts ...gen.DOOption) gameType {
	_gameType := gameType{}

	_gameType.gameTypeDo.UseDB(db, opts...)
	_gameType.gameTypeDo.UseModel(&model.GameType{})

	tableName := _gameType.gameTypeDo.TableName()
	_gameType.ALL = field.NewAsterisk(tableName)
	_gameType.ID = field.NewInt64(tableName, "id")
	_gameType.Name = field.NewString(tableName, "name")
	_gameType.Status = field.NewInt64(tableName, "status")
	_gameType.CreatedAt = field.NewInt64(tableName, "created_at")
	_gameType.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_gameType.CreatedBy = field.NewString(tableName, "created_by")
	_gameType.UpdatedBy = field.NewString(tableName, "updated_by")

	_gameType.fillFieldMap()

	return _gameType
}

type gameType struct {
	gameTypeDo

	ALL       field.Asterisk
	ID        field.Int64  // 类型:1-体育 2-电子 3-真人 4-捕鱼 5-棋牌 6-电竞 7-彩票 8-动物 9-快速 10-技能 11-table game
	Name      field.String // 自定类型名称
	Status    field.Int64  // 状态: 1-启用 0-停用
	CreatedAt field.Int64
	UpdatedAt field.Int64
	CreatedBy field.String // 操作人姓名
	UpdatedBy field.String // 最后更新人

	fieldMap map[string]field.Expr
}

func (g gameType) Table(newTableName string) *gameType {
	g.gameTypeDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g gameType) As(alias string) *gameType {
	g.gameTypeDo.DO = *(g.gameTypeDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *gameType) updateTableName(table string) *gameType {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewInt64(table, "id")
	g.Name = field.NewString(table, "name")
	g.Status = field.NewInt64(table, "status")
	g.CreatedAt = field.NewInt64(table, "created_at")
	g.UpdatedAt = field.NewInt64(table, "updated_at")
	g.CreatedBy = field.NewString(table, "created_by")
	g.UpdatedBy = field.NewString(table, "updated_by")

	g.fillFieldMap()

	return g
}

func (g *gameType) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *gameType) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 7)
	g.fieldMap["id"] = g.ID
	g.fieldMap["name"] = g.Name
	g.fieldMap["status"] = g.Status
	g.fieldMap["created_at"] = g.CreatedAt
	g.fieldMap["updated_at"] = g.UpdatedAt
	g.fieldMap["created_by"] = g.CreatedBy
	g.fieldMap["updated_by"] = g.UpdatedBy
}

func (g gameType) clone(db *gorm.DB) gameType {
	g.gameTypeDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g gameType) replaceDB(db *gorm.DB) gameType {
	g.gameTypeDo.ReplaceDB(db)
	return g
}

type gameTypeDo struct{ gen.DO }

type IGameTypeDo interface {
	gen.SubQuery
	Debug() IGameTypeDo
	WithContext(ctx context.Context) IGameTypeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGameTypeDo
	WriteDB() IGameTypeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGameTypeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGameTypeDo
	Not(conds ...gen.Condition) IGameTypeDo
	Or(conds ...gen.Condition) IGameTypeDo
	Select(conds ...field.Expr) IGameTypeDo
	Where(conds ...gen.Condition) IGameTypeDo
	Order(conds ...field.Expr) IGameTypeDo
	Distinct(cols ...field.Expr) IGameTypeDo
	Omit(cols ...field.Expr) IGameTypeDo
	Join(table schema.Tabler, on ...field.Expr) IGameTypeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGameTypeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGameTypeDo
	Group(cols ...field.Expr) IGameTypeDo
	Having(conds ...gen.Condition) IGameTypeDo
	Limit(limit int) IGameTypeDo
	Offset(offset int) IGameTypeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGameTypeDo
	Unscoped() IGameTypeDo
	Create(values ...*model.GameType) error
	CreateInBatches(values []*model.GameType, batchSize int) error
	Save(values ...*model.GameType) error
	First() (*model.GameType, error)
	Take() (*model.GameType, error)
	Last() (*model.GameType, error)
	Find() ([]*model.GameType, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GameType, err error)
	FindInBatches(result *[]*model.GameType, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GameType) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGameTypeDo
	Assign(attrs ...field.AssignExpr) IGameTypeDo
	Joins(fields ...field.RelationField) IGameTypeDo
	Preload(fields ...field.RelationField) IGameTypeDo
	FirstOrInit() (*model.GameType, error)
	FirstOrCreate() (*model.GameType, error)
	FindByPage(offset int, limit int) (result []*model.GameType, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGameTypeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g gameTypeDo) Debug() IGameTypeDo {
	return g.withDO(g.DO.Debug())
}

func (g gameTypeDo) WithContext(ctx context.Context) IGameTypeDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g gameTypeDo) ReadDB() IGameTypeDo {
	return g.Clauses(dbresolver.Read)
}

func (g gameTypeDo) WriteDB() IGameTypeDo {
	return g.Clauses(dbresolver.Write)
}

func (g gameTypeDo) Session(config *gorm.Session) IGameTypeDo {
	return g.withDO(g.DO.Session(config))
}

func (g gameTypeDo) Clauses(conds ...clause.Expression) IGameTypeDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g gameTypeDo) Returning(value interface{}, columns ...string) IGameTypeDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g gameTypeDo) Not(conds ...gen.Condition) IGameTypeDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g gameTypeDo) Or(conds ...gen.Condition) IGameTypeDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g gameTypeDo) Select(conds ...field.Expr) IGameTypeDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g gameTypeDo) Where(conds ...gen.Condition) IGameTypeDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g gameTypeDo) Order(conds ...field.Expr) IGameTypeDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g gameTypeDo) Distinct(cols ...field.Expr) IGameTypeDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g gameTypeDo) Omit(cols ...field.Expr) IGameTypeDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g gameTypeDo) Join(table schema.Tabler, on ...field.Expr) IGameTypeDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g gameTypeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGameTypeDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g gameTypeDo) RightJoin(table schema.Tabler, on ...field.Expr) IGameTypeDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g gameTypeDo) Group(cols ...field.Expr) IGameTypeDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g gameTypeDo) Having(conds ...gen.Condition) IGameTypeDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g gameTypeDo) Limit(limit int) IGameTypeDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g gameTypeDo) Offset(offset int) IGameTypeDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g gameTypeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGameTypeDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g gameTypeDo) Unscoped() IGameTypeDo {
	return g.withDO(g.DO.Unscoped())
}

func (g gameTypeDo) Create(values ...*model.GameType) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g gameTypeDo) CreateInBatches(values []*model.GameType, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g gameTypeDo) Save(values ...*model.GameType) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g gameTypeDo) First() (*model.GameType, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GameType), nil
	}
}

func (g gameTypeDo) Take() (*model.GameType, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GameType), nil
	}
}

func (g gameTypeDo) Last() (*model.GameType, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GameType), nil
	}
}

func (g gameTypeDo) Find() ([]*model.GameType, error) {
	result, err := g.DO.Find()
	return result.([]*model.GameType), err
}

func (g gameTypeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GameType, err error) {
	buf := make([]*model.GameType, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g gameTypeDo) FindInBatches(result *[]*model.GameType, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g gameTypeDo) Attrs(attrs ...field.AssignExpr) IGameTypeDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g gameTypeDo) Assign(attrs ...field.AssignExpr) IGameTypeDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g gameTypeDo) Joins(fields ...field.RelationField) IGameTypeDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g gameTypeDo) Preload(fields ...field.RelationField) IGameTypeDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g gameTypeDo) FirstOrInit() (*model.GameType, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GameType), nil
	}
}

func (g gameTypeDo) FirstOrCreate() (*model.GameType, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GameType), nil
	}
}

func (g gameTypeDo) FindByPage(offset int, limit int) (result []*model.GameType, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g gameTypeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g gameTypeDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g gameTypeDo) Delete(models ...*model.GameType) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *gameTypeDo) withDO(do gen.Dao) *gameTypeDo {
	g.DO = *do.(*gen.DO)
	return g
}
