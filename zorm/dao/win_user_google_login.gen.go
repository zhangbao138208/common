// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gitlab.skig.tech/zero-core/common/zorm/model"
)

func newWinUserGoogleLogin(db *gorm.DB, opts ...gen.DOOption) winUserGoogleLogin {
	_winUserGoogleLogin := winUserGoogleLogin{}

	_winUserGoogleLogin.winUserGoogleLoginDo.UseDB(db, opts...)
	_winUserGoogleLogin.winUserGoogleLoginDo.UseModel(&model.WinUserGoogleLogin{})

	tableName := _winUserGoogleLogin.winUserGoogleLoginDo.TableName()
	_winUserGoogleLogin.ALL = field.NewAsterisk(tableName)
	_winUserGoogleLogin.ID = field.NewInt64(tableName, "id")
	_winUserGoogleLogin.UserID = field.NewInt64(tableName, "user_id")
	_winUserGoogleLogin.Username = field.NewString(tableName, "username")
	_winUserGoogleLogin.GoogleLoginEmail = field.NewString(tableName, "google_login_email")
	_winUserGoogleLogin.CreatedAt = field.NewInt64(tableName, "created_at")

	_winUserGoogleLogin.fillFieldMap()

	return _winUserGoogleLogin
}

type winUserGoogleLogin struct {
	winUserGoogleLoginDo

	ALL              field.Asterisk
	ID               field.Int64  // 主键
	UserID           field.Int64  // 客户表ID
	Username         field.String // 用户名
	GoogleLoginEmail field.String // 谷歌登陆邮箱
	CreatedAt        field.Int64  // 创建时间

	fieldMap map[string]field.Expr
}

func (w winUserGoogleLogin) Table(newTableName string) *winUserGoogleLogin {
	w.winUserGoogleLoginDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w winUserGoogleLogin) As(alias string) *winUserGoogleLogin {
	w.winUserGoogleLoginDo.DO = *(w.winUserGoogleLoginDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *winUserGoogleLogin) updateTableName(table string) *winUserGoogleLogin {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt64(table, "id")
	w.UserID = field.NewInt64(table, "user_id")
	w.Username = field.NewString(table, "username")
	w.GoogleLoginEmail = field.NewString(table, "google_login_email")
	w.CreatedAt = field.NewInt64(table, "created_at")

	w.fillFieldMap()

	return w
}

func (w *winUserGoogleLogin) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *winUserGoogleLogin) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 5)
	w.fieldMap["id"] = w.ID
	w.fieldMap["user_id"] = w.UserID
	w.fieldMap["username"] = w.Username
	w.fieldMap["google_login_email"] = w.GoogleLoginEmail
	w.fieldMap["created_at"] = w.CreatedAt
}

func (w winUserGoogleLogin) clone(db *gorm.DB) winUserGoogleLogin {
	w.winUserGoogleLoginDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w winUserGoogleLogin) replaceDB(db *gorm.DB) winUserGoogleLogin {
	w.winUserGoogleLoginDo.ReplaceDB(db)
	return w
}

type winUserGoogleLoginDo struct{ gen.DO }

type IWinUserGoogleLoginDo interface {
	gen.SubQuery
	Debug() IWinUserGoogleLoginDo
	WithContext(ctx context.Context) IWinUserGoogleLoginDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWinUserGoogleLoginDo
	WriteDB() IWinUserGoogleLoginDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWinUserGoogleLoginDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWinUserGoogleLoginDo
	Not(conds ...gen.Condition) IWinUserGoogleLoginDo
	Or(conds ...gen.Condition) IWinUserGoogleLoginDo
	Select(conds ...field.Expr) IWinUserGoogleLoginDo
	Where(conds ...gen.Condition) IWinUserGoogleLoginDo
	Order(conds ...field.Expr) IWinUserGoogleLoginDo
	Distinct(cols ...field.Expr) IWinUserGoogleLoginDo
	Omit(cols ...field.Expr) IWinUserGoogleLoginDo
	Join(table schema.Tabler, on ...field.Expr) IWinUserGoogleLoginDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWinUserGoogleLoginDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWinUserGoogleLoginDo
	Group(cols ...field.Expr) IWinUserGoogleLoginDo
	Having(conds ...gen.Condition) IWinUserGoogleLoginDo
	Limit(limit int) IWinUserGoogleLoginDo
	Offset(offset int) IWinUserGoogleLoginDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWinUserGoogleLoginDo
	Unscoped() IWinUserGoogleLoginDo
	Create(values ...*model.WinUserGoogleLogin) error
	CreateInBatches(values []*model.WinUserGoogleLogin, batchSize int) error
	Save(values ...*model.WinUserGoogleLogin) error
	First() (*model.WinUserGoogleLogin, error)
	Take() (*model.WinUserGoogleLogin, error)
	Last() (*model.WinUserGoogleLogin, error)
	Find() ([]*model.WinUserGoogleLogin, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinUserGoogleLogin, err error)
	FindInBatches(result *[]*model.WinUserGoogleLogin, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WinUserGoogleLogin) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWinUserGoogleLoginDo
	Assign(attrs ...field.AssignExpr) IWinUserGoogleLoginDo
	Joins(fields ...field.RelationField) IWinUserGoogleLoginDo
	Preload(fields ...field.RelationField) IWinUserGoogleLoginDo
	FirstOrInit() (*model.WinUserGoogleLogin, error)
	FirstOrCreate() (*model.WinUserGoogleLogin, error)
	FindByPage(offset int, limit int) (result []*model.WinUserGoogleLogin, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWinUserGoogleLoginDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w winUserGoogleLoginDo) Debug() IWinUserGoogleLoginDo {
	return w.withDO(w.DO.Debug())
}

func (w winUserGoogleLoginDo) WithContext(ctx context.Context) IWinUserGoogleLoginDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w winUserGoogleLoginDo) ReadDB() IWinUserGoogleLoginDo {
	return w.Clauses(dbresolver.Read)
}

func (w winUserGoogleLoginDo) WriteDB() IWinUserGoogleLoginDo {
	return w.Clauses(dbresolver.Write)
}

func (w winUserGoogleLoginDo) Session(config *gorm.Session) IWinUserGoogleLoginDo {
	return w.withDO(w.DO.Session(config))
}

func (w winUserGoogleLoginDo) Clauses(conds ...clause.Expression) IWinUserGoogleLoginDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w winUserGoogleLoginDo) Returning(value interface{}, columns ...string) IWinUserGoogleLoginDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w winUserGoogleLoginDo) Not(conds ...gen.Condition) IWinUserGoogleLoginDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w winUserGoogleLoginDo) Or(conds ...gen.Condition) IWinUserGoogleLoginDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w winUserGoogleLoginDo) Select(conds ...field.Expr) IWinUserGoogleLoginDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w winUserGoogleLoginDo) Where(conds ...gen.Condition) IWinUserGoogleLoginDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w winUserGoogleLoginDo) Order(conds ...field.Expr) IWinUserGoogleLoginDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w winUserGoogleLoginDo) Distinct(cols ...field.Expr) IWinUserGoogleLoginDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w winUserGoogleLoginDo) Omit(cols ...field.Expr) IWinUserGoogleLoginDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w winUserGoogleLoginDo) Join(table schema.Tabler, on ...field.Expr) IWinUserGoogleLoginDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w winUserGoogleLoginDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWinUserGoogleLoginDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w winUserGoogleLoginDo) RightJoin(table schema.Tabler, on ...field.Expr) IWinUserGoogleLoginDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w winUserGoogleLoginDo) Group(cols ...field.Expr) IWinUserGoogleLoginDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w winUserGoogleLoginDo) Having(conds ...gen.Condition) IWinUserGoogleLoginDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w winUserGoogleLoginDo) Limit(limit int) IWinUserGoogleLoginDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w winUserGoogleLoginDo) Offset(offset int) IWinUserGoogleLoginDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w winUserGoogleLoginDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWinUserGoogleLoginDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w winUserGoogleLoginDo) Unscoped() IWinUserGoogleLoginDo {
	return w.withDO(w.DO.Unscoped())
}

func (w winUserGoogleLoginDo) Create(values ...*model.WinUserGoogleLogin) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w winUserGoogleLoginDo) CreateInBatches(values []*model.WinUserGoogleLogin, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w winUserGoogleLoginDo) Save(values ...*model.WinUserGoogleLogin) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w winUserGoogleLoginDo) First() (*model.WinUserGoogleLogin, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinUserGoogleLogin), nil
	}
}

func (w winUserGoogleLoginDo) Take() (*model.WinUserGoogleLogin, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinUserGoogleLogin), nil
	}
}

func (w winUserGoogleLoginDo) Last() (*model.WinUserGoogleLogin, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinUserGoogleLogin), nil
	}
}

func (w winUserGoogleLoginDo) Find() ([]*model.WinUserGoogleLogin, error) {
	result, err := w.DO.Find()
	return result.([]*model.WinUserGoogleLogin), err
}

func (w winUserGoogleLoginDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinUserGoogleLogin, err error) {
	buf := make([]*model.WinUserGoogleLogin, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w winUserGoogleLoginDo) FindInBatches(result *[]*model.WinUserGoogleLogin, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w winUserGoogleLoginDo) Attrs(attrs ...field.AssignExpr) IWinUserGoogleLoginDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w winUserGoogleLoginDo) Assign(attrs ...field.AssignExpr) IWinUserGoogleLoginDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w winUserGoogleLoginDo) Joins(fields ...field.RelationField) IWinUserGoogleLoginDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w winUserGoogleLoginDo) Preload(fields ...field.RelationField) IWinUserGoogleLoginDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w winUserGoogleLoginDo) FirstOrInit() (*model.WinUserGoogleLogin, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinUserGoogleLogin), nil
	}
}

func (w winUserGoogleLoginDo) FirstOrCreate() (*model.WinUserGoogleLogin, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinUserGoogleLogin), nil
	}
}

func (w winUserGoogleLoginDo) FindByPage(offset int, limit int) (result []*model.WinUserGoogleLogin, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w winUserGoogleLoginDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w winUserGoogleLoginDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w winUserGoogleLoginDo) Delete(models ...*model.WinUserGoogleLogin) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *winUserGoogleLoginDo) withDO(do gen.Dao) *winUserGoogleLoginDo {
	w.DO = *do.(*gen.DO)
	return w
}
