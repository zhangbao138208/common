// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gitlab.skig.tech/zero-core/common/zorm/model"
)

func newXxlJobRegistry(db *gorm.DB, opts ...gen.DOOption) xxlJobRegistry {
	_xxlJobRegistry := xxlJobRegistry{}

	_xxlJobRegistry.xxlJobRegistryDo.UseDB(db, opts...)
	_xxlJobRegistry.xxlJobRegistryDo.UseModel(&model.XxlJobRegistry{})

	tableName := _xxlJobRegistry.xxlJobRegistryDo.TableName()
	_xxlJobRegistry.ALL = field.NewAsterisk(tableName)
	_xxlJobRegistry.ID = field.NewInt64(tableName, "id")
	_xxlJobRegistry.RegistryGroup = field.NewString(tableName, "registry_group")
	_xxlJobRegistry.RegistryKey = field.NewString(tableName, "registry_key")
	_xxlJobRegistry.RegistryValue = field.NewString(tableName, "registry_value")
	_xxlJobRegistry.UpdateTime = field.NewTime(tableName, "update_time")

	_xxlJobRegistry.fillFieldMap()

	return _xxlJobRegistry
}

type xxlJobRegistry struct {
	xxlJobRegistryDo

	ALL           field.Asterisk
	ID            field.Int64
	RegistryGroup field.String
	RegistryKey   field.String
	RegistryValue field.String
	UpdateTime    field.Time

	fieldMap map[string]field.Expr
}

func (x xxlJobRegistry) Table(newTableName string) *xxlJobRegistry {
	x.xxlJobRegistryDo.UseTable(newTableName)
	return x.updateTableName(newTableName)
}

func (x xxlJobRegistry) As(alias string) *xxlJobRegistry {
	x.xxlJobRegistryDo.DO = *(x.xxlJobRegistryDo.As(alias).(*gen.DO))
	return x.updateTableName(alias)
}

func (x *xxlJobRegistry) updateTableName(table string) *xxlJobRegistry {
	x.ALL = field.NewAsterisk(table)
	x.ID = field.NewInt64(table, "id")
	x.RegistryGroup = field.NewString(table, "registry_group")
	x.RegistryKey = field.NewString(table, "registry_key")
	x.RegistryValue = field.NewString(table, "registry_value")
	x.UpdateTime = field.NewTime(table, "update_time")

	x.fillFieldMap()

	return x
}

func (x *xxlJobRegistry) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := x.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (x *xxlJobRegistry) fillFieldMap() {
	x.fieldMap = make(map[string]field.Expr, 5)
	x.fieldMap["id"] = x.ID
	x.fieldMap["registry_group"] = x.RegistryGroup
	x.fieldMap["registry_key"] = x.RegistryKey
	x.fieldMap["registry_value"] = x.RegistryValue
	x.fieldMap["update_time"] = x.UpdateTime
}

func (x xxlJobRegistry) clone(db *gorm.DB) xxlJobRegistry {
	x.xxlJobRegistryDo.ReplaceConnPool(db.Statement.ConnPool)
	return x
}

func (x xxlJobRegistry) replaceDB(db *gorm.DB) xxlJobRegistry {
	x.xxlJobRegistryDo.ReplaceDB(db)
	return x
}

type xxlJobRegistryDo struct{ gen.DO }

type IXxlJobRegistryDo interface {
	gen.SubQuery
	Debug() IXxlJobRegistryDo
	WithContext(ctx context.Context) IXxlJobRegistryDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IXxlJobRegistryDo
	WriteDB() IXxlJobRegistryDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IXxlJobRegistryDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IXxlJobRegistryDo
	Not(conds ...gen.Condition) IXxlJobRegistryDo
	Or(conds ...gen.Condition) IXxlJobRegistryDo
	Select(conds ...field.Expr) IXxlJobRegistryDo
	Where(conds ...gen.Condition) IXxlJobRegistryDo
	Order(conds ...field.Expr) IXxlJobRegistryDo
	Distinct(cols ...field.Expr) IXxlJobRegistryDo
	Omit(cols ...field.Expr) IXxlJobRegistryDo
	Join(table schema.Tabler, on ...field.Expr) IXxlJobRegistryDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IXxlJobRegistryDo
	RightJoin(table schema.Tabler, on ...field.Expr) IXxlJobRegistryDo
	Group(cols ...field.Expr) IXxlJobRegistryDo
	Having(conds ...gen.Condition) IXxlJobRegistryDo
	Limit(limit int) IXxlJobRegistryDo
	Offset(offset int) IXxlJobRegistryDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IXxlJobRegistryDo
	Unscoped() IXxlJobRegistryDo
	Create(values ...*model.XxlJobRegistry) error
	CreateInBatches(values []*model.XxlJobRegistry, batchSize int) error
	Save(values ...*model.XxlJobRegistry) error
	First() (*model.XxlJobRegistry, error)
	Take() (*model.XxlJobRegistry, error)
	Last() (*model.XxlJobRegistry, error)
	Find() ([]*model.XxlJobRegistry, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.XxlJobRegistry, err error)
	FindInBatches(result *[]*model.XxlJobRegistry, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.XxlJobRegistry) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IXxlJobRegistryDo
	Assign(attrs ...field.AssignExpr) IXxlJobRegistryDo
	Joins(fields ...field.RelationField) IXxlJobRegistryDo
	Preload(fields ...field.RelationField) IXxlJobRegistryDo
	FirstOrInit() (*model.XxlJobRegistry, error)
	FirstOrCreate() (*model.XxlJobRegistry, error)
	FindByPage(offset int, limit int) (result []*model.XxlJobRegistry, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IXxlJobRegistryDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (x xxlJobRegistryDo) Debug() IXxlJobRegistryDo {
	return x.withDO(x.DO.Debug())
}

func (x xxlJobRegistryDo) WithContext(ctx context.Context) IXxlJobRegistryDo {
	return x.withDO(x.DO.WithContext(ctx))
}

func (x xxlJobRegistryDo) ReadDB() IXxlJobRegistryDo {
	return x.Clauses(dbresolver.Read)
}

func (x xxlJobRegistryDo) WriteDB() IXxlJobRegistryDo {
	return x.Clauses(dbresolver.Write)
}

func (x xxlJobRegistryDo) Session(config *gorm.Session) IXxlJobRegistryDo {
	return x.withDO(x.DO.Session(config))
}

func (x xxlJobRegistryDo) Clauses(conds ...clause.Expression) IXxlJobRegistryDo {
	return x.withDO(x.DO.Clauses(conds...))
}

func (x xxlJobRegistryDo) Returning(value interface{}, columns ...string) IXxlJobRegistryDo {
	return x.withDO(x.DO.Returning(value, columns...))
}

func (x xxlJobRegistryDo) Not(conds ...gen.Condition) IXxlJobRegistryDo {
	return x.withDO(x.DO.Not(conds...))
}

func (x xxlJobRegistryDo) Or(conds ...gen.Condition) IXxlJobRegistryDo {
	return x.withDO(x.DO.Or(conds...))
}

func (x xxlJobRegistryDo) Select(conds ...field.Expr) IXxlJobRegistryDo {
	return x.withDO(x.DO.Select(conds...))
}

func (x xxlJobRegistryDo) Where(conds ...gen.Condition) IXxlJobRegistryDo {
	return x.withDO(x.DO.Where(conds...))
}

func (x xxlJobRegistryDo) Order(conds ...field.Expr) IXxlJobRegistryDo {
	return x.withDO(x.DO.Order(conds...))
}

func (x xxlJobRegistryDo) Distinct(cols ...field.Expr) IXxlJobRegistryDo {
	return x.withDO(x.DO.Distinct(cols...))
}

func (x xxlJobRegistryDo) Omit(cols ...field.Expr) IXxlJobRegistryDo {
	return x.withDO(x.DO.Omit(cols...))
}

func (x xxlJobRegistryDo) Join(table schema.Tabler, on ...field.Expr) IXxlJobRegistryDo {
	return x.withDO(x.DO.Join(table, on...))
}

func (x xxlJobRegistryDo) LeftJoin(table schema.Tabler, on ...field.Expr) IXxlJobRegistryDo {
	return x.withDO(x.DO.LeftJoin(table, on...))
}

func (x xxlJobRegistryDo) RightJoin(table schema.Tabler, on ...field.Expr) IXxlJobRegistryDo {
	return x.withDO(x.DO.RightJoin(table, on...))
}

func (x xxlJobRegistryDo) Group(cols ...field.Expr) IXxlJobRegistryDo {
	return x.withDO(x.DO.Group(cols...))
}

func (x xxlJobRegistryDo) Having(conds ...gen.Condition) IXxlJobRegistryDo {
	return x.withDO(x.DO.Having(conds...))
}

func (x xxlJobRegistryDo) Limit(limit int) IXxlJobRegistryDo {
	return x.withDO(x.DO.Limit(limit))
}

func (x xxlJobRegistryDo) Offset(offset int) IXxlJobRegistryDo {
	return x.withDO(x.DO.Offset(offset))
}

func (x xxlJobRegistryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IXxlJobRegistryDo {
	return x.withDO(x.DO.Scopes(funcs...))
}

func (x xxlJobRegistryDo) Unscoped() IXxlJobRegistryDo {
	return x.withDO(x.DO.Unscoped())
}

func (x xxlJobRegistryDo) Create(values ...*model.XxlJobRegistry) error {
	if len(values) == 0 {
		return nil
	}
	return x.DO.Create(values)
}

func (x xxlJobRegistryDo) CreateInBatches(values []*model.XxlJobRegistry, batchSize int) error {
	return x.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (x xxlJobRegistryDo) Save(values ...*model.XxlJobRegistry) error {
	if len(values) == 0 {
		return nil
	}
	return x.DO.Save(values)
}

func (x xxlJobRegistryDo) First() (*model.XxlJobRegistry, error) {
	if result, err := x.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.XxlJobRegistry), nil
	}
}

func (x xxlJobRegistryDo) Take() (*model.XxlJobRegistry, error) {
	if result, err := x.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.XxlJobRegistry), nil
	}
}

func (x xxlJobRegistryDo) Last() (*model.XxlJobRegistry, error) {
	if result, err := x.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.XxlJobRegistry), nil
	}
}

func (x xxlJobRegistryDo) Find() ([]*model.XxlJobRegistry, error) {
	result, err := x.DO.Find()
	return result.([]*model.XxlJobRegistry), err
}

func (x xxlJobRegistryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.XxlJobRegistry, err error) {
	buf := make([]*model.XxlJobRegistry, 0, batchSize)
	err = x.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (x xxlJobRegistryDo) FindInBatches(result *[]*model.XxlJobRegistry, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return x.DO.FindInBatches(result, batchSize, fc)
}

func (x xxlJobRegistryDo) Attrs(attrs ...field.AssignExpr) IXxlJobRegistryDo {
	return x.withDO(x.DO.Attrs(attrs...))
}

func (x xxlJobRegistryDo) Assign(attrs ...field.AssignExpr) IXxlJobRegistryDo {
	return x.withDO(x.DO.Assign(attrs...))
}

func (x xxlJobRegistryDo) Joins(fields ...field.RelationField) IXxlJobRegistryDo {
	for _, _f := range fields {
		x = *x.withDO(x.DO.Joins(_f))
	}
	return &x
}

func (x xxlJobRegistryDo) Preload(fields ...field.RelationField) IXxlJobRegistryDo {
	for _, _f := range fields {
		x = *x.withDO(x.DO.Preload(_f))
	}
	return &x
}

func (x xxlJobRegistryDo) FirstOrInit() (*model.XxlJobRegistry, error) {
	if result, err := x.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.XxlJobRegistry), nil
	}
}

func (x xxlJobRegistryDo) FirstOrCreate() (*model.XxlJobRegistry, error) {
	if result, err := x.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.XxlJobRegistry), nil
	}
}

func (x xxlJobRegistryDo) FindByPage(offset int, limit int) (result []*model.XxlJobRegistry, count int64, err error) {
	result, err = x.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = x.Offset(-1).Limit(-1).Count()
	return
}

func (x xxlJobRegistryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = x.Count()
	if err != nil {
		return
	}

	err = x.Offset(offset).Limit(limit).Scan(result)
	return
}

func (x xxlJobRegistryDo) Scan(result interface{}) (err error) {
	return x.DO.Scan(result)
}

func (x xxlJobRegistryDo) Delete(models ...*model.XxlJobRegistry) (result gen.ResultInfo, err error) {
	return x.DO.Delete(models)
}

func (x *xxlJobRegistryDo) withDO(do gen.Dao) *xxlJobRegistryDo {
	x.DO = *do.(*gen.DO)
	return x
}
