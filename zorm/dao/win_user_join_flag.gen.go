// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gitlab.skig.tech/zero-core/common/zorm/model"
)

func newWinUserJoinFlag(db *gorm.DB, opts ...gen.DOOption) winUserJoinFlag {
	_winUserJoinFlag := winUserJoinFlag{}

	_winUserJoinFlag.winUserJoinFlagDo.UseDB(db, opts...)
	_winUserJoinFlag.winUserJoinFlagDo.UseModel(&model.WinUserJoinFlag{})

	tableName := _winUserJoinFlag.winUserJoinFlagDo.TableName()
	_winUserJoinFlag.ALL = field.NewAsterisk(tableName)
	_winUserJoinFlag.ID = field.NewInt64(tableName, "id")
	_winUserJoinFlag.FlagID = field.NewInt64(tableName, "flag_id")
	_winUserJoinFlag.UID = field.NewInt64(tableName, "uid")
	_winUserJoinFlag.CreatedAt = field.NewInt64(tableName, "created_at")

	_winUserJoinFlag.fillFieldMap()

	return _winUserJoinFlag
}

type winUserJoinFlag struct {
	winUserJoinFlagDo

	ALL       field.Asterisk
	ID        field.Int64
	FlagID    field.Int64 // 会员旗id
	UID       field.Int64 // 用户uid
	CreatedAt field.Int64

	fieldMap map[string]field.Expr
}

func (w winUserJoinFlag) Table(newTableName string) *winUserJoinFlag {
	w.winUserJoinFlagDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w winUserJoinFlag) As(alias string) *winUserJoinFlag {
	w.winUserJoinFlagDo.DO = *(w.winUserJoinFlagDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *winUserJoinFlag) updateTableName(table string) *winUserJoinFlag {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt64(table, "id")
	w.FlagID = field.NewInt64(table, "flag_id")
	w.UID = field.NewInt64(table, "uid")
	w.CreatedAt = field.NewInt64(table, "created_at")

	w.fillFieldMap()

	return w
}

func (w *winUserJoinFlag) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *winUserJoinFlag) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 4)
	w.fieldMap["id"] = w.ID
	w.fieldMap["flag_id"] = w.FlagID
	w.fieldMap["uid"] = w.UID
	w.fieldMap["created_at"] = w.CreatedAt
}

func (w winUserJoinFlag) clone(db *gorm.DB) winUserJoinFlag {
	w.winUserJoinFlagDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w winUserJoinFlag) replaceDB(db *gorm.DB) winUserJoinFlag {
	w.winUserJoinFlagDo.ReplaceDB(db)
	return w
}

type winUserJoinFlagDo struct{ gen.DO }

type IWinUserJoinFlagDo interface {
	gen.SubQuery
	Debug() IWinUserJoinFlagDo
	WithContext(ctx context.Context) IWinUserJoinFlagDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWinUserJoinFlagDo
	WriteDB() IWinUserJoinFlagDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWinUserJoinFlagDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWinUserJoinFlagDo
	Not(conds ...gen.Condition) IWinUserJoinFlagDo
	Or(conds ...gen.Condition) IWinUserJoinFlagDo
	Select(conds ...field.Expr) IWinUserJoinFlagDo
	Where(conds ...gen.Condition) IWinUserJoinFlagDo
	Order(conds ...field.Expr) IWinUserJoinFlagDo
	Distinct(cols ...field.Expr) IWinUserJoinFlagDo
	Omit(cols ...field.Expr) IWinUserJoinFlagDo
	Join(table schema.Tabler, on ...field.Expr) IWinUserJoinFlagDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWinUserJoinFlagDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWinUserJoinFlagDo
	Group(cols ...field.Expr) IWinUserJoinFlagDo
	Having(conds ...gen.Condition) IWinUserJoinFlagDo
	Limit(limit int) IWinUserJoinFlagDo
	Offset(offset int) IWinUserJoinFlagDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWinUserJoinFlagDo
	Unscoped() IWinUserJoinFlagDo
	Create(values ...*model.WinUserJoinFlag) error
	CreateInBatches(values []*model.WinUserJoinFlag, batchSize int) error
	Save(values ...*model.WinUserJoinFlag) error
	First() (*model.WinUserJoinFlag, error)
	Take() (*model.WinUserJoinFlag, error)
	Last() (*model.WinUserJoinFlag, error)
	Find() ([]*model.WinUserJoinFlag, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinUserJoinFlag, err error)
	FindInBatches(result *[]*model.WinUserJoinFlag, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WinUserJoinFlag) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWinUserJoinFlagDo
	Assign(attrs ...field.AssignExpr) IWinUserJoinFlagDo
	Joins(fields ...field.RelationField) IWinUserJoinFlagDo
	Preload(fields ...field.RelationField) IWinUserJoinFlagDo
	FirstOrInit() (*model.WinUserJoinFlag, error)
	FirstOrCreate() (*model.WinUserJoinFlag, error)
	FindByPage(offset int, limit int) (result []*model.WinUserJoinFlag, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWinUserJoinFlagDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w winUserJoinFlagDo) Debug() IWinUserJoinFlagDo {
	return w.withDO(w.DO.Debug())
}

func (w winUserJoinFlagDo) WithContext(ctx context.Context) IWinUserJoinFlagDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w winUserJoinFlagDo) ReadDB() IWinUserJoinFlagDo {
	return w.Clauses(dbresolver.Read)
}

func (w winUserJoinFlagDo) WriteDB() IWinUserJoinFlagDo {
	return w.Clauses(dbresolver.Write)
}

func (w winUserJoinFlagDo) Session(config *gorm.Session) IWinUserJoinFlagDo {
	return w.withDO(w.DO.Session(config))
}

func (w winUserJoinFlagDo) Clauses(conds ...clause.Expression) IWinUserJoinFlagDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w winUserJoinFlagDo) Returning(value interface{}, columns ...string) IWinUserJoinFlagDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w winUserJoinFlagDo) Not(conds ...gen.Condition) IWinUserJoinFlagDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w winUserJoinFlagDo) Or(conds ...gen.Condition) IWinUserJoinFlagDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w winUserJoinFlagDo) Select(conds ...field.Expr) IWinUserJoinFlagDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w winUserJoinFlagDo) Where(conds ...gen.Condition) IWinUserJoinFlagDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w winUserJoinFlagDo) Order(conds ...field.Expr) IWinUserJoinFlagDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w winUserJoinFlagDo) Distinct(cols ...field.Expr) IWinUserJoinFlagDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w winUserJoinFlagDo) Omit(cols ...field.Expr) IWinUserJoinFlagDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w winUserJoinFlagDo) Join(table schema.Tabler, on ...field.Expr) IWinUserJoinFlagDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w winUserJoinFlagDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWinUserJoinFlagDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w winUserJoinFlagDo) RightJoin(table schema.Tabler, on ...field.Expr) IWinUserJoinFlagDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w winUserJoinFlagDo) Group(cols ...field.Expr) IWinUserJoinFlagDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w winUserJoinFlagDo) Having(conds ...gen.Condition) IWinUserJoinFlagDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w winUserJoinFlagDo) Limit(limit int) IWinUserJoinFlagDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w winUserJoinFlagDo) Offset(offset int) IWinUserJoinFlagDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w winUserJoinFlagDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWinUserJoinFlagDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w winUserJoinFlagDo) Unscoped() IWinUserJoinFlagDo {
	return w.withDO(w.DO.Unscoped())
}

func (w winUserJoinFlagDo) Create(values ...*model.WinUserJoinFlag) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w winUserJoinFlagDo) CreateInBatches(values []*model.WinUserJoinFlag, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w winUserJoinFlagDo) Save(values ...*model.WinUserJoinFlag) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w winUserJoinFlagDo) First() (*model.WinUserJoinFlag, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinUserJoinFlag), nil
	}
}

func (w winUserJoinFlagDo) Take() (*model.WinUserJoinFlag, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinUserJoinFlag), nil
	}
}

func (w winUserJoinFlagDo) Last() (*model.WinUserJoinFlag, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinUserJoinFlag), nil
	}
}

func (w winUserJoinFlagDo) Find() ([]*model.WinUserJoinFlag, error) {
	result, err := w.DO.Find()
	return result.([]*model.WinUserJoinFlag), err
}

func (w winUserJoinFlagDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinUserJoinFlag, err error) {
	buf := make([]*model.WinUserJoinFlag, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w winUserJoinFlagDo) FindInBatches(result *[]*model.WinUserJoinFlag, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w winUserJoinFlagDo) Attrs(attrs ...field.AssignExpr) IWinUserJoinFlagDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w winUserJoinFlagDo) Assign(attrs ...field.AssignExpr) IWinUserJoinFlagDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w winUserJoinFlagDo) Joins(fields ...field.RelationField) IWinUserJoinFlagDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w winUserJoinFlagDo) Preload(fields ...field.RelationField) IWinUserJoinFlagDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w winUserJoinFlagDo) FirstOrInit() (*model.WinUserJoinFlag, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinUserJoinFlag), nil
	}
}

func (w winUserJoinFlagDo) FirstOrCreate() (*model.WinUserJoinFlag, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinUserJoinFlag), nil
	}
}

func (w winUserJoinFlagDo) FindByPage(offset int, limit int) (result []*model.WinUserJoinFlag, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w winUserJoinFlagDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w winUserJoinFlagDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w winUserJoinFlagDo) Delete(models ...*model.WinUserJoinFlag) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *winUserJoinFlagDo) withDO(do gen.Dao) *winUserJoinFlagDo {
	w.DO = *do.(*gen.DO)
	return w
}
