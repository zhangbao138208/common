// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gitlab.skig.tech/zero-core/common/zorm/model"
)

func newWinFrontGameClassifyInfoCm(db *gorm.DB, opts ...gen.DOOption) winFrontGameClassifyInfoCm {
	_winFrontGameClassifyInfoCm := winFrontGameClassifyInfoCm{}

	_winFrontGameClassifyInfoCm.winFrontGameClassifyInfoCmDo.UseDB(db, opts...)
	_winFrontGameClassifyInfoCm.winFrontGameClassifyInfoCmDo.UseModel(&model.WinFrontGameClassifyInfoCm{})

	tableName := _winFrontGameClassifyInfoCm.winFrontGameClassifyInfoCmDo.TableName()
	_winFrontGameClassifyInfoCm.ALL = field.NewAsterisk(tableName)
	_winFrontGameClassifyInfoCm.ID = field.NewInt64(tableName, "id")
	_winFrontGameClassifyInfoCm.CID = field.NewInt64(tableName, "c_id")
	_winFrontGameClassifyInfoCm.SlotID = field.NewString(tableName, "slot_id")
	_winFrontGameClassifyInfoCm.GameID = field.NewInt64(tableName, "game_id")
	_winFrontGameClassifyInfoCm.GameGroupID = field.NewInt64(tableName, "game_group_id")
	_winFrontGameClassifyInfoCm.PlatID = field.NewInt64(tableName, "plat_id")
	_winFrontGameClassifyInfoCm.Sort = field.NewInt64(tableName, "sort")
	_winFrontGameClassifyInfoCm.CreatedAt = field.NewInt64(tableName, "created_at")
	_winFrontGameClassifyInfoCm.CreateUser = field.NewString(tableName, "create_user")
	_winFrontGameClassifyInfoCm.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_winFrontGameClassifyInfoCm.UpdateUser = field.NewString(tableName, "update_user")

	_winFrontGameClassifyInfoCm.fillFieldMap()

	return _winFrontGameClassifyInfoCm
}

type winFrontGameClassifyInfoCm struct {
	winFrontGameClassifyInfoCmDo

	ALL         field.Asterisk
	ID          field.Int64
	CID         field.Int64  // 分类id
	SlotID      field.String // slotId
	GameID      field.Int64  // 游戏ID(关联game_list)
	GameGroupID field.Int64  // 游戏大类类型
	PlatID      field.Int64  // 游戏平台id
	Sort        field.Int64  // 排序
	CreatedAt   field.Int64  // 创建时间
	CreateUser  field.String // 创建人
	UpdatedAt   field.Int64  // 修改人
	UpdateUser  field.String // 修改人

	fieldMap map[string]field.Expr
}

func (w winFrontGameClassifyInfoCm) Table(newTableName string) *winFrontGameClassifyInfoCm {
	w.winFrontGameClassifyInfoCmDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w winFrontGameClassifyInfoCm) As(alias string) *winFrontGameClassifyInfoCm {
	w.winFrontGameClassifyInfoCmDo.DO = *(w.winFrontGameClassifyInfoCmDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *winFrontGameClassifyInfoCm) updateTableName(table string) *winFrontGameClassifyInfoCm {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt64(table, "id")
	w.CID = field.NewInt64(table, "c_id")
	w.SlotID = field.NewString(table, "slot_id")
	w.GameID = field.NewInt64(table, "game_id")
	w.GameGroupID = field.NewInt64(table, "game_group_id")
	w.PlatID = field.NewInt64(table, "plat_id")
	w.Sort = field.NewInt64(table, "sort")
	w.CreatedAt = field.NewInt64(table, "created_at")
	w.CreateUser = field.NewString(table, "create_user")
	w.UpdatedAt = field.NewInt64(table, "updated_at")
	w.UpdateUser = field.NewString(table, "update_user")

	w.fillFieldMap()

	return w
}

func (w *winFrontGameClassifyInfoCm) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *winFrontGameClassifyInfoCm) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 11)
	w.fieldMap["id"] = w.ID
	w.fieldMap["c_id"] = w.CID
	w.fieldMap["slot_id"] = w.SlotID
	w.fieldMap["game_id"] = w.GameID
	w.fieldMap["game_group_id"] = w.GameGroupID
	w.fieldMap["plat_id"] = w.PlatID
	w.fieldMap["sort"] = w.Sort
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["create_user"] = w.CreateUser
	w.fieldMap["updated_at"] = w.UpdatedAt
	w.fieldMap["update_user"] = w.UpdateUser
}

func (w winFrontGameClassifyInfoCm) clone(db *gorm.DB) winFrontGameClassifyInfoCm {
	w.winFrontGameClassifyInfoCmDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w winFrontGameClassifyInfoCm) replaceDB(db *gorm.DB) winFrontGameClassifyInfoCm {
	w.winFrontGameClassifyInfoCmDo.ReplaceDB(db)
	return w
}

type winFrontGameClassifyInfoCmDo struct{ gen.DO }

type IWinFrontGameClassifyInfoCmDo interface {
	gen.SubQuery
	Debug() IWinFrontGameClassifyInfoCmDo
	WithContext(ctx context.Context) IWinFrontGameClassifyInfoCmDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWinFrontGameClassifyInfoCmDo
	WriteDB() IWinFrontGameClassifyInfoCmDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWinFrontGameClassifyInfoCmDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWinFrontGameClassifyInfoCmDo
	Not(conds ...gen.Condition) IWinFrontGameClassifyInfoCmDo
	Or(conds ...gen.Condition) IWinFrontGameClassifyInfoCmDo
	Select(conds ...field.Expr) IWinFrontGameClassifyInfoCmDo
	Where(conds ...gen.Condition) IWinFrontGameClassifyInfoCmDo
	Order(conds ...field.Expr) IWinFrontGameClassifyInfoCmDo
	Distinct(cols ...field.Expr) IWinFrontGameClassifyInfoCmDo
	Omit(cols ...field.Expr) IWinFrontGameClassifyInfoCmDo
	Join(table schema.Tabler, on ...field.Expr) IWinFrontGameClassifyInfoCmDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWinFrontGameClassifyInfoCmDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWinFrontGameClassifyInfoCmDo
	Group(cols ...field.Expr) IWinFrontGameClassifyInfoCmDo
	Having(conds ...gen.Condition) IWinFrontGameClassifyInfoCmDo
	Limit(limit int) IWinFrontGameClassifyInfoCmDo
	Offset(offset int) IWinFrontGameClassifyInfoCmDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWinFrontGameClassifyInfoCmDo
	Unscoped() IWinFrontGameClassifyInfoCmDo
	Create(values ...*model.WinFrontGameClassifyInfoCm) error
	CreateInBatches(values []*model.WinFrontGameClassifyInfoCm, batchSize int) error
	Save(values ...*model.WinFrontGameClassifyInfoCm) error
	First() (*model.WinFrontGameClassifyInfoCm, error)
	Take() (*model.WinFrontGameClassifyInfoCm, error)
	Last() (*model.WinFrontGameClassifyInfoCm, error)
	Find() ([]*model.WinFrontGameClassifyInfoCm, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinFrontGameClassifyInfoCm, err error)
	FindInBatches(result *[]*model.WinFrontGameClassifyInfoCm, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WinFrontGameClassifyInfoCm) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWinFrontGameClassifyInfoCmDo
	Assign(attrs ...field.AssignExpr) IWinFrontGameClassifyInfoCmDo
	Joins(fields ...field.RelationField) IWinFrontGameClassifyInfoCmDo
	Preload(fields ...field.RelationField) IWinFrontGameClassifyInfoCmDo
	FirstOrInit() (*model.WinFrontGameClassifyInfoCm, error)
	FirstOrCreate() (*model.WinFrontGameClassifyInfoCm, error)
	FindByPage(offset int, limit int) (result []*model.WinFrontGameClassifyInfoCm, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWinFrontGameClassifyInfoCmDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w winFrontGameClassifyInfoCmDo) Debug() IWinFrontGameClassifyInfoCmDo {
	return w.withDO(w.DO.Debug())
}

func (w winFrontGameClassifyInfoCmDo) WithContext(ctx context.Context) IWinFrontGameClassifyInfoCmDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w winFrontGameClassifyInfoCmDo) ReadDB() IWinFrontGameClassifyInfoCmDo {
	return w.Clauses(dbresolver.Read)
}

func (w winFrontGameClassifyInfoCmDo) WriteDB() IWinFrontGameClassifyInfoCmDo {
	return w.Clauses(dbresolver.Write)
}

func (w winFrontGameClassifyInfoCmDo) Session(config *gorm.Session) IWinFrontGameClassifyInfoCmDo {
	return w.withDO(w.DO.Session(config))
}

func (w winFrontGameClassifyInfoCmDo) Clauses(conds ...clause.Expression) IWinFrontGameClassifyInfoCmDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w winFrontGameClassifyInfoCmDo) Returning(value interface{}, columns ...string) IWinFrontGameClassifyInfoCmDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w winFrontGameClassifyInfoCmDo) Not(conds ...gen.Condition) IWinFrontGameClassifyInfoCmDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w winFrontGameClassifyInfoCmDo) Or(conds ...gen.Condition) IWinFrontGameClassifyInfoCmDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w winFrontGameClassifyInfoCmDo) Select(conds ...field.Expr) IWinFrontGameClassifyInfoCmDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w winFrontGameClassifyInfoCmDo) Where(conds ...gen.Condition) IWinFrontGameClassifyInfoCmDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w winFrontGameClassifyInfoCmDo) Order(conds ...field.Expr) IWinFrontGameClassifyInfoCmDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w winFrontGameClassifyInfoCmDo) Distinct(cols ...field.Expr) IWinFrontGameClassifyInfoCmDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w winFrontGameClassifyInfoCmDo) Omit(cols ...field.Expr) IWinFrontGameClassifyInfoCmDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w winFrontGameClassifyInfoCmDo) Join(table schema.Tabler, on ...field.Expr) IWinFrontGameClassifyInfoCmDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w winFrontGameClassifyInfoCmDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWinFrontGameClassifyInfoCmDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w winFrontGameClassifyInfoCmDo) RightJoin(table schema.Tabler, on ...field.Expr) IWinFrontGameClassifyInfoCmDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w winFrontGameClassifyInfoCmDo) Group(cols ...field.Expr) IWinFrontGameClassifyInfoCmDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w winFrontGameClassifyInfoCmDo) Having(conds ...gen.Condition) IWinFrontGameClassifyInfoCmDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w winFrontGameClassifyInfoCmDo) Limit(limit int) IWinFrontGameClassifyInfoCmDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w winFrontGameClassifyInfoCmDo) Offset(offset int) IWinFrontGameClassifyInfoCmDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w winFrontGameClassifyInfoCmDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWinFrontGameClassifyInfoCmDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w winFrontGameClassifyInfoCmDo) Unscoped() IWinFrontGameClassifyInfoCmDo {
	return w.withDO(w.DO.Unscoped())
}

func (w winFrontGameClassifyInfoCmDo) Create(values ...*model.WinFrontGameClassifyInfoCm) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w winFrontGameClassifyInfoCmDo) CreateInBatches(values []*model.WinFrontGameClassifyInfoCm, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w winFrontGameClassifyInfoCmDo) Save(values ...*model.WinFrontGameClassifyInfoCm) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w winFrontGameClassifyInfoCmDo) First() (*model.WinFrontGameClassifyInfoCm, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinFrontGameClassifyInfoCm), nil
	}
}

func (w winFrontGameClassifyInfoCmDo) Take() (*model.WinFrontGameClassifyInfoCm, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinFrontGameClassifyInfoCm), nil
	}
}

func (w winFrontGameClassifyInfoCmDo) Last() (*model.WinFrontGameClassifyInfoCm, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinFrontGameClassifyInfoCm), nil
	}
}

func (w winFrontGameClassifyInfoCmDo) Find() ([]*model.WinFrontGameClassifyInfoCm, error) {
	result, err := w.DO.Find()
	return result.([]*model.WinFrontGameClassifyInfoCm), err
}

func (w winFrontGameClassifyInfoCmDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinFrontGameClassifyInfoCm, err error) {
	buf := make([]*model.WinFrontGameClassifyInfoCm, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w winFrontGameClassifyInfoCmDo) FindInBatches(result *[]*model.WinFrontGameClassifyInfoCm, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w winFrontGameClassifyInfoCmDo) Attrs(attrs ...field.AssignExpr) IWinFrontGameClassifyInfoCmDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w winFrontGameClassifyInfoCmDo) Assign(attrs ...field.AssignExpr) IWinFrontGameClassifyInfoCmDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w winFrontGameClassifyInfoCmDo) Joins(fields ...field.RelationField) IWinFrontGameClassifyInfoCmDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w winFrontGameClassifyInfoCmDo) Preload(fields ...field.RelationField) IWinFrontGameClassifyInfoCmDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w winFrontGameClassifyInfoCmDo) FirstOrInit() (*model.WinFrontGameClassifyInfoCm, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinFrontGameClassifyInfoCm), nil
	}
}

func (w winFrontGameClassifyInfoCmDo) FirstOrCreate() (*model.WinFrontGameClassifyInfoCm, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinFrontGameClassifyInfoCm), nil
	}
}

func (w winFrontGameClassifyInfoCmDo) FindByPage(offset int, limit int) (result []*model.WinFrontGameClassifyInfoCm, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w winFrontGameClassifyInfoCmDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w winFrontGameClassifyInfoCmDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w winFrontGameClassifyInfoCmDo) Delete(models ...*model.WinFrontGameClassifyInfoCm) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *winFrontGameClassifyInfoCmDo) withDO(do gen.Dao) *winFrontGameClassifyInfoCmDo {
	w.DO = *do.(*gen.DO)
	return w
}
