// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gitlab.skig.tech/zero-core/common/zorm/model"
)

func newWinSmsRecord(db *gorm.DB, opts ...gen.DOOption) winSmsRecord {
	_winSmsRecord := winSmsRecord{}

	_winSmsRecord.winSmsRecordDo.UseDB(db, opts...)
	_winSmsRecord.winSmsRecordDo.UseModel(&model.WinSmsRecord{})

	tableName := _winSmsRecord.winSmsRecordDo.TableName()
	_winSmsRecord.ALL = field.NewAsterisk(tableName)
	_winSmsRecord.ID = field.NewInt64(tableName, "id")
	_winSmsRecord.Account = field.NewString(tableName, "account")
	_winSmsRecord.Code = field.NewString(tableName, "code")
	_winSmsRecord.Status = field.NewInt64(tableName, "status")
	_winSmsRecord.SendSmsType = field.NewString(tableName, "send_sms_type")
	_winSmsRecord.CreatedAt = field.NewInt64(tableName, "created_at")
	_winSmsRecord.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_winSmsRecord.IP = field.NewString(tableName, "ip")

	_winSmsRecord.fillFieldMap()

	return _winSmsRecord
}

type winSmsRecord struct {
	winSmsRecordDo

	ALL         field.Asterisk
	ID          field.Int64
	Account     field.String // 手机号码/邮箱
	Code        field.String // 验证码
	Status      field.Int64  // 状态:0-未使用 1-已使用
	SendSmsType field.String // 发送短信类型
	CreatedAt   field.Int64
	UpdatedAt   field.Int64
	IP          field.String // ip地址

	fieldMap map[string]field.Expr
}

func (w winSmsRecord) Table(newTableName string) *winSmsRecord {
	w.winSmsRecordDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w winSmsRecord) As(alias string) *winSmsRecord {
	w.winSmsRecordDo.DO = *(w.winSmsRecordDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *winSmsRecord) updateTableName(table string) *winSmsRecord {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt64(table, "id")
	w.Account = field.NewString(table, "account")
	w.Code = field.NewString(table, "code")
	w.Status = field.NewInt64(table, "status")
	w.SendSmsType = field.NewString(table, "send_sms_type")
	w.CreatedAt = field.NewInt64(table, "created_at")
	w.UpdatedAt = field.NewInt64(table, "updated_at")
	w.IP = field.NewString(table, "ip")

	w.fillFieldMap()

	return w
}

func (w *winSmsRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *winSmsRecord) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 8)
	w.fieldMap["id"] = w.ID
	w.fieldMap["account"] = w.Account
	w.fieldMap["code"] = w.Code
	w.fieldMap["status"] = w.Status
	w.fieldMap["send_sms_type"] = w.SendSmsType
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["updated_at"] = w.UpdatedAt
	w.fieldMap["ip"] = w.IP
}

func (w winSmsRecord) clone(db *gorm.DB) winSmsRecord {
	w.winSmsRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w winSmsRecord) replaceDB(db *gorm.DB) winSmsRecord {
	w.winSmsRecordDo.ReplaceDB(db)
	return w
}

type winSmsRecordDo struct{ gen.DO }

type IWinSmsRecordDo interface {
	gen.SubQuery
	Debug() IWinSmsRecordDo
	WithContext(ctx context.Context) IWinSmsRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWinSmsRecordDo
	WriteDB() IWinSmsRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWinSmsRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWinSmsRecordDo
	Not(conds ...gen.Condition) IWinSmsRecordDo
	Or(conds ...gen.Condition) IWinSmsRecordDo
	Select(conds ...field.Expr) IWinSmsRecordDo
	Where(conds ...gen.Condition) IWinSmsRecordDo
	Order(conds ...field.Expr) IWinSmsRecordDo
	Distinct(cols ...field.Expr) IWinSmsRecordDo
	Omit(cols ...field.Expr) IWinSmsRecordDo
	Join(table schema.Tabler, on ...field.Expr) IWinSmsRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWinSmsRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWinSmsRecordDo
	Group(cols ...field.Expr) IWinSmsRecordDo
	Having(conds ...gen.Condition) IWinSmsRecordDo
	Limit(limit int) IWinSmsRecordDo
	Offset(offset int) IWinSmsRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWinSmsRecordDo
	Unscoped() IWinSmsRecordDo
	Create(values ...*model.WinSmsRecord) error
	CreateInBatches(values []*model.WinSmsRecord, batchSize int) error
	Save(values ...*model.WinSmsRecord) error
	First() (*model.WinSmsRecord, error)
	Take() (*model.WinSmsRecord, error)
	Last() (*model.WinSmsRecord, error)
	Find() ([]*model.WinSmsRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinSmsRecord, err error)
	FindInBatches(result *[]*model.WinSmsRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WinSmsRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWinSmsRecordDo
	Assign(attrs ...field.AssignExpr) IWinSmsRecordDo
	Joins(fields ...field.RelationField) IWinSmsRecordDo
	Preload(fields ...field.RelationField) IWinSmsRecordDo
	FirstOrInit() (*model.WinSmsRecord, error)
	FirstOrCreate() (*model.WinSmsRecord, error)
	FindByPage(offset int, limit int) (result []*model.WinSmsRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWinSmsRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w winSmsRecordDo) Debug() IWinSmsRecordDo {
	return w.withDO(w.DO.Debug())
}

func (w winSmsRecordDo) WithContext(ctx context.Context) IWinSmsRecordDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w winSmsRecordDo) ReadDB() IWinSmsRecordDo {
	return w.Clauses(dbresolver.Read)
}

func (w winSmsRecordDo) WriteDB() IWinSmsRecordDo {
	return w.Clauses(dbresolver.Write)
}

func (w winSmsRecordDo) Session(config *gorm.Session) IWinSmsRecordDo {
	return w.withDO(w.DO.Session(config))
}

func (w winSmsRecordDo) Clauses(conds ...clause.Expression) IWinSmsRecordDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w winSmsRecordDo) Returning(value interface{}, columns ...string) IWinSmsRecordDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w winSmsRecordDo) Not(conds ...gen.Condition) IWinSmsRecordDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w winSmsRecordDo) Or(conds ...gen.Condition) IWinSmsRecordDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w winSmsRecordDo) Select(conds ...field.Expr) IWinSmsRecordDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w winSmsRecordDo) Where(conds ...gen.Condition) IWinSmsRecordDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w winSmsRecordDo) Order(conds ...field.Expr) IWinSmsRecordDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w winSmsRecordDo) Distinct(cols ...field.Expr) IWinSmsRecordDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w winSmsRecordDo) Omit(cols ...field.Expr) IWinSmsRecordDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w winSmsRecordDo) Join(table schema.Tabler, on ...field.Expr) IWinSmsRecordDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w winSmsRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWinSmsRecordDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w winSmsRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) IWinSmsRecordDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w winSmsRecordDo) Group(cols ...field.Expr) IWinSmsRecordDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w winSmsRecordDo) Having(conds ...gen.Condition) IWinSmsRecordDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w winSmsRecordDo) Limit(limit int) IWinSmsRecordDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w winSmsRecordDo) Offset(offset int) IWinSmsRecordDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w winSmsRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWinSmsRecordDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w winSmsRecordDo) Unscoped() IWinSmsRecordDo {
	return w.withDO(w.DO.Unscoped())
}

func (w winSmsRecordDo) Create(values ...*model.WinSmsRecord) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w winSmsRecordDo) CreateInBatches(values []*model.WinSmsRecord, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w winSmsRecordDo) Save(values ...*model.WinSmsRecord) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w winSmsRecordDo) First() (*model.WinSmsRecord, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinSmsRecord), nil
	}
}

func (w winSmsRecordDo) Take() (*model.WinSmsRecord, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinSmsRecord), nil
	}
}

func (w winSmsRecordDo) Last() (*model.WinSmsRecord, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinSmsRecord), nil
	}
}

func (w winSmsRecordDo) Find() ([]*model.WinSmsRecord, error) {
	result, err := w.DO.Find()
	return result.([]*model.WinSmsRecord), err
}

func (w winSmsRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinSmsRecord, err error) {
	buf := make([]*model.WinSmsRecord, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w winSmsRecordDo) FindInBatches(result *[]*model.WinSmsRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w winSmsRecordDo) Attrs(attrs ...field.AssignExpr) IWinSmsRecordDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w winSmsRecordDo) Assign(attrs ...field.AssignExpr) IWinSmsRecordDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w winSmsRecordDo) Joins(fields ...field.RelationField) IWinSmsRecordDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w winSmsRecordDo) Preload(fields ...field.RelationField) IWinSmsRecordDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w winSmsRecordDo) FirstOrInit() (*model.WinSmsRecord, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinSmsRecord), nil
	}
}

func (w winSmsRecordDo) FirstOrCreate() (*model.WinSmsRecord, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinSmsRecord), nil
	}
}

func (w winSmsRecordDo) FindByPage(offset int, limit int) (result []*model.WinSmsRecord, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w winSmsRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w winSmsRecordDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w winSmsRecordDo) Delete(models ...*model.WinSmsRecord) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *winSmsRecordDo) withDO(do gen.Dao) *winSmsRecordDo {
	w.DO = *do.(*gen.DO)
	return w
}
