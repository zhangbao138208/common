// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gitlab.skig.tech/zero-core/common/zorm/model"
)

func newWinAgentCommissionRate(db *gorm.DB, opts ...gen.DOOption) winAgentCommissionRate {
	_winAgentCommissionRate := winAgentCommissionRate{}

	_winAgentCommissionRate.winAgentCommissionRateDo.UseDB(db, opts...)
	_winAgentCommissionRate.winAgentCommissionRateDo.UseModel(&model.WinAgentCommissionRate{})

	tableName := _winAgentCommissionRate.winAgentCommissionRateDo.TableName()
	_winAgentCommissionRate.ALL = field.NewAsterisk(tableName)
	_winAgentCommissionRate.AgentLevel = field.NewInt64(tableName, "agent_level")
	_winAgentCommissionRate.AgentLevelRate = field.NewField(tableName, "agent_level_rate")
	_winAgentCommissionRate.CreatedAt = field.NewInt64(tableName, "created_at")
	_winAgentCommissionRate.UpdatedAt = field.NewInt64(tableName, "updated_at")

	_winAgentCommissionRate.fillFieldMap()

	return _winAgentCommissionRate
}

type winAgentCommissionRate struct {
	winAgentCommissionRateDo

	ALL            field.Asterisk
	AgentLevel     field.Int64 // 代理层级
	AgentLevelRate field.Field // 佣金比例
	CreatedAt      field.Int64
	UpdatedAt      field.Int64

	fieldMap map[string]field.Expr
}

func (w winAgentCommissionRate) Table(newTableName string) *winAgentCommissionRate {
	w.winAgentCommissionRateDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w winAgentCommissionRate) As(alias string) *winAgentCommissionRate {
	w.winAgentCommissionRateDo.DO = *(w.winAgentCommissionRateDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *winAgentCommissionRate) updateTableName(table string) *winAgentCommissionRate {
	w.ALL = field.NewAsterisk(table)
	w.AgentLevel = field.NewInt64(table, "agent_level")
	w.AgentLevelRate = field.NewField(table, "agent_level_rate")
	w.CreatedAt = field.NewInt64(table, "created_at")
	w.UpdatedAt = field.NewInt64(table, "updated_at")

	w.fillFieldMap()

	return w
}

func (w *winAgentCommissionRate) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *winAgentCommissionRate) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 4)
	w.fieldMap["agent_level"] = w.AgentLevel
	w.fieldMap["agent_level_rate"] = w.AgentLevelRate
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["updated_at"] = w.UpdatedAt
}

func (w winAgentCommissionRate) clone(db *gorm.DB) winAgentCommissionRate {
	w.winAgentCommissionRateDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w winAgentCommissionRate) replaceDB(db *gorm.DB) winAgentCommissionRate {
	w.winAgentCommissionRateDo.ReplaceDB(db)
	return w
}

type winAgentCommissionRateDo struct{ gen.DO }

type IWinAgentCommissionRateDo interface {
	gen.SubQuery
	Debug() IWinAgentCommissionRateDo
	WithContext(ctx context.Context) IWinAgentCommissionRateDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWinAgentCommissionRateDo
	WriteDB() IWinAgentCommissionRateDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWinAgentCommissionRateDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWinAgentCommissionRateDo
	Not(conds ...gen.Condition) IWinAgentCommissionRateDo
	Or(conds ...gen.Condition) IWinAgentCommissionRateDo
	Select(conds ...field.Expr) IWinAgentCommissionRateDo
	Where(conds ...gen.Condition) IWinAgentCommissionRateDo
	Order(conds ...field.Expr) IWinAgentCommissionRateDo
	Distinct(cols ...field.Expr) IWinAgentCommissionRateDo
	Omit(cols ...field.Expr) IWinAgentCommissionRateDo
	Join(table schema.Tabler, on ...field.Expr) IWinAgentCommissionRateDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWinAgentCommissionRateDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWinAgentCommissionRateDo
	Group(cols ...field.Expr) IWinAgentCommissionRateDo
	Having(conds ...gen.Condition) IWinAgentCommissionRateDo
	Limit(limit int) IWinAgentCommissionRateDo
	Offset(offset int) IWinAgentCommissionRateDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWinAgentCommissionRateDo
	Unscoped() IWinAgentCommissionRateDo
	Create(values ...*model.WinAgentCommissionRate) error
	CreateInBatches(values []*model.WinAgentCommissionRate, batchSize int) error
	Save(values ...*model.WinAgentCommissionRate) error
	First() (*model.WinAgentCommissionRate, error)
	Take() (*model.WinAgentCommissionRate, error)
	Last() (*model.WinAgentCommissionRate, error)
	Find() ([]*model.WinAgentCommissionRate, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinAgentCommissionRate, err error)
	FindInBatches(result *[]*model.WinAgentCommissionRate, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WinAgentCommissionRate) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWinAgentCommissionRateDo
	Assign(attrs ...field.AssignExpr) IWinAgentCommissionRateDo
	Joins(fields ...field.RelationField) IWinAgentCommissionRateDo
	Preload(fields ...field.RelationField) IWinAgentCommissionRateDo
	FirstOrInit() (*model.WinAgentCommissionRate, error)
	FirstOrCreate() (*model.WinAgentCommissionRate, error)
	FindByPage(offset int, limit int) (result []*model.WinAgentCommissionRate, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWinAgentCommissionRateDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w winAgentCommissionRateDo) Debug() IWinAgentCommissionRateDo {
	return w.withDO(w.DO.Debug())
}

func (w winAgentCommissionRateDo) WithContext(ctx context.Context) IWinAgentCommissionRateDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w winAgentCommissionRateDo) ReadDB() IWinAgentCommissionRateDo {
	return w.Clauses(dbresolver.Read)
}

func (w winAgentCommissionRateDo) WriteDB() IWinAgentCommissionRateDo {
	return w.Clauses(dbresolver.Write)
}

func (w winAgentCommissionRateDo) Session(config *gorm.Session) IWinAgentCommissionRateDo {
	return w.withDO(w.DO.Session(config))
}

func (w winAgentCommissionRateDo) Clauses(conds ...clause.Expression) IWinAgentCommissionRateDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w winAgentCommissionRateDo) Returning(value interface{}, columns ...string) IWinAgentCommissionRateDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w winAgentCommissionRateDo) Not(conds ...gen.Condition) IWinAgentCommissionRateDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w winAgentCommissionRateDo) Or(conds ...gen.Condition) IWinAgentCommissionRateDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w winAgentCommissionRateDo) Select(conds ...field.Expr) IWinAgentCommissionRateDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w winAgentCommissionRateDo) Where(conds ...gen.Condition) IWinAgentCommissionRateDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w winAgentCommissionRateDo) Order(conds ...field.Expr) IWinAgentCommissionRateDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w winAgentCommissionRateDo) Distinct(cols ...field.Expr) IWinAgentCommissionRateDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w winAgentCommissionRateDo) Omit(cols ...field.Expr) IWinAgentCommissionRateDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w winAgentCommissionRateDo) Join(table schema.Tabler, on ...field.Expr) IWinAgentCommissionRateDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w winAgentCommissionRateDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWinAgentCommissionRateDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w winAgentCommissionRateDo) RightJoin(table schema.Tabler, on ...field.Expr) IWinAgentCommissionRateDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w winAgentCommissionRateDo) Group(cols ...field.Expr) IWinAgentCommissionRateDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w winAgentCommissionRateDo) Having(conds ...gen.Condition) IWinAgentCommissionRateDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w winAgentCommissionRateDo) Limit(limit int) IWinAgentCommissionRateDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w winAgentCommissionRateDo) Offset(offset int) IWinAgentCommissionRateDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w winAgentCommissionRateDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWinAgentCommissionRateDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w winAgentCommissionRateDo) Unscoped() IWinAgentCommissionRateDo {
	return w.withDO(w.DO.Unscoped())
}

func (w winAgentCommissionRateDo) Create(values ...*model.WinAgentCommissionRate) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w winAgentCommissionRateDo) CreateInBatches(values []*model.WinAgentCommissionRate, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w winAgentCommissionRateDo) Save(values ...*model.WinAgentCommissionRate) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w winAgentCommissionRateDo) First() (*model.WinAgentCommissionRate, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinAgentCommissionRate), nil
	}
}

func (w winAgentCommissionRateDo) Take() (*model.WinAgentCommissionRate, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinAgentCommissionRate), nil
	}
}

func (w winAgentCommissionRateDo) Last() (*model.WinAgentCommissionRate, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinAgentCommissionRate), nil
	}
}

func (w winAgentCommissionRateDo) Find() ([]*model.WinAgentCommissionRate, error) {
	result, err := w.DO.Find()
	return result.([]*model.WinAgentCommissionRate), err
}

func (w winAgentCommissionRateDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinAgentCommissionRate, err error) {
	buf := make([]*model.WinAgentCommissionRate, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w winAgentCommissionRateDo) FindInBatches(result *[]*model.WinAgentCommissionRate, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w winAgentCommissionRateDo) Attrs(attrs ...field.AssignExpr) IWinAgentCommissionRateDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w winAgentCommissionRateDo) Assign(attrs ...field.AssignExpr) IWinAgentCommissionRateDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w winAgentCommissionRateDo) Joins(fields ...field.RelationField) IWinAgentCommissionRateDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w winAgentCommissionRateDo) Preload(fields ...field.RelationField) IWinAgentCommissionRateDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w winAgentCommissionRateDo) FirstOrInit() (*model.WinAgentCommissionRate, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinAgentCommissionRate), nil
	}
}

func (w winAgentCommissionRateDo) FirstOrCreate() (*model.WinAgentCommissionRate, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinAgentCommissionRate), nil
	}
}

func (w winAgentCommissionRateDo) FindByPage(offset int, limit int) (result []*model.WinAgentCommissionRate, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w winAgentCommissionRateDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w winAgentCommissionRateDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w winAgentCommissionRateDo) Delete(models ...*model.WinAgentCommissionRate) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *winAgentCommissionRateDo) withDO(do gen.Dao) *winAgentCommissionRateDo {
	w.DO = *do.(*gen.DO)
	return w
}
