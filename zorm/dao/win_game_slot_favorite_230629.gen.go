// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gitlab.skig.tech/zero-core/common/zorm/model"
)

func newWinGameSlotFavorite230629(db *gorm.DB, opts ...gen.DOOption) winGameSlotFavorite230629 {
	_winGameSlotFavorite230629 := winGameSlotFavorite230629{}

	_winGameSlotFavorite230629.winGameSlotFavorite230629Do.UseDB(db, opts...)
	_winGameSlotFavorite230629.winGameSlotFavorite230629Do.UseModel(&model.WinGameSlotFavorite230629{})

	tableName := _winGameSlotFavorite230629.winGameSlotFavorite230629Do.TableName()
	_winGameSlotFavorite230629.ALL = field.NewAsterisk(tableName)
	_winGameSlotFavorite230629.ID = field.NewInt64(tableName, "id")
	_winGameSlotFavorite230629.UID = field.NewInt64(tableName, "uid")
	_winGameSlotFavorite230629.GameID = field.NewInt64(tableName, "game_id")
	_winGameSlotFavorite230629.GameSlotID = field.NewString(tableName, "game_slot_id")
	_winGameSlotFavorite230629.CreatedAt = field.NewInt64(tableName, "created_at")
	_winGameSlotFavorite230629.UpdatedAt = field.NewInt64(tableName, "updated_at")

	_winGameSlotFavorite230629.fillFieldMap()

	return _winGameSlotFavorite230629
}

type winGameSlotFavorite230629 struct {
	winGameSlotFavorite230629Do

	ALL        field.Asterisk
	ID         field.Int64
	UID        field.Int64  // UID
	GameID     field.Int64  // 游戏类型ID
	GameSlotID field.String // 游戏(子老虎机)ID
	CreatedAt  field.Int64
	UpdatedAt  field.Int64

	fieldMap map[string]field.Expr
}

func (w winGameSlotFavorite230629) Table(newTableName string) *winGameSlotFavorite230629 {
	w.winGameSlotFavorite230629Do.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w winGameSlotFavorite230629) As(alias string) *winGameSlotFavorite230629 {
	w.winGameSlotFavorite230629Do.DO = *(w.winGameSlotFavorite230629Do.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *winGameSlotFavorite230629) updateTableName(table string) *winGameSlotFavorite230629 {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt64(table, "id")
	w.UID = field.NewInt64(table, "uid")
	w.GameID = field.NewInt64(table, "game_id")
	w.GameSlotID = field.NewString(table, "game_slot_id")
	w.CreatedAt = field.NewInt64(table, "created_at")
	w.UpdatedAt = field.NewInt64(table, "updated_at")

	w.fillFieldMap()

	return w
}

func (w *winGameSlotFavorite230629) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *winGameSlotFavorite230629) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 6)
	w.fieldMap["id"] = w.ID
	w.fieldMap["uid"] = w.UID
	w.fieldMap["game_id"] = w.GameID
	w.fieldMap["game_slot_id"] = w.GameSlotID
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["updated_at"] = w.UpdatedAt
}

func (w winGameSlotFavorite230629) clone(db *gorm.DB) winGameSlotFavorite230629 {
	w.winGameSlotFavorite230629Do.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w winGameSlotFavorite230629) replaceDB(db *gorm.DB) winGameSlotFavorite230629 {
	w.winGameSlotFavorite230629Do.ReplaceDB(db)
	return w
}

type winGameSlotFavorite230629Do struct{ gen.DO }

type IWinGameSlotFavorite230629Do interface {
	gen.SubQuery
	Debug() IWinGameSlotFavorite230629Do
	WithContext(ctx context.Context) IWinGameSlotFavorite230629Do
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWinGameSlotFavorite230629Do
	WriteDB() IWinGameSlotFavorite230629Do
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWinGameSlotFavorite230629Do
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWinGameSlotFavorite230629Do
	Not(conds ...gen.Condition) IWinGameSlotFavorite230629Do
	Or(conds ...gen.Condition) IWinGameSlotFavorite230629Do
	Select(conds ...field.Expr) IWinGameSlotFavorite230629Do
	Where(conds ...gen.Condition) IWinGameSlotFavorite230629Do
	Order(conds ...field.Expr) IWinGameSlotFavorite230629Do
	Distinct(cols ...field.Expr) IWinGameSlotFavorite230629Do
	Omit(cols ...field.Expr) IWinGameSlotFavorite230629Do
	Join(table schema.Tabler, on ...field.Expr) IWinGameSlotFavorite230629Do
	LeftJoin(table schema.Tabler, on ...field.Expr) IWinGameSlotFavorite230629Do
	RightJoin(table schema.Tabler, on ...field.Expr) IWinGameSlotFavorite230629Do
	Group(cols ...field.Expr) IWinGameSlotFavorite230629Do
	Having(conds ...gen.Condition) IWinGameSlotFavorite230629Do
	Limit(limit int) IWinGameSlotFavorite230629Do
	Offset(offset int) IWinGameSlotFavorite230629Do
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWinGameSlotFavorite230629Do
	Unscoped() IWinGameSlotFavorite230629Do
	Create(values ...*model.WinGameSlotFavorite230629) error
	CreateInBatches(values []*model.WinGameSlotFavorite230629, batchSize int) error
	Save(values ...*model.WinGameSlotFavorite230629) error
	First() (*model.WinGameSlotFavorite230629, error)
	Take() (*model.WinGameSlotFavorite230629, error)
	Last() (*model.WinGameSlotFavorite230629, error)
	Find() ([]*model.WinGameSlotFavorite230629, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinGameSlotFavorite230629, err error)
	FindInBatches(result *[]*model.WinGameSlotFavorite230629, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WinGameSlotFavorite230629) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWinGameSlotFavorite230629Do
	Assign(attrs ...field.AssignExpr) IWinGameSlotFavorite230629Do
	Joins(fields ...field.RelationField) IWinGameSlotFavorite230629Do
	Preload(fields ...field.RelationField) IWinGameSlotFavorite230629Do
	FirstOrInit() (*model.WinGameSlotFavorite230629, error)
	FirstOrCreate() (*model.WinGameSlotFavorite230629, error)
	FindByPage(offset int, limit int) (result []*model.WinGameSlotFavorite230629, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWinGameSlotFavorite230629Do
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w winGameSlotFavorite230629Do) Debug() IWinGameSlotFavorite230629Do {
	return w.withDO(w.DO.Debug())
}

func (w winGameSlotFavorite230629Do) WithContext(ctx context.Context) IWinGameSlotFavorite230629Do {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w winGameSlotFavorite230629Do) ReadDB() IWinGameSlotFavorite230629Do {
	return w.Clauses(dbresolver.Read)
}

func (w winGameSlotFavorite230629Do) WriteDB() IWinGameSlotFavorite230629Do {
	return w.Clauses(dbresolver.Write)
}

func (w winGameSlotFavorite230629Do) Session(config *gorm.Session) IWinGameSlotFavorite230629Do {
	return w.withDO(w.DO.Session(config))
}

func (w winGameSlotFavorite230629Do) Clauses(conds ...clause.Expression) IWinGameSlotFavorite230629Do {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w winGameSlotFavorite230629Do) Returning(value interface{}, columns ...string) IWinGameSlotFavorite230629Do {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w winGameSlotFavorite230629Do) Not(conds ...gen.Condition) IWinGameSlotFavorite230629Do {
	return w.withDO(w.DO.Not(conds...))
}

func (w winGameSlotFavorite230629Do) Or(conds ...gen.Condition) IWinGameSlotFavorite230629Do {
	return w.withDO(w.DO.Or(conds...))
}

func (w winGameSlotFavorite230629Do) Select(conds ...field.Expr) IWinGameSlotFavorite230629Do {
	return w.withDO(w.DO.Select(conds...))
}

func (w winGameSlotFavorite230629Do) Where(conds ...gen.Condition) IWinGameSlotFavorite230629Do {
	return w.withDO(w.DO.Where(conds...))
}

func (w winGameSlotFavorite230629Do) Order(conds ...field.Expr) IWinGameSlotFavorite230629Do {
	return w.withDO(w.DO.Order(conds...))
}

func (w winGameSlotFavorite230629Do) Distinct(cols ...field.Expr) IWinGameSlotFavorite230629Do {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w winGameSlotFavorite230629Do) Omit(cols ...field.Expr) IWinGameSlotFavorite230629Do {
	return w.withDO(w.DO.Omit(cols...))
}

func (w winGameSlotFavorite230629Do) Join(table schema.Tabler, on ...field.Expr) IWinGameSlotFavorite230629Do {
	return w.withDO(w.DO.Join(table, on...))
}

func (w winGameSlotFavorite230629Do) LeftJoin(table schema.Tabler, on ...field.Expr) IWinGameSlotFavorite230629Do {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w winGameSlotFavorite230629Do) RightJoin(table schema.Tabler, on ...field.Expr) IWinGameSlotFavorite230629Do {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w winGameSlotFavorite230629Do) Group(cols ...field.Expr) IWinGameSlotFavorite230629Do {
	return w.withDO(w.DO.Group(cols...))
}

func (w winGameSlotFavorite230629Do) Having(conds ...gen.Condition) IWinGameSlotFavorite230629Do {
	return w.withDO(w.DO.Having(conds...))
}

func (w winGameSlotFavorite230629Do) Limit(limit int) IWinGameSlotFavorite230629Do {
	return w.withDO(w.DO.Limit(limit))
}

func (w winGameSlotFavorite230629Do) Offset(offset int) IWinGameSlotFavorite230629Do {
	return w.withDO(w.DO.Offset(offset))
}

func (w winGameSlotFavorite230629Do) Scopes(funcs ...func(gen.Dao) gen.Dao) IWinGameSlotFavorite230629Do {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w winGameSlotFavorite230629Do) Unscoped() IWinGameSlotFavorite230629Do {
	return w.withDO(w.DO.Unscoped())
}

func (w winGameSlotFavorite230629Do) Create(values ...*model.WinGameSlotFavorite230629) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w winGameSlotFavorite230629Do) CreateInBatches(values []*model.WinGameSlotFavorite230629, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w winGameSlotFavorite230629Do) Save(values ...*model.WinGameSlotFavorite230629) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w winGameSlotFavorite230629Do) First() (*model.WinGameSlotFavorite230629, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinGameSlotFavorite230629), nil
	}
}

func (w winGameSlotFavorite230629Do) Take() (*model.WinGameSlotFavorite230629, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinGameSlotFavorite230629), nil
	}
}

func (w winGameSlotFavorite230629Do) Last() (*model.WinGameSlotFavorite230629, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinGameSlotFavorite230629), nil
	}
}

func (w winGameSlotFavorite230629Do) Find() ([]*model.WinGameSlotFavorite230629, error) {
	result, err := w.DO.Find()
	return result.([]*model.WinGameSlotFavorite230629), err
}

func (w winGameSlotFavorite230629Do) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinGameSlotFavorite230629, err error) {
	buf := make([]*model.WinGameSlotFavorite230629, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w winGameSlotFavorite230629Do) FindInBatches(result *[]*model.WinGameSlotFavorite230629, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w winGameSlotFavorite230629Do) Attrs(attrs ...field.AssignExpr) IWinGameSlotFavorite230629Do {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w winGameSlotFavorite230629Do) Assign(attrs ...field.AssignExpr) IWinGameSlotFavorite230629Do {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w winGameSlotFavorite230629Do) Joins(fields ...field.RelationField) IWinGameSlotFavorite230629Do {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w winGameSlotFavorite230629Do) Preload(fields ...field.RelationField) IWinGameSlotFavorite230629Do {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w winGameSlotFavorite230629Do) FirstOrInit() (*model.WinGameSlotFavorite230629, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinGameSlotFavorite230629), nil
	}
}

func (w winGameSlotFavorite230629Do) FirstOrCreate() (*model.WinGameSlotFavorite230629, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinGameSlotFavorite230629), nil
	}
}

func (w winGameSlotFavorite230629Do) FindByPage(offset int, limit int) (result []*model.WinGameSlotFavorite230629, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w winGameSlotFavorite230629Do) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w winGameSlotFavorite230629Do) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w winGameSlotFavorite230629Do) Delete(models ...*model.WinGameSlotFavorite230629) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *winGameSlotFavorite230629Do) withDO(do gen.Dao) *winGameSlotFavorite230629Do {
	w.DO = *do.(*gen.DO)
	return w
}
