// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gitlab.skig.tech/zero-core/common/zorm/model"
)

func newWinPayPlatConfig(db *gorm.DB, opts ...gen.DOOption) winPayPlatConfig {
	_winPayPlatConfig := winPayPlatConfig{}

	_winPayPlatConfig.winPayPlatConfigDo.UseDB(db, opts...)
	_winPayPlatConfig.winPayPlatConfigDo.UseModel(&model.WinPayPlatConfig{})

	tableName := _winPayPlatConfig.winPayPlatConfigDo.TableName()
	_winPayPlatConfig.ALL = field.NewAsterisk(tableName)
	_winPayPlatConfig.ID = field.NewInt64(tableName, "id")
	_winPayPlatConfig.PlatName = field.NewString(tableName, "plat_name")
	_winPayPlatConfig.PlatNickName = field.NewString(tableName, "plat_nick_name")
	_winPayPlatConfig.MerchantID = field.NewString(tableName, "merchant_id")
	_winPayPlatConfig.APIKey = field.NewString(tableName, "api_key")
	_winPayPlatConfig.Status = field.NewInt64(tableName, "status")
	_winPayPlatConfig.PlatConfig = field.NewString(tableName, "plat_config")
	_winPayPlatConfig.CreatedAt = field.NewInt64(tableName, "created_at")
	_winPayPlatConfig.Operator = field.NewString(tableName, "operator")
	_winPayPlatConfig.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_winPayPlatConfig.OperatorName = field.NewString(tableName, "operator_name")

	_winPayPlatConfig.fillFieldMap()

	return _winPayPlatConfig
}

type winPayPlatConfig struct {
	winPayPlatConfigDo

	ALL          field.Asterisk
	ID           field.Int64
	PlatName     field.String // 平台名称
	PlatNickName field.String // 平台昵称
	MerchantID   field.String // 商户号
	APIKey       field.String // 商户秘钥
	Status       field.Int64  // 状态:0-停用 1-启用 2-删除
	PlatConfig   field.String // 平台特殊配置
	CreatedAt    field.Int64  // 创建时间
	Operator     field.String // 操作人
	UpdatedAt    field.Int64  // 修改时间
	OperatorName field.String // 操作人姓名

	fieldMap map[string]field.Expr
}

func (w winPayPlatConfig) Table(newTableName string) *winPayPlatConfig {
	w.winPayPlatConfigDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w winPayPlatConfig) As(alias string) *winPayPlatConfig {
	w.winPayPlatConfigDo.DO = *(w.winPayPlatConfigDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *winPayPlatConfig) updateTableName(table string) *winPayPlatConfig {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt64(table, "id")
	w.PlatName = field.NewString(table, "plat_name")
	w.PlatNickName = field.NewString(table, "plat_nick_name")
	w.MerchantID = field.NewString(table, "merchant_id")
	w.APIKey = field.NewString(table, "api_key")
	w.Status = field.NewInt64(table, "status")
	w.PlatConfig = field.NewString(table, "plat_config")
	w.CreatedAt = field.NewInt64(table, "created_at")
	w.Operator = field.NewString(table, "operator")
	w.UpdatedAt = field.NewInt64(table, "updated_at")
	w.OperatorName = field.NewString(table, "operator_name")

	w.fillFieldMap()

	return w
}

func (w *winPayPlatConfig) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *winPayPlatConfig) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 11)
	w.fieldMap["id"] = w.ID
	w.fieldMap["plat_name"] = w.PlatName
	w.fieldMap["plat_nick_name"] = w.PlatNickName
	w.fieldMap["merchant_id"] = w.MerchantID
	w.fieldMap["api_key"] = w.APIKey
	w.fieldMap["status"] = w.Status
	w.fieldMap["plat_config"] = w.PlatConfig
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["operator"] = w.Operator
	w.fieldMap["updated_at"] = w.UpdatedAt
	w.fieldMap["operator_name"] = w.OperatorName
}

func (w winPayPlatConfig) clone(db *gorm.DB) winPayPlatConfig {
	w.winPayPlatConfigDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w winPayPlatConfig) replaceDB(db *gorm.DB) winPayPlatConfig {
	w.winPayPlatConfigDo.ReplaceDB(db)
	return w
}

type winPayPlatConfigDo struct{ gen.DO }

type IWinPayPlatConfigDo interface {
	gen.SubQuery
	Debug() IWinPayPlatConfigDo
	WithContext(ctx context.Context) IWinPayPlatConfigDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWinPayPlatConfigDo
	WriteDB() IWinPayPlatConfigDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWinPayPlatConfigDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWinPayPlatConfigDo
	Not(conds ...gen.Condition) IWinPayPlatConfigDo
	Or(conds ...gen.Condition) IWinPayPlatConfigDo
	Select(conds ...field.Expr) IWinPayPlatConfigDo
	Where(conds ...gen.Condition) IWinPayPlatConfigDo
	Order(conds ...field.Expr) IWinPayPlatConfigDo
	Distinct(cols ...field.Expr) IWinPayPlatConfigDo
	Omit(cols ...field.Expr) IWinPayPlatConfigDo
	Join(table schema.Tabler, on ...field.Expr) IWinPayPlatConfigDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWinPayPlatConfigDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWinPayPlatConfigDo
	Group(cols ...field.Expr) IWinPayPlatConfigDo
	Having(conds ...gen.Condition) IWinPayPlatConfigDo
	Limit(limit int) IWinPayPlatConfigDo
	Offset(offset int) IWinPayPlatConfigDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWinPayPlatConfigDo
	Unscoped() IWinPayPlatConfigDo
	Create(values ...*model.WinPayPlatConfig) error
	CreateInBatches(values []*model.WinPayPlatConfig, batchSize int) error
	Save(values ...*model.WinPayPlatConfig) error
	First() (*model.WinPayPlatConfig, error)
	Take() (*model.WinPayPlatConfig, error)
	Last() (*model.WinPayPlatConfig, error)
	Find() ([]*model.WinPayPlatConfig, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinPayPlatConfig, err error)
	FindInBatches(result *[]*model.WinPayPlatConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WinPayPlatConfig) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWinPayPlatConfigDo
	Assign(attrs ...field.AssignExpr) IWinPayPlatConfigDo
	Joins(fields ...field.RelationField) IWinPayPlatConfigDo
	Preload(fields ...field.RelationField) IWinPayPlatConfigDo
	FirstOrInit() (*model.WinPayPlatConfig, error)
	FirstOrCreate() (*model.WinPayPlatConfig, error)
	FindByPage(offset int, limit int) (result []*model.WinPayPlatConfig, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWinPayPlatConfigDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w winPayPlatConfigDo) Debug() IWinPayPlatConfigDo {
	return w.withDO(w.DO.Debug())
}

func (w winPayPlatConfigDo) WithContext(ctx context.Context) IWinPayPlatConfigDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w winPayPlatConfigDo) ReadDB() IWinPayPlatConfigDo {
	return w.Clauses(dbresolver.Read)
}

func (w winPayPlatConfigDo) WriteDB() IWinPayPlatConfigDo {
	return w.Clauses(dbresolver.Write)
}

func (w winPayPlatConfigDo) Session(config *gorm.Session) IWinPayPlatConfigDo {
	return w.withDO(w.DO.Session(config))
}

func (w winPayPlatConfigDo) Clauses(conds ...clause.Expression) IWinPayPlatConfigDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w winPayPlatConfigDo) Returning(value interface{}, columns ...string) IWinPayPlatConfigDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w winPayPlatConfigDo) Not(conds ...gen.Condition) IWinPayPlatConfigDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w winPayPlatConfigDo) Or(conds ...gen.Condition) IWinPayPlatConfigDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w winPayPlatConfigDo) Select(conds ...field.Expr) IWinPayPlatConfigDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w winPayPlatConfigDo) Where(conds ...gen.Condition) IWinPayPlatConfigDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w winPayPlatConfigDo) Order(conds ...field.Expr) IWinPayPlatConfigDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w winPayPlatConfigDo) Distinct(cols ...field.Expr) IWinPayPlatConfigDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w winPayPlatConfigDo) Omit(cols ...field.Expr) IWinPayPlatConfigDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w winPayPlatConfigDo) Join(table schema.Tabler, on ...field.Expr) IWinPayPlatConfigDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w winPayPlatConfigDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWinPayPlatConfigDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w winPayPlatConfigDo) RightJoin(table schema.Tabler, on ...field.Expr) IWinPayPlatConfigDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w winPayPlatConfigDo) Group(cols ...field.Expr) IWinPayPlatConfigDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w winPayPlatConfigDo) Having(conds ...gen.Condition) IWinPayPlatConfigDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w winPayPlatConfigDo) Limit(limit int) IWinPayPlatConfigDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w winPayPlatConfigDo) Offset(offset int) IWinPayPlatConfigDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w winPayPlatConfigDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWinPayPlatConfigDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w winPayPlatConfigDo) Unscoped() IWinPayPlatConfigDo {
	return w.withDO(w.DO.Unscoped())
}

func (w winPayPlatConfigDo) Create(values ...*model.WinPayPlatConfig) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w winPayPlatConfigDo) CreateInBatches(values []*model.WinPayPlatConfig, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w winPayPlatConfigDo) Save(values ...*model.WinPayPlatConfig) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w winPayPlatConfigDo) First() (*model.WinPayPlatConfig, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinPayPlatConfig), nil
	}
}

func (w winPayPlatConfigDo) Take() (*model.WinPayPlatConfig, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinPayPlatConfig), nil
	}
}

func (w winPayPlatConfigDo) Last() (*model.WinPayPlatConfig, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinPayPlatConfig), nil
	}
}

func (w winPayPlatConfigDo) Find() ([]*model.WinPayPlatConfig, error) {
	result, err := w.DO.Find()
	return result.([]*model.WinPayPlatConfig), err
}

func (w winPayPlatConfigDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinPayPlatConfig, err error) {
	buf := make([]*model.WinPayPlatConfig, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w winPayPlatConfigDo) FindInBatches(result *[]*model.WinPayPlatConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w winPayPlatConfigDo) Attrs(attrs ...field.AssignExpr) IWinPayPlatConfigDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w winPayPlatConfigDo) Assign(attrs ...field.AssignExpr) IWinPayPlatConfigDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w winPayPlatConfigDo) Joins(fields ...field.RelationField) IWinPayPlatConfigDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w winPayPlatConfigDo) Preload(fields ...field.RelationField) IWinPayPlatConfigDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w winPayPlatConfigDo) FirstOrInit() (*model.WinPayPlatConfig, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinPayPlatConfig), nil
	}
}

func (w winPayPlatConfigDo) FirstOrCreate() (*model.WinPayPlatConfig, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinPayPlatConfig), nil
	}
}

func (w winPayPlatConfigDo) FindByPage(offset int, limit int) (result []*model.WinPayPlatConfig, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w winPayPlatConfigDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w winPayPlatConfigDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w winPayPlatConfigDo) Delete(models ...*model.WinPayPlatConfig) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *winPayPlatConfigDo) withDO(do gen.Dao) *winPayPlatConfigDo {
	w.DO = *do.(*gen.DO)
	return w
}
