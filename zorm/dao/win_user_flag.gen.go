// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gitlab.skig.tech/zero-core/common/zorm/model"
)

func newWinUserFlag(db *gorm.DB, opts ...gen.DOOption) winUserFlag {
	_winUserFlag := winUserFlag{}

	_winUserFlag.winUserFlagDo.UseDB(db, opts...)
	_winUserFlag.winUserFlagDo.UseModel(&model.WinUserFlag{})

	tableName := _winUserFlag.winUserFlagDo.TableName()
	_winUserFlag.ALL = field.NewAsterisk(tableName)
	_winUserFlag.ID = field.NewInt64(tableName, "id")
	_winUserFlag.BitCode = field.NewInt64(tableName, "bit_code")
	_winUserFlag.Name = field.NewString(tableName, "name")
	_winUserFlag.Icon = field.NewString(tableName, "icon")
	_winUserFlag.IconColor = field.NewString(tableName, "icon_color")
	_winUserFlag.Status = field.NewInt64(tableName, "status")
	_winUserFlag.CreatedAt = field.NewInt64(tableName, "created_at")
	_winUserFlag.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_winUserFlag.OperatorName = field.NewString(tableName, "operator_name")

	_winUserFlag.fillFieldMap()

	return _winUserFlag
}

type winUserFlag struct {
	winUserFlagDo

	ALL          field.Asterisk
	ID           field.Int64
	BitCode      field.Int64  // 位运算占位符值
	Name         field.String // 会员旗名称
	Icon         field.String // 图标
	IconColor    field.String // 图标颜色
	Status       field.Int64  // 状态: 1-启用 0-禁用
	CreatedAt    field.Int64
	UpdatedAt    field.Int64
	OperatorName field.String // 操作人姓名

	fieldMap map[string]field.Expr
}

func (w winUserFlag) Table(newTableName string) *winUserFlag {
	w.winUserFlagDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w winUserFlag) As(alias string) *winUserFlag {
	w.winUserFlagDo.DO = *(w.winUserFlagDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *winUserFlag) updateTableName(table string) *winUserFlag {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt64(table, "id")
	w.BitCode = field.NewInt64(table, "bit_code")
	w.Name = field.NewString(table, "name")
	w.Icon = field.NewString(table, "icon")
	w.IconColor = field.NewString(table, "icon_color")
	w.Status = field.NewInt64(table, "status")
	w.CreatedAt = field.NewInt64(table, "created_at")
	w.UpdatedAt = field.NewInt64(table, "updated_at")
	w.OperatorName = field.NewString(table, "operator_name")

	w.fillFieldMap()

	return w
}

func (w *winUserFlag) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *winUserFlag) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 9)
	w.fieldMap["id"] = w.ID
	w.fieldMap["bit_code"] = w.BitCode
	w.fieldMap["name"] = w.Name
	w.fieldMap["icon"] = w.Icon
	w.fieldMap["icon_color"] = w.IconColor
	w.fieldMap["status"] = w.Status
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["updated_at"] = w.UpdatedAt
	w.fieldMap["operator_name"] = w.OperatorName
}

func (w winUserFlag) clone(db *gorm.DB) winUserFlag {
	w.winUserFlagDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w winUserFlag) replaceDB(db *gorm.DB) winUserFlag {
	w.winUserFlagDo.ReplaceDB(db)
	return w
}

type winUserFlagDo struct{ gen.DO }

type IWinUserFlagDo interface {
	gen.SubQuery
	Debug() IWinUserFlagDo
	WithContext(ctx context.Context) IWinUserFlagDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWinUserFlagDo
	WriteDB() IWinUserFlagDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWinUserFlagDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWinUserFlagDo
	Not(conds ...gen.Condition) IWinUserFlagDo
	Or(conds ...gen.Condition) IWinUserFlagDo
	Select(conds ...field.Expr) IWinUserFlagDo
	Where(conds ...gen.Condition) IWinUserFlagDo
	Order(conds ...field.Expr) IWinUserFlagDo
	Distinct(cols ...field.Expr) IWinUserFlagDo
	Omit(cols ...field.Expr) IWinUserFlagDo
	Join(table schema.Tabler, on ...field.Expr) IWinUserFlagDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWinUserFlagDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWinUserFlagDo
	Group(cols ...field.Expr) IWinUserFlagDo
	Having(conds ...gen.Condition) IWinUserFlagDo
	Limit(limit int) IWinUserFlagDo
	Offset(offset int) IWinUserFlagDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWinUserFlagDo
	Unscoped() IWinUserFlagDo
	Create(values ...*model.WinUserFlag) error
	CreateInBatches(values []*model.WinUserFlag, batchSize int) error
	Save(values ...*model.WinUserFlag) error
	First() (*model.WinUserFlag, error)
	Take() (*model.WinUserFlag, error)
	Last() (*model.WinUserFlag, error)
	Find() ([]*model.WinUserFlag, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinUserFlag, err error)
	FindInBatches(result *[]*model.WinUserFlag, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WinUserFlag) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWinUserFlagDo
	Assign(attrs ...field.AssignExpr) IWinUserFlagDo
	Joins(fields ...field.RelationField) IWinUserFlagDo
	Preload(fields ...field.RelationField) IWinUserFlagDo
	FirstOrInit() (*model.WinUserFlag, error)
	FirstOrCreate() (*model.WinUserFlag, error)
	FindByPage(offset int, limit int) (result []*model.WinUserFlag, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWinUserFlagDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w winUserFlagDo) Debug() IWinUserFlagDo {
	return w.withDO(w.DO.Debug())
}

func (w winUserFlagDo) WithContext(ctx context.Context) IWinUserFlagDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w winUserFlagDo) ReadDB() IWinUserFlagDo {
	return w.Clauses(dbresolver.Read)
}

func (w winUserFlagDo) WriteDB() IWinUserFlagDo {
	return w.Clauses(dbresolver.Write)
}

func (w winUserFlagDo) Session(config *gorm.Session) IWinUserFlagDo {
	return w.withDO(w.DO.Session(config))
}

func (w winUserFlagDo) Clauses(conds ...clause.Expression) IWinUserFlagDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w winUserFlagDo) Returning(value interface{}, columns ...string) IWinUserFlagDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w winUserFlagDo) Not(conds ...gen.Condition) IWinUserFlagDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w winUserFlagDo) Or(conds ...gen.Condition) IWinUserFlagDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w winUserFlagDo) Select(conds ...field.Expr) IWinUserFlagDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w winUserFlagDo) Where(conds ...gen.Condition) IWinUserFlagDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w winUserFlagDo) Order(conds ...field.Expr) IWinUserFlagDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w winUserFlagDo) Distinct(cols ...field.Expr) IWinUserFlagDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w winUserFlagDo) Omit(cols ...field.Expr) IWinUserFlagDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w winUserFlagDo) Join(table schema.Tabler, on ...field.Expr) IWinUserFlagDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w winUserFlagDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWinUserFlagDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w winUserFlagDo) RightJoin(table schema.Tabler, on ...field.Expr) IWinUserFlagDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w winUserFlagDo) Group(cols ...field.Expr) IWinUserFlagDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w winUserFlagDo) Having(conds ...gen.Condition) IWinUserFlagDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w winUserFlagDo) Limit(limit int) IWinUserFlagDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w winUserFlagDo) Offset(offset int) IWinUserFlagDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w winUserFlagDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWinUserFlagDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w winUserFlagDo) Unscoped() IWinUserFlagDo {
	return w.withDO(w.DO.Unscoped())
}

func (w winUserFlagDo) Create(values ...*model.WinUserFlag) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w winUserFlagDo) CreateInBatches(values []*model.WinUserFlag, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w winUserFlagDo) Save(values ...*model.WinUserFlag) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w winUserFlagDo) First() (*model.WinUserFlag, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinUserFlag), nil
	}
}

func (w winUserFlagDo) Take() (*model.WinUserFlag, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinUserFlag), nil
	}
}

func (w winUserFlagDo) Last() (*model.WinUserFlag, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinUserFlag), nil
	}
}

func (w winUserFlagDo) Find() ([]*model.WinUserFlag, error) {
	result, err := w.DO.Find()
	return result.([]*model.WinUserFlag), err
}

func (w winUserFlagDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinUserFlag, err error) {
	buf := make([]*model.WinUserFlag, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w winUserFlagDo) FindInBatches(result *[]*model.WinUserFlag, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w winUserFlagDo) Attrs(attrs ...field.AssignExpr) IWinUserFlagDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w winUserFlagDo) Assign(attrs ...field.AssignExpr) IWinUserFlagDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w winUserFlagDo) Joins(fields ...field.RelationField) IWinUserFlagDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w winUserFlagDo) Preload(fields ...field.RelationField) IWinUserFlagDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w winUserFlagDo) FirstOrInit() (*model.WinUserFlag, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinUserFlag), nil
	}
}

func (w winUserFlagDo) FirstOrCreate() (*model.WinUserFlag, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinUserFlag), nil
	}
}

func (w winUserFlagDo) FindByPage(offset int, limit int) (result []*model.WinUserFlag, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w winUserFlagDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w winUserFlagDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w winUserFlagDo) Delete(models ...*model.WinUserFlag) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *winUserFlagDo) withDO(do gen.Dao) *winUserFlagDo {
	w.DO = *do.(*gen.DO)
	return w
}
