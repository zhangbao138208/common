// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gitlab.skig.tech/zero-core/common/zorm/model"
)

func newWinGameSlot230629(db *gorm.DB, opts ...gen.DOOption) winGameSlot230629 {
	_winGameSlot230629 := winGameSlot230629{}

	_winGameSlot230629.winGameSlot230629Do.UseDB(db, opts...)
	_winGameSlot230629.winGameSlot230629Do.UseModel(&model.WinGameSlot230629{})

	tableName := _winGameSlot230629.winGameSlot230629Do.TableName()
	_winGameSlot230629.ALL = field.NewAsterisk(tableName)
	_winGameSlot230629.ID = field.NewString(tableName, "id")
	_winGameSlot230629.GameID = field.NewInt64(tableName, "game_id")
	_winGameSlot230629.GameGroupID = field.NewInt64(tableName, "game_group_id")
	_winGameSlot230629.PlatID = field.NewInt64(tableName, "plat_id")
	_winGameSlot230629.Provider = field.NewString(tableName, "provider")
	_winGameSlot230629.Name = field.NewString(tableName, "name")
	_winGameSlot230629.NameZh = field.NewString(tableName, "name_zh")
	_winGameSlot230629.Img = field.NewString(tableName, "img")
	_winGameSlot230629.ImgNew = field.NewString(tableName, "img_new")
	_winGameSlot230629.IsNew = field.NewInt64(tableName, "is_new")
	_winGameSlot230629.IsCasino = field.NewInt64(tableName, "is_casino")
	_winGameSlot230629.GameTypeID = field.NewString(tableName, "game_type_id")
	_winGameSlot230629.GameTypeName = field.NewString(tableName, "game_type_name")
	_winGameSlot230629.FavoriteStar = field.NewInt64(tableName, "favorite_star")
	_winGameSlot230629.HotStar = field.NewInt64(tableName, "hot_star")
	_winGameSlot230629.Sort = field.NewInt64(tableName, "sort")
	_winGameSlot230629.Status = field.NewInt64(tableName, "status")
	_winGameSlot230629.Device = field.NewInt64(tableName, "device")
	_winGameSlot230629.CreatedAt = field.NewInt64(tableName, "created_at")
	_winGameSlot230629.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_winGameSlot230629.UpdatedUser = field.NewString(tableName, "updated_user")
	_winGameSlot230629.Maintenance = field.NewString(tableName, "maintenance")
	_winGameSlot230629.OperatorName = field.NewString(tableName, "operator_name")

	_winGameSlot230629.fillFieldMap()

	return _winGameSlot230629
}

type winGameSlot230629 struct {
	winGameSlot230629Do

	ALL          field.Asterisk
	ID           field.String // ID(关联BrandGameId)
	GameID       field.Int64  // 游戏ID(关联game_list)
	GameGroupID  field.Int64  // 游戏大类类型:1-体育 2-电子 3-真人 4-捕鱼 5-棋牌 6-电竞 7-彩票 8-动物 9-快速 10-技能
	PlatID       field.Int64  // 游戏平台id
	Provider     field.String // 游戏提供者
	Name         field.String // 简体名称
	NameZh       field.String // 游戏名字(中文)
	Img          field.String // 英文图片
	ImgNew       field.String // 新版游戏图片
	IsNew        field.Int64  // 是否新游戏:1-是 0-否
	IsCasino     field.Int64  // 是否推荐主页 0否 1是
	GameTypeID   field.String // 游戏类型ID(0r code)
	GameTypeName field.String // 游戏类型名称
	FavoriteStar field.Int64  // 收藏值
	HotStar      field.Int64  // 热度
	Sort         field.Int64  // 排序
	Status       field.Int64  // 状态:1-启用 0-停用
	Device       field.Int64  // 设备:0-all 1-pc 2-h5
	CreatedAt    field.Int64
	UpdatedAt    field.Int64
	UpdatedUser  field.String // 最后更新人
	Maintenance  field.String // 维护信息
	OperatorName field.String // 操作人姓名

	fieldMap map[string]field.Expr
}

func (w winGameSlot230629) Table(newTableName string) *winGameSlot230629 {
	w.winGameSlot230629Do.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w winGameSlot230629) As(alias string) *winGameSlot230629 {
	w.winGameSlot230629Do.DO = *(w.winGameSlot230629Do.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *winGameSlot230629) updateTableName(table string) *winGameSlot230629 {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewString(table, "id")
	w.GameID = field.NewInt64(table, "game_id")
	w.GameGroupID = field.NewInt64(table, "game_group_id")
	w.PlatID = field.NewInt64(table, "plat_id")
	w.Provider = field.NewString(table, "provider")
	w.Name = field.NewString(table, "name")
	w.NameZh = field.NewString(table, "name_zh")
	w.Img = field.NewString(table, "img")
	w.ImgNew = field.NewString(table, "img_new")
	w.IsNew = field.NewInt64(table, "is_new")
	w.IsCasino = field.NewInt64(table, "is_casino")
	w.GameTypeID = field.NewString(table, "game_type_id")
	w.GameTypeName = field.NewString(table, "game_type_name")
	w.FavoriteStar = field.NewInt64(table, "favorite_star")
	w.HotStar = field.NewInt64(table, "hot_star")
	w.Sort = field.NewInt64(table, "sort")
	w.Status = field.NewInt64(table, "status")
	w.Device = field.NewInt64(table, "device")
	w.CreatedAt = field.NewInt64(table, "created_at")
	w.UpdatedAt = field.NewInt64(table, "updated_at")
	w.UpdatedUser = field.NewString(table, "updated_user")
	w.Maintenance = field.NewString(table, "maintenance")
	w.OperatorName = field.NewString(table, "operator_name")

	w.fillFieldMap()

	return w
}

func (w *winGameSlot230629) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *winGameSlot230629) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 23)
	w.fieldMap["id"] = w.ID
	w.fieldMap["game_id"] = w.GameID
	w.fieldMap["game_group_id"] = w.GameGroupID
	w.fieldMap["plat_id"] = w.PlatID
	w.fieldMap["provider"] = w.Provider
	w.fieldMap["name"] = w.Name
	w.fieldMap["name_zh"] = w.NameZh
	w.fieldMap["img"] = w.Img
	w.fieldMap["img_new"] = w.ImgNew
	w.fieldMap["is_new"] = w.IsNew
	w.fieldMap["is_casino"] = w.IsCasino
	w.fieldMap["game_type_id"] = w.GameTypeID
	w.fieldMap["game_type_name"] = w.GameTypeName
	w.fieldMap["favorite_star"] = w.FavoriteStar
	w.fieldMap["hot_star"] = w.HotStar
	w.fieldMap["sort"] = w.Sort
	w.fieldMap["status"] = w.Status
	w.fieldMap["device"] = w.Device
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["updated_at"] = w.UpdatedAt
	w.fieldMap["updated_user"] = w.UpdatedUser
	w.fieldMap["maintenance"] = w.Maintenance
	w.fieldMap["operator_name"] = w.OperatorName
}

func (w winGameSlot230629) clone(db *gorm.DB) winGameSlot230629 {
	w.winGameSlot230629Do.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w winGameSlot230629) replaceDB(db *gorm.DB) winGameSlot230629 {
	w.winGameSlot230629Do.ReplaceDB(db)
	return w
}

type winGameSlot230629Do struct{ gen.DO }

type IWinGameSlot230629Do interface {
	gen.SubQuery
	Debug() IWinGameSlot230629Do
	WithContext(ctx context.Context) IWinGameSlot230629Do
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWinGameSlot230629Do
	WriteDB() IWinGameSlot230629Do
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWinGameSlot230629Do
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWinGameSlot230629Do
	Not(conds ...gen.Condition) IWinGameSlot230629Do
	Or(conds ...gen.Condition) IWinGameSlot230629Do
	Select(conds ...field.Expr) IWinGameSlot230629Do
	Where(conds ...gen.Condition) IWinGameSlot230629Do
	Order(conds ...field.Expr) IWinGameSlot230629Do
	Distinct(cols ...field.Expr) IWinGameSlot230629Do
	Omit(cols ...field.Expr) IWinGameSlot230629Do
	Join(table schema.Tabler, on ...field.Expr) IWinGameSlot230629Do
	LeftJoin(table schema.Tabler, on ...field.Expr) IWinGameSlot230629Do
	RightJoin(table schema.Tabler, on ...field.Expr) IWinGameSlot230629Do
	Group(cols ...field.Expr) IWinGameSlot230629Do
	Having(conds ...gen.Condition) IWinGameSlot230629Do
	Limit(limit int) IWinGameSlot230629Do
	Offset(offset int) IWinGameSlot230629Do
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWinGameSlot230629Do
	Unscoped() IWinGameSlot230629Do
	Create(values ...*model.WinGameSlot230629) error
	CreateInBatches(values []*model.WinGameSlot230629, batchSize int) error
	Save(values ...*model.WinGameSlot230629) error
	First() (*model.WinGameSlot230629, error)
	Take() (*model.WinGameSlot230629, error)
	Last() (*model.WinGameSlot230629, error)
	Find() ([]*model.WinGameSlot230629, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinGameSlot230629, err error)
	FindInBatches(result *[]*model.WinGameSlot230629, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WinGameSlot230629) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWinGameSlot230629Do
	Assign(attrs ...field.AssignExpr) IWinGameSlot230629Do
	Joins(fields ...field.RelationField) IWinGameSlot230629Do
	Preload(fields ...field.RelationField) IWinGameSlot230629Do
	FirstOrInit() (*model.WinGameSlot230629, error)
	FirstOrCreate() (*model.WinGameSlot230629, error)
	FindByPage(offset int, limit int) (result []*model.WinGameSlot230629, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWinGameSlot230629Do
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w winGameSlot230629Do) Debug() IWinGameSlot230629Do {
	return w.withDO(w.DO.Debug())
}

func (w winGameSlot230629Do) WithContext(ctx context.Context) IWinGameSlot230629Do {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w winGameSlot230629Do) ReadDB() IWinGameSlot230629Do {
	return w.Clauses(dbresolver.Read)
}

func (w winGameSlot230629Do) WriteDB() IWinGameSlot230629Do {
	return w.Clauses(dbresolver.Write)
}

func (w winGameSlot230629Do) Session(config *gorm.Session) IWinGameSlot230629Do {
	return w.withDO(w.DO.Session(config))
}

func (w winGameSlot230629Do) Clauses(conds ...clause.Expression) IWinGameSlot230629Do {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w winGameSlot230629Do) Returning(value interface{}, columns ...string) IWinGameSlot230629Do {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w winGameSlot230629Do) Not(conds ...gen.Condition) IWinGameSlot230629Do {
	return w.withDO(w.DO.Not(conds...))
}

func (w winGameSlot230629Do) Or(conds ...gen.Condition) IWinGameSlot230629Do {
	return w.withDO(w.DO.Or(conds...))
}

func (w winGameSlot230629Do) Select(conds ...field.Expr) IWinGameSlot230629Do {
	return w.withDO(w.DO.Select(conds...))
}

func (w winGameSlot230629Do) Where(conds ...gen.Condition) IWinGameSlot230629Do {
	return w.withDO(w.DO.Where(conds...))
}

func (w winGameSlot230629Do) Order(conds ...field.Expr) IWinGameSlot230629Do {
	return w.withDO(w.DO.Order(conds...))
}

func (w winGameSlot230629Do) Distinct(cols ...field.Expr) IWinGameSlot230629Do {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w winGameSlot230629Do) Omit(cols ...field.Expr) IWinGameSlot230629Do {
	return w.withDO(w.DO.Omit(cols...))
}

func (w winGameSlot230629Do) Join(table schema.Tabler, on ...field.Expr) IWinGameSlot230629Do {
	return w.withDO(w.DO.Join(table, on...))
}

func (w winGameSlot230629Do) LeftJoin(table schema.Tabler, on ...field.Expr) IWinGameSlot230629Do {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w winGameSlot230629Do) RightJoin(table schema.Tabler, on ...field.Expr) IWinGameSlot230629Do {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w winGameSlot230629Do) Group(cols ...field.Expr) IWinGameSlot230629Do {
	return w.withDO(w.DO.Group(cols...))
}

func (w winGameSlot230629Do) Having(conds ...gen.Condition) IWinGameSlot230629Do {
	return w.withDO(w.DO.Having(conds...))
}

func (w winGameSlot230629Do) Limit(limit int) IWinGameSlot230629Do {
	return w.withDO(w.DO.Limit(limit))
}

func (w winGameSlot230629Do) Offset(offset int) IWinGameSlot230629Do {
	return w.withDO(w.DO.Offset(offset))
}

func (w winGameSlot230629Do) Scopes(funcs ...func(gen.Dao) gen.Dao) IWinGameSlot230629Do {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w winGameSlot230629Do) Unscoped() IWinGameSlot230629Do {
	return w.withDO(w.DO.Unscoped())
}

func (w winGameSlot230629Do) Create(values ...*model.WinGameSlot230629) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w winGameSlot230629Do) CreateInBatches(values []*model.WinGameSlot230629, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w winGameSlot230629Do) Save(values ...*model.WinGameSlot230629) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w winGameSlot230629Do) First() (*model.WinGameSlot230629, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinGameSlot230629), nil
	}
}

func (w winGameSlot230629Do) Take() (*model.WinGameSlot230629, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinGameSlot230629), nil
	}
}

func (w winGameSlot230629Do) Last() (*model.WinGameSlot230629, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinGameSlot230629), nil
	}
}

func (w winGameSlot230629Do) Find() ([]*model.WinGameSlot230629, error) {
	result, err := w.DO.Find()
	return result.([]*model.WinGameSlot230629), err
}

func (w winGameSlot230629Do) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinGameSlot230629, err error) {
	buf := make([]*model.WinGameSlot230629, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w winGameSlot230629Do) FindInBatches(result *[]*model.WinGameSlot230629, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w winGameSlot230629Do) Attrs(attrs ...field.AssignExpr) IWinGameSlot230629Do {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w winGameSlot230629Do) Assign(attrs ...field.AssignExpr) IWinGameSlot230629Do {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w winGameSlot230629Do) Joins(fields ...field.RelationField) IWinGameSlot230629Do {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w winGameSlot230629Do) Preload(fields ...field.RelationField) IWinGameSlot230629Do {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w winGameSlot230629Do) FirstOrInit() (*model.WinGameSlot230629, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinGameSlot230629), nil
	}
}

func (w winGameSlot230629Do) FirstOrCreate() (*model.WinGameSlot230629, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinGameSlot230629), nil
	}
}

func (w winGameSlot230629Do) FindByPage(offset int, limit int) (result []*model.WinGameSlot230629, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w winGameSlot230629Do) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w winGameSlot230629Do) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w winGameSlot230629Do) Delete(models ...*model.WinGameSlot230629) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *winGameSlot230629Do) withDO(do gen.Dao) *winGameSlot230629Do {
	w.DO = *do.(*gen.DO)
	return w
}
