// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gitlab.skig.tech/zero-core/common/zorm/model"
)

func newWinCoinDepositRecordDelUser(db *gorm.DB, opts ...gen.DOOption) winCoinDepositRecordDelUser {
	_winCoinDepositRecordDelUser := winCoinDepositRecordDelUser{}

	_winCoinDepositRecordDelUser.winCoinDepositRecordDelUserDo.UseDB(db, opts...)
	_winCoinDepositRecordDelUser.winCoinDepositRecordDelUserDo.UseModel(&model.WinCoinDepositRecordDelUser{})

	tableName := _winCoinDepositRecordDelUser.winCoinDepositRecordDelUserDo.TableName()
	_winCoinDepositRecordDelUser.ALL = field.NewAsterisk(tableName)
	_winCoinDepositRecordDelUser.ID = field.NewInt64(tableName, "id")
	_winCoinDepositRecordDelUser.OrderID = field.NewString(tableName, "order_id")
	_winCoinDepositRecordDelUser.PlatOrderID = field.NewString(tableName, "plat_order_id")
	_winCoinDepositRecordDelUser.UID = field.NewInt64(tableName, "uid")
	_winCoinDepositRecordDelUser.Username = field.NewString(tableName, "username")
	_winCoinDepositRecordDelUser.Code = field.NewString(tableName, "code")
	_winCoinDepositRecordDelUser.PlatName = field.NewString(tableName, "plat_name")
	_winCoinDepositRecordDelUser.PlatNickName = field.NewString(tableName, "plat_nick_name")
	_winCoinDepositRecordDelUser.CoinBefore = field.NewField(tableName, "coin_before")
	_winCoinDepositRecordDelUser.PayAddress = field.NewString(tableName, "pay_address")
	_winCoinDepositRecordDelUser.PayAmount = field.NewField(tableName, "pay_amount")
	_winCoinDepositRecordDelUser.ExchangeRate = field.NewField(tableName, "exchange_rate")
	_winCoinDepositRecordDelUser.RealAmount = field.NewField(tableName, "real_amount")
	_winCoinDepositRecordDelUser.Currency = field.NewString(tableName, "currency")
	_winCoinDepositRecordDelUser.DepStatus = field.NewInt64(tableName, "dep_status")
	_winCoinDepositRecordDelUser.Category = field.NewInt64(tableName, "category")
	_winCoinDepositRecordDelUser.CategoryCurrency = field.NewInt64(tableName, "category_currency")
	_winCoinDepositRecordDelUser.CategoryTransfer = field.NewInt64(tableName, "category_transfer")
	_winCoinDepositRecordDelUser.AdminUID = field.NewInt64(tableName, "admin_uid")
	_winCoinDepositRecordDelUser.Mark = field.NewString(tableName, "mark")
	_winCoinDepositRecordDelUser.Status = field.NewInt64(tableName, "status")
	_winCoinDepositRecordDelUser.CreatedAt = field.NewInt64(tableName, "created_at")
	_winCoinDepositRecordDelUser.UpdatedAt = field.NewInt64(tableName, "updated_at")

	_winCoinDepositRecordDelUser.fillFieldMap()

	return _winCoinDepositRecordDelUser
}

type winCoinDepositRecordDelUser struct {
	winCoinDepositRecordDelUserDo

	ALL              field.Asterisk
	ID               field.Int64
	OrderID          field.String // 订单号(三方平台用)
	PlatOrderID      field.String // 三方平台订单号
	UID              field.Int64  // UID
	Username         field.String // 用户名
	Code             field.String // 支付通道编码
	PlatName         field.String // 平台名称
	PlatNickName     field.String // 平台自定义名称
	CoinBefore       field.Field  // 充值前金额
	PayAddress       field.String // 加密地址
	PayAmount        field.Field  // 充值金额
	ExchangeRate     field.Field  // 汇率
	RealAmount       field.Field  // 到账金额
	Currency         field.String // 币种
	DepStatus        field.Int64  // 充值标识:1-首充 2-二充 9-其他
	Category         field.Int64  // 类型:0-钱包充值 1-佣金钱包转账充值
	CategoryCurrency field.Int64  // 货币类型:0-数字货币 1-法币
	CategoryTransfer field.Int64  // 转账类型:1-TRC-20 2-ERC-20 3-BANK 4-PIX 5-GCASH
	AdminUID         field.Int64  // 审核ID
	Mark             field.String // 备注
	Status           field.Int64  // 状态: 0-申请中 1-成功 2-失败
	CreatedAt        field.Int64
	UpdatedAt        field.Int64

	fieldMap map[string]field.Expr
}

func (w winCoinDepositRecordDelUser) Table(newTableName string) *winCoinDepositRecordDelUser {
	w.winCoinDepositRecordDelUserDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w winCoinDepositRecordDelUser) As(alias string) *winCoinDepositRecordDelUser {
	w.winCoinDepositRecordDelUserDo.DO = *(w.winCoinDepositRecordDelUserDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *winCoinDepositRecordDelUser) updateTableName(table string) *winCoinDepositRecordDelUser {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt64(table, "id")
	w.OrderID = field.NewString(table, "order_id")
	w.PlatOrderID = field.NewString(table, "plat_order_id")
	w.UID = field.NewInt64(table, "uid")
	w.Username = field.NewString(table, "username")
	w.Code = field.NewString(table, "code")
	w.PlatName = field.NewString(table, "plat_name")
	w.PlatNickName = field.NewString(table, "plat_nick_name")
	w.CoinBefore = field.NewField(table, "coin_before")
	w.PayAddress = field.NewString(table, "pay_address")
	w.PayAmount = field.NewField(table, "pay_amount")
	w.ExchangeRate = field.NewField(table, "exchange_rate")
	w.RealAmount = field.NewField(table, "real_amount")
	w.Currency = field.NewString(table, "currency")
	w.DepStatus = field.NewInt64(table, "dep_status")
	w.Category = field.NewInt64(table, "category")
	w.CategoryCurrency = field.NewInt64(table, "category_currency")
	w.CategoryTransfer = field.NewInt64(table, "category_transfer")
	w.AdminUID = field.NewInt64(table, "admin_uid")
	w.Mark = field.NewString(table, "mark")
	w.Status = field.NewInt64(table, "status")
	w.CreatedAt = field.NewInt64(table, "created_at")
	w.UpdatedAt = field.NewInt64(table, "updated_at")

	w.fillFieldMap()

	return w
}

func (w *winCoinDepositRecordDelUser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *winCoinDepositRecordDelUser) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 23)
	w.fieldMap["id"] = w.ID
	w.fieldMap["order_id"] = w.OrderID
	w.fieldMap["plat_order_id"] = w.PlatOrderID
	w.fieldMap["uid"] = w.UID
	w.fieldMap["username"] = w.Username
	w.fieldMap["code"] = w.Code
	w.fieldMap["plat_name"] = w.PlatName
	w.fieldMap["plat_nick_name"] = w.PlatNickName
	w.fieldMap["coin_before"] = w.CoinBefore
	w.fieldMap["pay_address"] = w.PayAddress
	w.fieldMap["pay_amount"] = w.PayAmount
	w.fieldMap["exchange_rate"] = w.ExchangeRate
	w.fieldMap["real_amount"] = w.RealAmount
	w.fieldMap["currency"] = w.Currency
	w.fieldMap["dep_status"] = w.DepStatus
	w.fieldMap["category"] = w.Category
	w.fieldMap["category_currency"] = w.CategoryCurrency
	w.fieldMap["category_transfer"] = w.CategoryTransfer
	w.fieldMap["admin_uid"] = w.AdminUID
	w.fieldMap["mark"] = w.Mark
	w.fieldMap["status"] = w.Status
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["updated_at"] = w.UpdatedAt
}

func (w winCoinDepositRecordDelUser) clone(db *gorm.DB) winCoinDepositRecordDelUser {
	w.winCoinDepositRecordDelUserDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w winCoinDepositRecordDelUser) replaceDB(db *gorm.DB) winCoinDepositRecordDelUser {
	w.winCoinDepositRecordDelUserDo.ReplaceDB(db)
	return w
}

type winCoinDepositRecordDelUserDo struct{ gen.DO }

type IWinCoinDepositRecordDelUserDo interface {
	gen.SubQuery
	Debug() IWinCoinDepositRecordDelUserDo
	WithContext(ctx context.Context) IWinCoinDepositRecordDelUserDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWinCoinDepositRecordDelUserDo
	WriteDB() IWinCoinDepositRecordDelUserDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWinCoinDepositRecordDelUserDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWinCoinDepositRecordDelUserDo
	Not(conds ...gen.Condition) IWinCoinDepositRecordDelUserDo
	Or(conds ...gen.Condition) IWinCoinDepositRecordDelUserDo
	Select(conds ...field.Expr) IWinCoinDepositRecordDelUserDo
	Where(conds ...gen.Condition) IWinCoinDepositRecordDelUserDo
	Order(conds ...field.Expr) IWinCoinDepositRecordDelUserDo
	Distinct(cols ...field.Expr) IWinCoinDepositRecordDelUserDo
	Omit(cols ...field.Expr) IWinCoinDepositRecordDelUserDo
	Join(table schema.Tabler, on ...field.Expr) IWinCoinDepositRecordDelUserDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWinCoinDepositRecordDelUserDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWinCoinDepositRecordDelUserDo
	Group(cols ...field.Expr) IWinCoinDepositRecordDelUserDo
	Having(conds ...gen.Condition) IWinCoinDepositRecordDelUserDo
	Limit(limit int) IWinCoinDepositRecordDelUserDo
	Offset(offset int) IWinCoinDepositRecordDelUserDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWinCoinDepositRecordDelUserDo
	Unscoped() IWinCoinDepositRecordDelUserDo
	Create(values ...*model.WinCoinDepositRecordDelUser) error
	CreateInBatches(values []*model.WinCoinDepositRecordDelUser, batchSize int) error
	Save(values ...*model.WinCoinDepositRecordDelUser) error
	First() (*model.WinCoinDepositRecordDelUser, error)
	Take() (*model.WinCoinDepositRecordDelUser, error)
	Last() (*model.WinCoinDepositRecordDelUser, error)
	Find() ([]*model.WinCoinDepositRecordDelUser, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinCoinDepositRecordDelUser, err error)
	FindInBatches(result *[]*model.WinCoinDepositRecordDelUser, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WinCoinDepositRecordDelUser) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWinCoinDepositRecordDelUserDo
	Assign(attrs ...field.AssignExpr) IWinCoinDepositRecordDelUserDo
	Joins(fields ...field.RelationField) IWinCoinDepositRecordDelUserDo
	Preload(fields ...field.RelationField) IWinCoinDepositRecordDelUserDo
	FirstOrInit() (*model.WinCoinDepositRecordDelUser, error)
	FirstOrCreate() (*model.WinCoinDepositRecordDelUser, error)
	FindByPage(offset int, limit int) (result []*model.WinCoinDepositRecordDelUser, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWinCoinDepositRecordDelUserDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w winCoinDepositRecordDelUserDo) Debug() IWinCoinDepositRecordDelUserDo {
	return w.withDO(w.DO.Debug())
}

func (w winCoinDepositRecordDelUserDo) WithContext(ctx context.Context) IWinCoinDepositRecordDelUserDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w winCoinDepositRecordDelUserDo) ReadDB() IWinCoinDepositRecordDelUserDo {
	return w.Clauses(dbresolver.Read)
}

func (w winCoinDepositRecordDelUserDo) WriteDB() IWinCoinDepositRecordDelUserDo {
	return w.Clauses(dbresolver.Write)
}

func (w winCoinDepositRecordDelUserDo) Session(config *gorm.Session) IWinCoinDepositRecordDelUserDo {
	return w.withDO(w.DO.Session(config))
}

func (w winCoinDepositRecordDelUserDo) Clauses(conds ...clause.Expression) IWinCoinDepositRecordDelUserDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w winCoinDepositRecordDelUserDo) Returning(value interface{}, columns ...string) IWinCoinDepositRecordDelUserDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w winCoinDepositRecordDelUserDo) Not(conds ...gen.Condition) IWinCoinDepositRecordDelUserDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w winCoinDepositRecordDelUserDo) Or(conds ...gen.Condition) IWinCoinDepositRecordDelUserDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w winCoinDepositRecordDelUserDo) Select(conds ...field.Expr) IWinCoinDepositRecordDelUserDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w winCoinDepositRecordDelUserDo) Where(conds ...gen.Condition) IWinCoinDepositRecordDelUserDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w winCoinDepositRecordDelUserDo) Order(conds ...field.Expr) IWinCoinDepositRecordDelUserDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w winCoinDepositRecordDelUserDo) Distinct(cols ...field.Expr) IWinCoinDepositRecordDelUserDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w winCoinDepositRecordDelUserDo) Omit(cols ...field.Expr) IWinCoinDepositRecordDelUserDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w winCoinDepositRecordDelUserDo) Join(table schema.Tabler, on ...field.Expr) IWinCoinDepositRecordDelUserDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w winCoinDepositRecordDelUserDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWinCoinDepositRecordDelUserDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w winCoinDepositRecordDelUserDo) RightJoin(table schema.Tabler, on ...field.Expr) IWinCoinDepositRecordDelUserDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w winCoinDepositRecordDelUserDo) Group(cols ...field.Expr) IWinCoinDepositRecordDelUserDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w winCoinDepositRecordDelUserDo) Having(conds ...gen.Condition) IWinCoinDepositRecordDelUserDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w winCoinDepositRecordDelUserDo) Limit(limit int) IWinCoinDepositRecordDelUserDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w winCoinDepositRecordDelUserDo) Offset(offset int) IWinCoinDepositRecordDelUserDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w winCoinDepositRecordDelUserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWinCoinDepositRecordDelUserDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w winCoinDepositRecordDelUserDo) Unscoped() IWinCoinDepositRecordDelUserDo {
	return w.withDO(w.DO.Unscoped())
}

func (w winCoinDepositRecordDelUserDo) Create(values ...*model.WinCoinDepositRecordDelUser) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w winCoinDepositRecordDelUserDo) CreateInBatches(values []*model.WinCoinDepositRecordDelUser, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w winCoinDepositRecordDelUserDo) Save(values ...*model.WinCoinDepositRecordDelUser) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w winCoinDepositRecordDelUserDo) First() (*model.WinCoinDepositRecordDelUser, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinCoinDepositRecordDelUser), nil
	}
}

func (w winCoinDepositRecordDelUserDo) Take() (*model.WinCoinDepositRecordDelUser, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinCoinDepositRecordDelUser), nil
	}
}

func (w winCoinDepositRecordDelUserDo) Last() (*model.WinCoinDepositRecordDelUser, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinCoinDepositRecordDelUser), nil
	}
}

func (w winCoinDepositRecordDelUserDo) Find() ([]*model.WinCoinDepositRecordDelUser, error) {
	result, err := w.DO.Find()
	return result.([]*model.WinCoinDepositRecordDelUser), err
}

func (w winCoinDepositRecordDelUserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinCoinDepositRecordDelUser, err error) {
	buf := make([]*model.WinCoinDepositRecordDelUser, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w winCoinDepositRecordDelUserDo) FindInBatches(result *[]*model.WinCoinDepositRecordDelUser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w winCoinDepositRecordDelUserDo) Attrs(attrs ...field.AssignExpr) IWinCoinDepositRecordDelUserDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w winCoinDepositRecordDelUserDo) Assign(attrs ...field.AssignExpr) IWinCoinDepositRecordDelUserDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w winCoinDepositRecordDelUserDo) Joins(fields ...field.RelationField) IWinCoinDepositRecordDelUserDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w winCoinDepositRecordDelUserDo) Preload(fields ...field.RelationField) IWinCoinDepositRecordDelUserDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w winCoinDepositRecordDelUserDo) FirstOrInit() (*model.WinCoinDepositRecordDelUser, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinCoinDepositRecordDelUser), nil
	}
}

func (w winCoinDepositRecordDelUserDo) FirstOrCreate() (*model.WinCoinDepositRecordDelUser, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinCoinDepositRecordDelUser), nil
	}
}

func (w winCoinDepositRecordDelUserDo) FindByPage(offset int, limit int) (result []*model.WinCoinDepositRecordDelUser, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w winCoinDepositRecordDelUserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w winCoinDepositRecordDelUserDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w winCoinDepositRecordDelUserDo) Delete(models ...*model.WinCoinDepositRecordDelUser) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *winCoinDepositRecordDelUserDo) withDO(do gen.Dao) *winCoinDepositRecordDelUserDo {
	w.DO = *do.(*gen.DO)
	return w
}
