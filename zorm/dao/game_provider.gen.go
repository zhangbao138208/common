// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gitlab.skig.tech/zero-core/common/zorm/model"
)

func newGameProvider(db *gorm.DB, opts ...gen.DOOption) gameProvider {
	_gameProvider := gameProvider{}

	_gameProvider.gameProviderDo.UseDB(db, opts...)
	_gameProvider.gameProviderDo.UseModel(&model.GameProvider{})

	tableName := _gameProvider.gameProviderDo.TableName()
	_gameProvider.ALL = field.NewAsterisk(tableName)
	_gameProvider.ID = field.NewInt64(tableName, "id")
	_gameProvider.Code = field.NewString(tableName, "code")
	_gameProvider.Name = field.NewString(tableName, "name")
	_gameProvider.Icon = field.NewString(tableName, "icon")
	_gameProvider.Config = field.NewString(tableName, "config")
	_gameProvider.Sort = field.NewInt64(tableName, "sort")
	_gameProvider.ConfigStatus = field.NewInt64(tableName, "config_status")
	_gameProvider.CreatedAt = field.NewInt64(tableName, "created_at")
	_gameProvider.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_gameProvider.CreatedBy = field.NewString(tableName, "created_by")
	_gameProvider.UpdatedBy = field.NewString(tableName, "updated_by")

	_gameProvider.fillFieldMap()

	return _gameProvider
}

type gameProvider struct {
	gameProviderDo

	ALL          field.Asterisk
	ID           field.Int64
	Code         field.String // 平台编码
	Name         field.String // 平台名称
	Icon         field.String
	Config       field.String // 配置信息
	Sort         field.Int64  // 排序: 从低到高
	ConfigStatus field.Int64  // 状态: 1-启用 0-停用
	CreatedAt    field.Int64
	UpdatedAt    field.Int64
	CreatedBy    field.String // 操作人姓名
	UpdatedBy    field.String // 最后更新人

	fieldMap map[string]field.Expr
}

func (g gameProvider) Table(newTableName string) *gameProvider {
	g.gameProviderDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g gameProvider) As(alias string) *gameProvider {
	g.gameProviderDo.DO = *(g.gameProviderDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *gameProvider) updateTableName(table string) *gameProvider {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewInt64(table, "id")
	g.Code = field.NewString(table, "code")
	g.Name = field.NewString(table, "name")
	g.Icon = field.NewString(table, "icon")
	g.Config = field.NewString(table, "config")
	g.Sort = field.NewInt64(table, "sort")
	g.ConfigStatus = field.NewInt64(table, "config_status")
	g.CreatedAt = field.NewInt64(table, "created_at")
	g.UpdatedAt = field.NewInt64(table, "updated_at")
	g.CreatedBy = field.NewString(table, "created_by")
	g.UpdatedBy = field.NewString(table, "updated_by")

	g.fillFieldMap()

	return g
}

func (g *gameProvider) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *gameProvider) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 11)
	g.fieldMap["id"] = g.ID
	g.fieldMap["code"] = g.Code
	g.fieldMap["name"] = g.Name
	g.fieldMap["icon"] = g.Icon
	g.fieldMap["config"] = g.Config
	g.fieldMap["sort"] = g.Sort
	g.fieldMap["config_status"] = g.ConfigStatus
	g.fieldMap["created_at"] = g.CreatedAt
	g.fieldMap["updated_at"] = g.UpdatedAt
	g.fieldMap["created_by"] = g.CreatedBy
	g.fieldMap["updated_by"] = g.UpdatedBy
}

func (g gameProvider) clone(db *gorm.DB) gameProvider {
	g.gameProviderDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g gameProvider) replaceDB(db *gorm.DB) gameProvider {
	g.gameProviderDo.ReplaceDB(db)
	return g
}

type gameProviderDo struct{ gen.DO }

type IGameProviderDo interface {
	gen.SubQuery
	Debug() IGameProviderDo
	WithContext(ctx context.Context) IGameProviderDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGameProviderDo
	WriteDB() IGameProviderDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGameProviderDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGameProviderDo
	Not(conds ...gen.Condition) IGameProviderDo
	Or(conds ...gen.Condition) IGameProviderDo
	Select(conds ...field.Expr) IGameProviderDo
	Where(conds ...gen.Condition) IGameProviderDo
	Order(conds ...field.Expr) IGameProviderDo
	Distinct(cols ...field.Expr) IGameProviderDo
	Omit(cols ...field.Expr) IGameProviderDo
	Join(table schema.Tabler, on ...field.Expr) IGameProviderDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGameProviderDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGameProviderDo
	Group(cols ...field.Expr) IGameProviderDo
	Having(conds ...gen.Condition) IGameProviderDo
	Limit(limit int) IGameProviderDo
	Offset(offset int) IGameProviderDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGameProviderDo
	Unscoped() IGameProviderDo
	Create(values ...*model.GameProvider) error
	CreateInBatches(values []*model.GameProvider, batchSize int) error
	Save(values ...*model.GameProvider) error
	First() (*model.GameProvider, error)
	Take() (*model.GameProvider, error)
	Last() (*model.GameProvider, error)
	Find() ([]*model.GameProvider, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GameProvider, err error)
	FindInBatches(result *[]*model.GameProvider, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GameProvider) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGameProviderDo
	Assign(attrs ...field.AssignExpr) IGameProviderDo
	Joins(fields ...field.RelationField) IGameProviderDo
	Preload(fields ...field.RelationField) IGameProviderDo
	FirstOrInit() (*model.GameProvider, error)
	FirstOrCreate() (*model.GameProvider, error)
	FindByPage(offset int, limit int) (result []*model.GameProvider, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGameProviderDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (g gameProviderDo) Debug() IGameProviderDo {
	return g.withDO(g.DO.Debug())
}

func (g gameProviderDo) WithContext(ctx context.Context) IGameProviderDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g gameProviderDo) ReadDB() IGameProviderDo {
	return g.Clauses(dbresolver.Read)
}

func (g gameProviderDo) WriteDB() IGameProviderDo {
	return g.Clauses(dbresolver.Write)
}

func (g gameProviderDo) Session(config *gorm.Session) IGameProviderDo {
	return g.withDO(g.DO.Session(config))
}

func (g gameProviderDo) Clauses(conds ...clause.Expression) IGameProviderDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g gameProviderDo) Returning(value interface{}, columns ...string) IGameProviderDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g gameProviderDo) Not(conds ...gen.Condition) IGameProviderDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g gameProviderDo) Or(conds ...gen.Condition) IGameProviderDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g gameProviderDo) Select(conds ...field.Expr) IGameProviderDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g gameProviderDo) Where(conds ...gen.Condition) IGameProviderDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g gameProviderDo) Order(conds ...field.Expr) IGameProviderDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g gameProviderDo) Distinct(cols ...field.Expr) IGameProviderDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g gameProviderDo) Omit(cols ...field.Expr) IGameProviderDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g gameProviderDo) Join(table schema.Tabler, on ...field.Expr) IGameProviderDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g gameProviderDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGameProviderDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g gameProviderDo) RightJoin(table schema.Tabler, on ...field.Expr) IGameProviderDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g gameProviderDo) Group(cols ...field.Expr) IGameProviderDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g gameProviderDo) Having(conds ...gen.Condition) IGameProviderDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g gameProviderDo) Limit(limit int) IGameProviderDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g gameProviderDo) Offset(offset int) IGameProviderDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g gameProviderDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGameProviderDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g gameProviderDo) Unscoped() IGameProviderDo {
	return g.withDO(g.DO.Unscoped())
}

func (g gameProviderDo) Create(values ...*model.GameProvider) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g gameProviderDo) CreateInBatches(values []*model.GameProvider, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g gameProviderDo) Save(values ...*model.GameProvider) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g gameProviderDo) First() (*model.GameProvider, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GameProvider), nil
	}
}

func (g gameProviderDo) Take() (*model.GameProvider, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GameProvider), nil
	}
}

func (g gameProviderDo) Last() (*model.GameProvider, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GameProvider), nil
	}
}

func (g gameProviderDo) Find() ([]*model.GameProvider, error) {
	result, err := g.DO.Find()
	return result.([]*model.GameProvider), err
}

func (g gameProviderDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GameProvider, err error) {
	buf := make([]*model.GameProvider, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g gameProviderDo) FindInBatches(result *[]*model.GameProvider, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g gameProviderDo) Attrs(attrs ...field.AssignExpr) IGameProviderDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g gameProviderDo) Assign(attrs ...field.AssignExpr) IGameProviderDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g gameProviderDo) Joins(fields ...field.RelationField) IGameProviderDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g gameProviderDo) Preload(fields ...field.RelationField) IGameProviderDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g gameProviderDo) FirstOrInit() (*model.GameProvider, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GameProvider), nil
	}
}

func (g gameProviderDo) FirstOrCreate() (*model.GameProvider, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GameProvider), nil
	}
}

func (g gameProviderDo) FindByPage(offset int, limit int) (result []*model.GameProvider, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g gameProviderDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g gameProviderDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g gameProviderDo) Delete(models ...*model.GameProvider) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *gameProviderDo) withDO(do gen.Dao) *gameProviderDo {
	g.DO = *do.(*gen.DO)
	return g
}
