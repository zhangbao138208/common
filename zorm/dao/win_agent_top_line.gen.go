// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gitlab.skig.tech/zero-core/common/zorm/model"
)

func newWinAgentTopLine(db *gorm.DB, opts ...gen.DOOption) winAgentTopLine {
	_winAgentTopLine := winAgentTopLine{}

	_winAgentTopLine.winAgentTopLineDo.UseDB(db, opts...)
	_winAgentTopLine.winAgentTopLineDo.UseModel(&model.WinAgentTopLine{})

	tableName := _winAgentTopLine.winAgentTopLineDo.TableName()
	_winAgentTopLine.ALL = field.NewAsterisk(tableName)
	_winAgentTopLine.ID = field.NewInt64(tableName, "id")
	_winAgentTopLine.TopAgentUID = field.NewInt64(tableName, "top_agent_uid")
	_winAgentTopLine.AgentLineUID = field.NewInt64(tableName, "agent_line_uid")
	_winAgentTopLine.CreatedAt = field.NewInt64(tableName, "created_at")

	_winAgentTopLine.fillFieldMap()

	return _winAgentTopLine
}

type winAgentTopLine struct {
	winAgentTopLineDo

	ALL          field.Asterisk
	ID           field.Int64
	TopAgentUID  field.Int64 // 总代理
	AgentLineUID field.Int64 // 代理线
	CreatedAt    field.Int64 // 创建时间

	fieldMap map[string]field.Expr
}

func (w winAgentTopLine) Table(newTableName string) *winAgentTopLine {
	w.winAgentTopLineDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w winAgentTopLine) As(alias string) *winAgentTopLine {
	w.winAgentTopLineDo.DO = *(w.winAgentTopLineDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *winAgentTopLine) updateTableName(table string) *winAgentTopLine {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt64(table, "id")
	w.TopAgentUID = field.NewInt64(table, "top_agent_uid")
	w.AgentLineUID = field.NewInt64(table, "agent_line_uid")
	w.CreatedAt = field.NewInt64(table, "created_at")

	w.fillFieldMap()

	return w
}

func (w *winAgentTopLine) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *winAgentTopLine) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 4)
	w.fieldMap["id"] = w.ID
	w.fieldMap["top_agent_uid"] = w.TopAgentUID
	w.fieldMap["agent_line_uid"] = w.AgentLineUID
	w.fieldMap["created_at"] = w.CreatedAt
}

func (w winAgentTopLine) clone(db *gorm.DB) winAgentTopLine {
	w.winAgentTopLineDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w winAgentTopLine) replaceDB(db *gorm.DB) winAgentTopLine {
	w.winAgentTopLineDo.ReplaceDB(db)
	return w
}

type winAgentTopLineDo struct{ gen.DO }

type IWinAgentTopLineDo interface {
	gen.SubQuery
	Debug() IWinAgentTopLineDo
	WithContext(ctx context.Context) IWinAgentTopLineDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWinAgentTopLineDo
	WriteDB() IWinAgentTopLineDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWinAgentTopLineDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWinAgentTopLineDo
	Not(conds ...gen.Condition) IWinAgentTopLineDo
	Or(conds ...gen.Condition) IWinAgentTopLineDo
	Select(conds ...field.Expr) IWinAgentTopLineDo
	Where(conds ...gen.Condition) IWinAgentTopLineDo
	Order(conds ...field.Expr) IWinAgentTopLineDo
	Distinct(cols ...field.Expr) IWinAgentTopLineDo
	Omit(cols ...field.Expr) IWinAgentTopLineDo
	Join(table schema.Tabler, on ...field.Expr) IWinAgentTopLineDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWinAgentTopLineDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWinAgentTopLineDo
	Group(cols ...field.Expr) IWinAgentTopLineDo
	Having(conds ...gen.Condition) IWinAgentTopLineDo
	Limit(limit int) IWinAgentTopLineDo
	Offset(offset int) IWinAgentTopLineDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWinAgentTopLineDo
	Unscoped() IWinAgentTopLineDo
	Create(values ...*model.WinAgentTopLine) error
	CreateInBatches(values []*model.WinAgentTopLine, batchSize int) error
	Save(values ...*model.WinAgentTopLine) error
	First() (*model.WinAgentTopLine, error)
	Take() (*model.WinAgentTopLine, error)
	Last() (*model.WinAgentTopLine, error)
	Find() ([]*model.WinAgentTopLine, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinAgentTopLine, err error)
	FindInBatches(result *[]*model.WinAgentTopLine, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WinAgentTopLine) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWinAgentTopLineDo
	Assign(attrs ...field.AssignExpr) IWinAgentTopLineDo
	Joins(fields ...field.RelationField) IWinAgentTopLineDo
	Preload(fields ...field.RelationField) IWinAgentTopLineDo
	FirstOrInit() (*model.WinAgentTopLine, error)
	FirstOrCreate() (*model.WinAgentTopLine, error)
	FindByPage(offset int, limit int) (result []*model.WinAgentTopLine, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWinAgentTopLineDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w winAgentTopLineDo) Debug() IWinAgentTopLineDo {
	return w.withDO(w.DO.Debug())
}

func (w winAgentTopLineDo) WithContext(ctx context.Context) IWinAgentTopLineDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w winAgentTopLineDo) ReadDB() IWinAgentTopLineDo {
	return w.Clauses(dbresolver.Read)
}

func (w winAgentTopLineDo) WriteDB() IWinAgentTopLineDo {
	return w.Clauses(dbresolver.Write)
}

func (w winAgentTopLineDo) Session(config *gorm.Session) IWinAgentTopLineDo {
	return w.withDO(w.DO.Session(config))
}

func (w winAgentTopLineDo) Clauses(conds ...clause.Expression) IWinAgentTopLineDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w winAgentTopLineDo) Returning(value interface{}, columns ...string) IWinAgentTopLineDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w winAgentTopLineDo) Not(conds ...gen.Condition) IWinAgentTopLineDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w winAgentTopLineDo) Or(conds ...gen.Condition) IWinAgentTopLineDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w winAgentTopLineDo) Select(conds ...field.Expr) IWinAgentTopLineDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w winAgentTopLineDo) Where(conds ...gen.Condition) IWinAgentTopLineDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w winAgentTopLineDo) Order(conds ...field.Expr) IWinAgentTopLineDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w winAgentTopLineDo) Distinct(cols ...field.Expr) IWinAgentTopLineDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w winAgentTopLineDo) Omit(cols ...field.Expr) IWinAgentTopLineDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w winAgentTopLineDo) Join(table schema.Tabler, on ...field.Expr) IWinAgentTopLineDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w winAgentTopLineDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWinAgentTopLineDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w winAgentTopLineDo) RightJoin(table schema.Tabler, on ...field.Expr) IWinAgentTopLineDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w winAgentTopLineDo) Group(cols ...field.Expr) IWinAgentTopLineDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w winAgentTopLineDo) Having(conds ...gen.Condition) IWinAgentTopLineDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w winAgentTopLineDo) Limit(limit int) IWinAgentTopLineDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w winAgentTopLineDo) Offset(offset int) IWinAgentTopLineDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w winAgentTopLineDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWinAgentTopLineDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w winAgentTopLineDo) Unscoped() IWinAgentTopLineDo {
	return w.withDO(w.DO.Unscoped())
}

func (w winAgentTopLineDo) Create(values ...*model.WinAgentTopLine) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w winAgentTopLineDo) CreateInBatches(values []*model.WinAgentTopLine, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w winAgentTopLineDo) Save(values ...*model.WinAgentTopLine) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w winAgentTopLineDo) First() (*model.WinAgentTopLine, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinAgentTopLine), nil
	}
}

func (w winAgentTopLineDo) Take() (*model.WinAgentTopLine, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinAgentTopLine), nil
	}
}

func (w winAgentTopLineDo) Last() (*model.WinAgentTopLine, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinAgentTopLine), nil
	}
}

func (w winAgentTopLineDo) Find() ([]*model.WinAgentTopLine, error) {
	result, err := w.DO.Find()
	return result.([]*model.WinAgentTopLine), err
}

func (w winAgentTopLineDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinAgentTopLine, err error) {
	buf := make([]*model.WinAgentTopLine, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w winAgentTopLineDo) FindInBatches(result *[]*model.WinAgentTopLine, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w winAgentTopLineDo) Attrs(attrs ...field.AssignExpr) IWinAgentTopLineDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w winAgentTopLineDo) Assign(attrs ...field.AssignExpr) IWinAgentTopLineDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w winAgentTopLineDo) Joins(fields ...field.RelationField) IWinAgentTopLineDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w winAgentTopLineDo) Preload(fields ...field.RelationField) IWinAgentTopLineDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w winAgentTopLineDo) FirstOrInit() (*model.WinAgentTopLine, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinAgentTopLine), nil
	}
}

func (w winAgentTopLineDo) FirstOrCreate() (*model.WinAgentTopLine, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinAgentTopLine), nil
	}
}

func (w winAgentTopLineDo) FindByPage(offset int, limit int) (result []*model.WinAgentTopLine, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w winAgentTopLineDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w winAgentTopLineDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w winAgentTopLineDo) Delete(models ...*model.WinAgentTopLine) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *winAgentTopLineDo) withDO(do gen.Dao) *winAgentTopLineDo {
	w.DO = *do.(*gen.DO)
	return w
}
