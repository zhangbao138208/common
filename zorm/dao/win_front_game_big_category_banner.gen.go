// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gitlab.skig.tech/zero-core/common/zorm/model"
)

func newWinFrontGameBigCategoryBanner(db *gorm.DB, opts ...gen.DOOption) winFrontGameBigCategoryBanner {
	_winFrontGameBigCategoryBanner := winFrontGameBigCategoryBanner{}

	_winFrontGameBigCategoryBanner.winFrontGameBigCategoryBannerDo.UseDB(db, opts...)
	_winFrontGameBigCategoryBanner.winFrontGameBigCategoryBannerDo.UseModel(&model.WinFrontGameBigCategoryBanner{})

	tableName := _winFrontGameBigCategoryBanner.winFrontGameBigCategoryBannerDo.TableName()
	_winFrontGameBigCategoryBanner.ALL = field.NewAsterisk(tableName)
	_winFrontGameBigCategoryBanner.ID = field.NewInt64(tableName, "id")
	_winFrontGameBigCategoryBanner.Name = field.NewString(tableName, "name")
	_winFrontGameBigCategoryBanner.PcImg = field.NewString(tableName, "pc_img")
	_winFrontGameBigCategoryBanner.H5Img = field.NewString(tableName, "h5_img")
	_winFrontGameBigCategoryBanner.GameGroupID = field.NewInt64(tableName, "game_group_id")
	_winFrontGameBigCategoryBanner.Sort = field.NewInt64(tableName, "sort")
	_winFrontGameBigCategoryBanner.Status = field.NewInt64(tableName, "status")
	_winFrontGameBigCategoryBanner.CreatedAt = field.NewInt64(tableName, "created_at")
	_winFrontGameBigCategoryBanner.CreatedBy = field.NewString(tableName, "created_by")
	_winFrontGameBigCategoryBanner.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_winFrontGameBigCategoryBanner.UpdatedBy = field.NewString(tableName, "updated_by")

	_winFrontGameBigCategoryBanner.fillFieldMap()

	return _winFrontGameBigCategoryBanner
}

type winFrontGameBigCategoryBanner struct {
	winFrontGameBigCategoryBannerDo

	ALL         field.Asterisk
	ID          field.Int64
	Name        field.String // 名称
	PcImg       field.String // pc图片地址
	H5Img       field.String // h5图片地址
	GameGroupID field.Int64  // 游戏大类id
	Sort        field.Int64  // 排序字段
	Status      field.Int64  // 状态:1-启用 0-停用
	CreatedAt   field.Int64
	CreatedBy   field.String // 创建者
	UpdatedAt   field.Int64
	UpdatedBy   field.String // 更新人

	fieldMap map[string]field.Expr
}

func (w winFrontGameBigCategoryBanner) Table(newTableName string) *winFrontGameBigCategoryBanner {
	w.winFrontGameBigCategoryBannerDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w winFrontGameBigCategoryBanner) As(alias string) *winFrontGameBigCategoryBanner {
	w.winFrontGameBigCategoryBannerDo.DO = *(w.winFrontGameBigCategoryBannerDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *winFrontGameBigCategoryBanner) updateTableName(table string) *winFrontGameBigCategoryBanner {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt64(table, "id")
	w.Name = field.NewString(table, "name")
	w.PcImg = field.NewString(table, "pc_img")
	w.H5Img = field.NewString(table, "h5_img")
	w.GameGroupID = field.NewInt64(table, "game_group_id")
	w.Sort = field.NewInt64(table, "sort")
	w.Status = field.NewInt64(table, "status")
	w.CreatedAt = field.NewInt64(table, "created_at")
	w.CreatedBy = field.NewString(table, "created_by")
	w.UpdatedAt = field.NewInt64(table, "updated_at")
	w.UpdatedBy = field.NewString(table, "updated_by")

	w.fillFieldMap()

	return w
}

func (w *winFrontGameBigCategoryBanner) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *winFrontGameBigCategoryBanner) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 11)
	w.fieldMap["id"] = w.ID
	w.fieldMap["name"] = w.Name
	w.fieldMap["pc_img"] = w.PcImg
	w.fieldMap["h5_img"] = w.H5Img
	w.fieldMap["game_group_id"] = w.GameGroupID
	w.fieldMap["sort"] = w.Sort
	w.fieldMap["status"] = w.Status
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["created_by"] = w.CreatedBy
	w.fieldMap["updated_at"] = w.UpdatedAt
	w.fieldMap["updated_by"] = w.UpdatedBy
}

func (w winFrontGameBigCategoryBanner) clone(db *gorm.DB) winFrontGameBigCategoryBanner {
	w.winFrontGameBigCategoryBannerDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w winFrontGameBigCategoryBanner) replaceDB(db *gorm.DB) winFrontGameBigCategoryBanner {
	w.winFrontGameBigCategoryBannerDo.ReplaceDB(db)
	return w
}

type winFrontGameBigCategoryBannerDo struct{ gen.DO }

type IWinFrontGameBigCategoryBannerDo interface {
	gen.SubQuery
	Debug() IWinFrontGameBigCategoryBannerDo
	WithContext(ctx context.Context) IWinFrontGameBigCategoryBannerDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWinFrontGameBigCategoryBannerDo
	WriteDB() IWinFrontGameBigCategoryBannerDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWinFrontGameBigCategoryBannerDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWinFrontGameBigCategoryBannerDo
	Not(conds ...gen.Condition) IWinFrontGameBigCategoryBannerDo
	Or(conds ...gen.Condition) IWinFrontGameBigCategoryBannerDo
	Select(conds ...field.Expr) IWinFrontGameBigCategoryBannerDo
	Where(conds ...gen.Condition) IWinFrontGameBigCategoryBannerDo
	Order(conds ...field.Expr) IWinFrontGameBigCategoryBannerDo
	Distinct(cols ...field.Expr) IWinFrontGameBigCategoryBannerDo
	Omit(cols ...field.Expr) IWinFrontGameBigCategoryBannerDo
	Join(table schema.Tabler, on ...field.Expr) IWinFrontGameBigCategoryBannerDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWinFrontGameBigCategoryBannerDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWinFrontGameBigCategoryBannerDo
	Group(cols ...field.Expr) IWinFrontGameBigCategoryBannerDo
	Having(conds ...gen.Condition) IWinFrontGameBigCategoryBannerDo
	Limit(limit int) IWinFrontGameBigCategoryBannerDo
	Offset(offset int) IWinFrontGameBigCategoryBannerDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWinFrontGameBigCategoryBannerDo
	Unscoped() IWinFrontGameBigCategoryBannerDo
	Create(values ...*model.WinFrontGameBigCategoryBanner) error
	CreateInBatches(values []*model.WinFrontGameBigCategoryBanner, batchSize int) error
	Save(values ...*model.WinFrontGameBigCategoryBanner) error
	First() (*model.WinFrontGameBigCategoryBanner, error)
	Take() (*model.WinFrontGameBigCategoryBanner, error)
	Last() (*model.WinFrontGameBigCategoryBanner, error)
	Find() ([]*model.WinFrontGameBigCategoryBanner, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinFrontGameBigCategoryBanner, err error)
	FindInBatches(result *[]*model.WinFrontGameBigCategoryBanner, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WinFrontGameBigCategoryBanner) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWinFrontGameBigCategoryBannerDo
	Assign(attrs ...field.AssignExpr) IWinFrontGameBigCategoryBannerDo
	Joins(fields ...field.RelationField) IWinFrontGameBigCategoryBannerDo
	Preload(fields ...field.RelationField) IWinFrontGameBigCategoryBannerDo
	FirstOrInit() (*model.WinFrontGameBigCategoryBanner, error)
	FirstOrCreate() (*model.WinFrontGameBigCategoryBanner, error)
	FindByPage(offset int, limit int) (result []*model.WinFrontGameBigCategoryBanner, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWinFrontGameBigCategoryBannerDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w winFrontGameBigCategoryBannerDo) Debug() IWinFrontGameBigCategoryBannerDo {
	return w.withDO(w.DO.Debug())
}

func (w winFrontGameBigCategoryBannerDo) WithContext(ctx context.Context) IWinFrontGameBigCategoryBannerDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w winFrontGameBigCategoryBannerDo) ReadDB() IWinFrontGameBigCategoryBannerDo {
	return w.Clauses(dbresolver.Read)
}

func (w winFrontGameBigCategoryBannerDo) WriteDB() IWinFrontGameBigCategoryBannerDo {
	return w.Clauses(dbresolver.Write)
}

func (w winFrontGameBigCategoryBannerDo) Session(config *gorm.Session) IWinFrontGameBigCategoryBannerDo {
	return w.withDO(w.DO.Session(config))
}

func (w winFrontGameBigCategoryBannerDo) Clauses(conds ...clause.Expression) IWinFrontGameBigCategoryBannerDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w winFrontGameBigCategoryBannerDo) Returning(value interface{}, columns ...string) IWinFrontGameBigCategoryBannerDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w winFrontGameBigCategoryBannerDo) Not(conds ...gen.Condition) IWinFrontGameBigCategoryBannerDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w winFrontGameBigCategoryBannerDo) Or(conds ...gen.Condition) IWinFrontGameBigCategoryBannerDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w winFrontGameBigCategoryBannerDo) Select(conds ...field.Expr) IWinFrontGameBigCategoryBannerDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w winFrontGameBigCategoryBannerDo) Where(conds ...gen.Condition) IWinFrontGameBigCategoryBannerDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w winFrontGameBigCategoryBannerDo) Order(conds ...field.Expr) IWinFrontGameBigCategoryBannerDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w winFrontGameBigCategoryBannerDo) Distinct(cols ...field.Expr) IWinFrontGameBigCategoryBannerDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w winFrontGameBigCategoryBannerDo) Omit(cols ...field.Expr) IWinFrontGameBigCategoryBannerDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w winFrontGameBigCategoryBannerDo) Join(table schema.Tabler, on ...field.Expr) IWinFrontGameBigCategoryBannerDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w winFrontGameBigCategoryBannerDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWinFrontGameBigCategoryBannerDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w winFrontGameBigCategoryBannerDo) RightJoin(table schema.Tabler, on ...field.Expr) IWinFrontGameBigCategoryBannerDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w winFrontGameBigCategoryBannerDo) Group(cols ...field.Expr) IWinFrontGameBigCategoryBannerDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w winFrontGameBigCategoryBannerDo) Having(conds ...gen.Condition) IWinFrontGameBigCategoryBannerDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w winFrontGameBigCategoryBannerDo) Limit(limit int) IWinFrontGameBigCategoryBannerDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w winFrontGameBigCategoryBannerDo) Offset(offset int) IWinFrontGameBigCategoryBannerDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w winFrontGameBigCategoryBannerDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWinFrontGameBigCategoryBannerDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w winFrontGameBigCategoryBannerDo) Unscoped() IWinFrontGameBigCategoryBannerDo {
	return w.withDO(w.DO.Unscoped())
}

func (w winFrontGameBigCategoryBannerDo) Create(values ...*model.WinFrontGameBigCategoryBanner) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w winFrontGameBigCategoryBannerDo) CreateInBatches(values []*model.WinFrontGameBigCategoryBanner, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w winFrontGameBigCategoryBannerDo) Save(values ...*model.WinFrontGameBigCategoryBanner) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w winFrontGameBigCategoryBannerDo) First() (*model.WinFrontGameBigCategoryBanner, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinFrontGameBigCategoryBanner), nil
	}
}

func (w winFrontGameBigCategoryBannerDo) Take() (*model.WinFrontGameBigCategoryBanner, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinFrontGameBigCategoryBanner), nil
	}
}

func (w winFrontGameBigCategoryBannerDo) Last() (*model.WinFrontGameBigCategoryBanner, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinFrontGameBigCategoryBanner), nil
	}
}

func (w winFrontGameBigCategoryBannerDo) Find() ([]*model.WinFrontGameBigCategoryBanner, error) {
	result, err := w.DO.Find()
	return result.([]*model.WinFrontGameBigCategoryBanner), err
}

func (w winFrontGameBigCategoryBannerDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinFrontGameBigCategoryBanner, err error) {
	buf := make([]*model.WinFrontGameBigCategoryBanner, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w winFrontGameBigCategoryBannerDo) FindInBatches(result *[]*model.WinFrontGameBigCategoryBanner, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w winFrontGameBigCategoryBannerDo) Attrs(attrs ...field.AssignExpr) IWinFrontGameBigCategoryBannerDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w winFrontGameBigCategoryBannerDo) Assign(attrs ...field.AssignExpr) IWinFrontGameBigCategoryBannerDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w winFrontGameBigCategoryBannerDo) Joins(fields ...field.RelationField) IWinFrontGameBigCategoryBannerDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w winFrontGameBigCategoryBannerDo) Preload(fields ...field.RelationField) IWinFrontGameBigCategoryBannerDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w winFrontGameBigCategoryBannerDo) FirstOrInit() (*model.WinFrontGameBigCategoryBanner, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinFrontGameBigCategoryBanner), nil
	}
}

func (w winFrontGameBigCategoryBannerDo) FirstOrCreate() (*model.WinFrontGameBigCategoryBanner, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinFrontGameBigCategoryBanner), nil
	}
}

func (w winFrontGameBigCategoryBannerDo) FindByPage(offset int, limit int) (result []*model.WinFrontGameBigCategoryBanner, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w winFrontGameBigCategoryBannerDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w winFrontGameBigCategoryBannerDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w winFrontGameBigCategoryBannerDo) Delete(models ...*model.WinFrontGameBigCategoryBanner) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *winFrontGameBigCategoryBannerDo) withDO(do gen.Dao) *winFrontGameBigCategoryBannerDo {
	w.DO = *do.(*gen.DO)
	return w
}
