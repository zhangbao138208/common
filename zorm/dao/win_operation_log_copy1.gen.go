// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gitlab.skig.tech/zero-core/common/zorm/model"
)

func newWinOperationLogCopy1(db *gorm.DB, opts ...gen.DOOption) winOperationLogCopy1 {
	_winOperationLogCopy1 := winOperationLogCopy1{}

	_winOperationLogCopy1.winOperationLogCopy1Do.UseDB(db, opts...)
	_winOperationLogCopy1.winOperationLogCopy1Do.UseModel(&model.WinOperationLogCopy1{})

	tableName := _winOperationLogCopy1.winOperationLogCopy1Do.TableName()
	_winOperationLogCopy1.ALL = field.NewAsterisk(tableName)
	_winOperationLogCopy1.ID = field.NewInt64(tableName, "id")
	_winOperationLogCopy1.UID = field.NewInt64(tableName, "uid")
	_winOperationLogCopy1.Username = field.NewString(tableName, "username")
	_winOperationLogCopy1.URL = field.NewString(tableName, "url")
	_winOperationLogCopy1.Menu = field.NewString(tableName, "menu")
	_winOperationLogCopy1.MenuIndex = field.NewInt64(tableName, "menu_index")
	_winOperationLogCopy1.Type = field.NewString(tableName, "type")
	_winOperationLogCopy1.Module = field.NewString(tableName, "module")
	_winOperationLogCopy1.Content = field.NewString(tableName, "content")
	_winOperationLogCopy1.IP = field.NewString(tableName, "ip")
	_winOperationLogCopy1.CreatedAt = field.NewInt64(tableName, "created_at")
	_winOperationLogCopy1.UpdatedAt = field.NewInt64(tableName, "updated_at")

	_winOperationLogCopy1.fillFieldMap()

	return _winOperationLogCopy1
}

type winOperationLogCopy1 struct {
	winOperationLogCopy1Do

	ALL       field.Asterisk
	ID        field.Int64
	UID       field.Int64  // 操作人ID
	Username  field.String // 操作人
	URL       field.String // 请求url
	Menu      field.String // 菜单栏
	MenuIndex field.Int64  // 菜单栏索引值
	Type      field.String // 操作类型,(添加ADD,删除DELETE,修改UPDATE)
	Module    field.String // 操作位置
	Content   field.String // 操作内容
	IP        field.String // 操作IP
	CreatedAt field.Int64
	UpdatedAt field.Int64

	fieldMap map[string]field.Expr
}

func (w winOperationLogCopy1) Table(newTableName string) *winOperationLogCopy1 {
	w.winOperationLogCopy1Do.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w winOperationLogCopy1) As(alias string) *winOperationLogCopy1 {
	w.winOperationLogCopy1Do.DO = *(w.winOperationLogCopy1Do.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *winOperationLogCopy1) updateTableName(table string) *winOperationLogCopy1 {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt64(table, "id")
	w.UID = field.NewInt64(table, "uid")
	w.Username = field.NewString(table, "username")
	w.URL = field.NewString(table, "url")
	w.Menu = field.NewString(table, "menu")
	w.MenuIndex = field.NewInt64(table, "menu_index")
	w.Type = field.NewString(table, "type")
	w.Module = field.NewString(table, "module")
	w.Content = field.NewString(table, "content")
	w.IP = field.NewString(table, "ip")
	w.CreatedAt = field.NewInt64(table, "created_at")
	w.UpdatedAt = field.NewInt64(table, "updated_at")

	w.fillFieldMap()

	return w
}

func (w *winOperationLogCopy1) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *winOperationLogCopy1) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 12)
	w.fieldMap["id"] = w.ID
	w.fieldMap["uid"] = w.UID
	w.fieldMap["username"] = w.Username
	w.fieldMap["url"] = w.URL
	w.fieldMap["menu"] = w.Menu
	w.fieldMap["menu_index"] = w.MenuIndex
	w.fieldMap["type"] = w.Type
	w.fieldMap["module"] = w.Module
	w.fieldMap["content"] = w.Content
	w.fieldMap["ip"] = w.IP
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["updated_at"] = w.UpdatedAt
}

func (w winOperationLogCopy1) clone(db *gorm.DB) winOperationLogCopy1 {
	w.winOperationLogCopy1Do.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w winOperationLogCopy1) replaceDB(db *gorm.DB) winOperationLogCopy1 {
	w.winOperationLogCopy1Do.ReplaceDB(db)
	return w
}

type winOperationLogCopy1Do struct{ gen.DO }

type IWinOperationLogCopy1Do interface {
	gen.SubQuery
	Debug() IWinOperationLogCopy1Do
	WithContext(ctx context.Context) IWinOperationLogCopy1Do
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWinOperationLogCopy1Do
	WriteDB() IWinOperationLogCopy1Do
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWinOperationLogCopy1Do
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWinOperationLogCopy1Do
	Not(conds ...gen.Condition) IWinOperationLogCopy1Do
	Or(conds ...gen.Condition) IWinOperationLogCopy1Do
	Select(conds ...field.Expr) IWinOperationLogCopy1Do
	Where(conds ...gen.Condition) IWinOperationLogCopy1Do
	Order(conds ...field.Expr) IWinOperationLogCopy1Do
	Distinct(cols ...field.Expr) IWinOperationLogCopy1Do
	Omit(cols ...field.Expr) IWinOperationLogCopy1Do
	Join(table schema.Tabler, on ...field.Expr) IWinOperationLogCopy1Do
	LeftJoin(table schema.Tabler, on ...field.Expr) IWinOperationLogCopy1Do
	RightJoin(table schema.Tabler, on ...field.Expr) IWinOperationLogCopy1Do
	Group(cols ...field.Expr) IWinOperationLogCopy1Do
	Having(conds ...gen.Condition) IWinOperationLogCopy1Do
	Limit(limit int) IWinOperationLogCopy1Do
	Offset(offset int) IWinOperationLogCopy1Do
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWinOperationLogCopy1Do
	Unscoped() IWinOperationLogCopy1Do
	Create(values ...*model.WinOperationLogCopy1) error
	CreateInBatches(values []*model.WinOperationLogCopy1, batchSize int) error
	Save(values ...*model.WinOperationLogCopy1) error
	First() (*model.WinOperationLogCopy1, error)
	Take() (*model.WinOperationLogCopy1, error)
	Last() (*model.WinOperationLogCopy1, error)
	Find() ([]*model.WinOperationLogCopy1, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinOperationLogCopy1, err error)
	FindInBatches(result *[]*model.WinOperationLogCopy1, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WinOperationLogCopy1) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWinOperationLogCopy1Do
	Assign(attrs ...field.AssignExpr) IWinOperationLogCopy1Do
	Joins(fields ...field.RelationField) IWinOperationLogCopy1Do
	Preload(fields ...field.RelationField) IWinOperationLogCopy1Do
	FirstOrInit() (*model.WinOperationLogCopy1, error)
	FirstOrCreate() (*model.WinOperationLogCopy1, error)
	FindByPage(offset int, limit int) (result []*model.WinOperationLogCopy1, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWinOperationLogCopy1Do
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w winOperationLogCopy1Do) Debug() IWinOperationLogCopy1Do {
	return w.withDO(w.DO.Debug())
}

func (w winOperationLogCopy1Do) WithContext(ctx context.Context) IWinOperationLogCopy1Do {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w winOperationLogCopy1Do) ReadDB() IWinOperationLogCopy1Do {
	return w.Clauses(dbresolver.Read)
}

func (w winOperationLogCopy1Do) WriteDB() IWinOperationLogCopy1Do {
	return w.Clauses(dbresolver.Write)
}

func (w winOperationLogCopy1Do) Session(config *gorm.Session) IWinOperationLogCopy1Do {
	return w.withDO(w.DO.Session(config))
}

func (w winOperationLogCopy1Do) Clauses(conds ...clause.Expression) IWinOperationLogCopy1Do {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w winOperationLogCopy1Do) Returning(value interface{}, columns ...string) IWinOperationLogCopy1Do {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w winOperationLogCopy1Do) Not(conds ...gen.Condition) IWinOperationLogCopy1Do {
	return w.withDO(w.DO.Not(conds...))
}

func (w winOperationLogCopy1Do) Or(conds ...gen.Condition) IWinOperationLogCopy1Do {
	return w.withDO(w.DO.Or(conds...))
}

func (w winOperationLogCopy1Do) Select(conds ...field.Expr) IWinOperationLogCopy1Do {
	return w.withDO(w.DO.Select(conds...))
}

func (w winOperationLogCopy1Do) Where(conds ...gen.Condition) IWinOperationLogCopy1Do {
	return w.withDO(w.DO.Where(conds...))
}

func (w winOperationLogCopy1Do) Order(conds ...field.Expr) IWinOperationLogCopy1Do {
	return w.withDO(w.DO.Order(conds...))
}

func (w winOperationLogCopy1Do) Distinct(cols ...field.Expr) IWinOperationLogCopy1Do {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w winOperationLogCopy1Do) Omit(cols ...field.Expr) IWinOperationLogCopy1Do {
	return w.withDO(w.DO.Omit(cols...))
}

func (w winOperationLogCopy1Do) Join(table schema.Tabler, on ...field.Expr) IWinOperationLogCopy1Do {
	return w.withDO(w.DO.Join(table, on...))
}

func (w winOperationLogCopy1Do) LeftJoin(table schema.Tabler, on ...field.Expr) IWinOperationLogCopy1Do {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w winOperationLogCopy1Do) RightJoin(table schema.Tabler, on ...field.Expr) IWinOperationLogCopy1Do {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w winOperationLogCopy1Do) Group(cols ...field.Expr) IWinOperationLogCopy1Do {
	return w.withDO(w.DO.Group(cols...))
}

func (w winOperationLogCopy1Do) Having(conds ...gen.Condition) IWinOperationLogCopy1Do {
	return w.withDO(w.DO.Having(conds...))
}

func (w winOperationLogCopy1Do) Limit(limit int) IWinOperationLogCopy1Do {
	return w.withDO(w.DO.Limit(limit))
}

func (w winOperationLogCopy1Do) Offset(offset int) IWinOperationLogCopy1Do {
	return w.withDO(w.DO.Offset(offset))
}

func (w winOperationLogCopy1Do) Scopes(funcs ...func(gen.Dao) gen.Dao) IWinOperationLogCopy1Do {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w winOperationLogCopy1Do) Unscoped() IWinOperationLogCopy1Do {
	return w.withDO(w.DO.Unscoped())
}

func (w winOperationLogCopy1Do) Create(values ...*model.WinOperationLogCopy1) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w winOperationLogCopy1Do) CreateInBatches(values []*model.WinOperationLogCopy1, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w winOperationLogCopy1Do) Save(values ...*model.WinOperationLogCopy1) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w winOperationLogCopy1Do) First() (*model.WinOperationLogCopy1, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinOperationLogCopy1), nil
	}
}

func (w winOperationLogCopy1Do) Take() (*model.WinOperationLogCopy1, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinOperationLogCopy1), nil
	}
}

func (w winOperationLogCopy1Do) Last() (*model.WinOperationLogCopy1, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinOperationLogCopy1), nil
	}
}

func (w winOperationLogCopy1Do) Find() ([]*model.WinOperationLogCopy1, error) {
	result, err := w.DO.Find()
	return result.([]*model.WinOperationLogCopy1), err
}

func (w winOperationLogCopy1Do) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinOperationLogCopy1, err error) {
	buf := make([]*model.WinOperationLogCopy1, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w winOperationLogCopy1Do) FindInBatches(result *[]*model.WinOperationLogCopy1, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w winOperationLogCopy1Do) Attrs(attrs ...field.AssignExpr) IWinOperationLogCopy1Do {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w winOperationLogCopy1Do) Assign(attrs ...field.AssignExpr) IWinOperationLogCopy1Do {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w winOperationLogCopy1Do) Joins(fields ...field.RelationField) IWinOperationLogCopy1Do {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w winOperationLogCopy1Do) Preload(fields ...field.RelationField) IWinOperationLogCopy1Do {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w winOperationLogCopy1Do) FirstOrInit() (*model.WinOperationLogCopy1, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinOperationLogCopy1), nil
	}
}

func (w winOperationLogCopy1Do) FirstOrCreate() (*model.WinOperationLogCopy1, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinOperationLogCopy1), nil
	}
}

func (w winOperationLogCopy1Do) FindByPage(offset int, limit int) (result []*model.WinOperationLogCopy1, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w winOperationLogCopy1Do) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w winOperationLogCopy1Do) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w winOperationLogCopy1Do) Delete(models ...*model.WinOperationLogCopy1) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *winOperationLogCopy1Do) withDO(do gen.Dao) *winOperationLogCopy1Do {
	w.DO = *do.(*gen.DO)
	return w
}
