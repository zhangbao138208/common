// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gitlab.skig.tech/zero-core/common/zorm/model"
)

func newWinAdminExportFileTask(db *gorm.DB, opts ...gen.DOOption) winAdminExportFileTask {
	_winAdminExportFileTask := winAdminExportFileTask{}

	_winAdminExportFileTask.winAdminExportFileTaskDo.UseDB(db, opts...)
	_winAdminExportFileTask.winAdminExportFileTaskDo.UseModel(&model.WinAdminExportFileTask{})

	tableName := _winAdminExportFileTask.winAdminExportFileTaskDo.TableName()
	_winAdminExportFileTask.ALL = field.NewAsterisk(tableName)
	_winAdminExportFileTask.ID = field.NewInt64(tableName, "id")
	_winAdminExportFileTask.TaskName = field.NewString(tableName, "task_name")
	_winAdminExportFileTask.TaskParam = field.NewString(tableName, "task_param")
	_winAdminExportFileTask.StatusCode = field.NewInt64(tableName, "status_code")
	_winAdminExportFileTask.StatusMess = field.NewString(tableName, "status_mess")
	_winAdminExportFileTask.FilePath = field.NewString(tableName, "file_path")
	_winAdminExportFileTask.FilePathHash = field.NewInt64(tableName, "file_path_hash")
	_winAdminExportFileTask.OperatorID = field.NewInt64(tableName, "operator_id")
	_winAdminExportFileTask.CreatedAt = field.NewInt64(tableName, "created_at")
	_winAdminExportFileTask.UpdatedAt = field.NewInt64(tableName, "updated_at")

	_winAdminExportFileTask.fillFieldMap()

	return _winAdminExportFileTask
}

type winAdminExportFileTask struct {
	winAdminExportFileTaskDo

	ALL          field.Asterisk
	ID           field.Int64  // id
	TaskName     field.String // 导出任务名
	TaskParam    field.String // 导出查询参数
	StatusCode   field.Int64  // 导出状态码，2=处理中，3=文件已生成，5=失败
	StatusMess   field.String // 导出状态信息
	FilePath     field.String // 文件路径
	FilePathHash field.Int64  // 文件路径hash
	OperatorID   field.Int64  // 操作人id
	CreatedAt    field.Int64  // 创建时间
	UpdatedAt    field.Int64  // 更新时间

	fieldMap map[string]field.Expr
}

func (w winAdminExportFileTask) Table(newTableName string) *winAdminExportFileTask {
	w.winAdminExportFileTaskDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w winAdminExportFileTask) As(alias string) *winAdminExportFileTask {
	w.winAdminExportFileTaskDo.DO = *(w.winAdminExportFileTaskDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *winAdminExportFileTask) updateTableName(table string) *winAdminExportFileTask {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt64(table, "id")
	w.TaskName = field.NewString(table, "task_name")
	w.TaskParam = field.NewString(table, "task_param")
	w.StatusCode = field.NewInt64(table, "status_code")
	w.StatusMess = field.NewString(table, "status_mess")
	w.FilePath = field.NewString(table, "file_path")
	w.FilePathHash = field.NewInt64(table, "file_path_hash")
	w.OperatorID = field.NewInt64(table, "operator_id")
	w.CreatedAt = field.NewInt64(table, "created_at")
	w.UpdatedAt = field.NewInt64(table, "updated_at")

	w.fillFieldMap()

	return w
}

func (w *winAdminExportFileTask) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *winAdminExportFileTask) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 10)
	w.fieldMap["id"] = w.ID
	w.fieldMap["task_name"] = w.TaskName
	w.fieldMap["task_param"] = w.TaskParam
	w.fieldMap["status_code"] = w.StatusCode
	w.fieldMap["status_mess"] = w.StatusMess
	w.fieldMap["file_path"] = w.FilePath
	w.fieldMap["file_path_hash"] = w.FilePathHash
	w.fieldMap["operator_id"] = w.OperatorID
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["updated_at"] = w.UpdatedAt
}

func (w winAdminExportFileTask) clone(db *gorm.DB) winAdminExportFileTask {
	w.winAdminExportFileTaskDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w winAdminExportFileTask) replaceDB(db *gorm.DB) winAdminExportFileTask {
	w.winAdminExportFileTaskDo.ReplaceDB(db)
	return w
}

type winAdminExportFileTaskDo struct{ gen.DO }

type IWinAdminExportFileTaskDo interface {
	gen.SubQuery
	Debug() IWinAdminExportFileTaskDo
	WithContext(ctx context.Context) IWinAdminExportFileTaskDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWinAdminExportFileTaskDo
	WriteDB() IWinAdminExportFileTaskDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWinAdminExportFileTaskDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWinAdminExportFileTaskDo
	Not(conds ...gen.Condition) IWinAdminExportFileTaskDo
	Or(conds ...gen.Condition) IWinAdminExportFileTaskDo
	Select(conds ...field.Expr) IWinAdminExportFileTaskDo
	Where(conds ...gen.Condition) IWinAdminExportFileTaskDo
	Order(conds ...field.Expr) IWinAdminExportFileTaskDo
	Distinct(cols ...field.Expr) IWinAdminExportFileTaskDo
	Omit(cols ...field.Expr) IWinAdminExportFileTaskDo
	Join(table schema.Tabler, on ...field.Expr) IWinAdminExportFileTaskDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWinAdminExportFileTaskDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWinAdminExportFileTaskDo
	Group(cols ...field.Expr) IWinAdminExportFileTaskDo
	Having(conds ...gen.Condition) IWinAdminExportFileTaskDo
	Limit(limit int) IWinAdminExportFileTaskDo
	Offset(offset int) IWinAdminExportFileTaskDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWinAdminExportFileTaskDo
	Unscoped() IWinAdminExportFileTaskDo
	Create(values ...*model.WinAdminExportFileTask) error
	CreateInBatches(values []*model.WinAdminExportFileTask, batchSize int) error
	Save(values ...*model.WinAdminExportFileTask) error
	First() (*model.WinAdminExportFileTask, error)
	Take() (*model.WinAdminExportFileTask, error)
	Last() (*model.WinAdminExportFileTask, error)
	Find() ([]*model.WinAdminExportFileTask, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinAdminExportFileTask, err error)
	FindInBatches(result *[]*model.WinAdminExportFileTask, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WinAdminExportFileTask) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWinAdminExportFileTaskDo
	Assign(attrs ...field.AssignExpr) IWinAdminExportFileTaskDo
	Joins(fields ...field.RelationField) IWinAdminExportFileTaskDo
	Preload(fields ...field.RelationField) IWinAdminExportFileTaskDo
	FirstOrInit() (*model.WinAdminExportFileTask, error)
	FirstOrCreate() (*model.WinAdminExportFileTask, error)
	FindByPage(offset int, limit int) (result []*model.WinAdminExportFileTask, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWinAdminExportFileTaskDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w winAdminExportFileTaskDo) Debug() IWinAdminExportFileTaskDo {
	return w.withDO(w.DO.Debug())
}

func (w winAdminExportFileTaskDo) WithContext(ctx context.Context) IWinAdminExportFileTaskDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w winAdminExportFileTaskDo) ReadDB() IWinAdminExportFileTaskDo {
	return w.Clauses(dbresolver.Read)
}

func (w winAdminExportFileTaskDo) WriteDB() IWinAdminExportFileTaskDo {
	return w.Clauses(dbresolver.Write)
}

func (w winAdminExportFileTaskDo) Session(config *gorm.Session) IWinAdminExportFileTaskDo {
	return w.withDO(w.DO.Session(config))
}

func (w winAdminExportFileTaskDo) Clauses(conds ...clause.Expression) IWinAdminExportFileTaskDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w winAdminExportFileTaskDo) Returning(value interface{}, columns ...string) IWinAdminExportFileTaskDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w winAdminExportFileTaskDo) Not(conds ...gen.Condition) IWinAdminExportFileTaskDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w winAdminExportFileTaskDo) Or(conds ...gen.Condition) IWinAdminExportFileTaskDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w winAdminExportFileTaskDo) Select(conds ...field.Expr) IWinAdminExportFileTaskDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w winAdminExportFileTaskDo) Where(conds ...gen.Condition) IWinAdminExportFileTaskDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w winAdminExportFileTaskDo) Order(conds ...field.Expr) IWinAdminExportFileTaskDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w winAdminExportFileTaskDo) Distinct(cols ...field.Expr) IWinAdminExportFileTaskDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w winAdminExportFileTaskDo) Omit(cols ...field.Expr) IWinAdminExportFileTaskDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w winAdminExportFileTaskDo) Join(table schema.Tabler, on ...field.Expr) IWinAdminExportFileTaskDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w winAdminExportFileTaskDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWinAdminExportFileTaskDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w winAdminExportFileTaskDo) RightJoin(table schema.Tabler, on ...field.Expr) IWinAdminExportFileTaskDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w winAdminExportFileTaskDo) Group(cols ...field.Expr) IWinAdminExportFileTaskDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w winAdminExportFileTaskDo) Having(conds ...gen.Condition) IWinAdminExportFileTaskDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w winAdminExportFileTaskDo) Limit(limit int) IWinAdminExportFileTaskDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w winAdminExportFileTaskDo) Offset(offset int) IWinAdminExportFileTaskDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w winAdminExportFileTaskDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWinAdminExportFileTaskDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w winAdminExportFileTaskDo) Unscoped() IWinAdminExportFileTaskDo {
	return w.withDO(w.DO.Unscoped())
}

func (w winAdminExportFileTaskDo) Create(values ...*model.WinAdminExportFileTask) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w winAdminExportFileTaskDo) CreateInBatches(values []*model.WinAdminExportFileTask, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w winAdminExportFileTaskDo) Save(values ...*model.WinAdminExportFileTask) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w winAdminExportFileTaskDo) First() (*model.WinAdminExportFileTask, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinAdminExportFileTask), nil
	}
}

func (w winAdminExportFileTaskDo) Take() (*model.WinAdminExportFileTask, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinAdminExportFileTask), nil
	}
}

func (w winAdminExportFileTaskDo) Last() (*model.WinAdminExportFileTask, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinAdminExportFileTask), nil
	}
}

func (w winAdminExportFileTaskDo) Find() ([]*model.WinAdminExportFileTask, error) {
	result, err := w.DO.Find()
	return result.([]*model.WinAdminExportFileTask), err
}

func (w winAdminExportFileTaskDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WinAdminExportFileTask, err error) {
	buf := make([]*model.WinAdminExportFileTask, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w winAdminExportFileTaskDo) FindInBatches(result *[]*model.WinAdminExportFileTask, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w winAdminExportFileTaskDo) Attrs(attrs ...field.AssignExpr) IWinAdminExportFileTaskDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w winAdminExportFileTaskDo) Assign(attrs ...field.AssignExpr) IWinAdminExportFileTaskDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w winAdminExportFileTaskDo) Joins(fields ...field.RelationField) IWinAdminExportFileTaskDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w winAdminExportFileTaskDo) Preload(fields ...field.RelationField) IWinAdminExportFileTaskDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w winAdminExportFileTaskDo) FirstOrInit() (*model.WinAdminExportFileTask, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinAdminExportFileTask), nil
	}
}

func (w winAdminExportFileTaskDo) FirstOrCreate() (*model.WinAdminExportFileTask, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WinAdminExportFileTask), nil
	}
}

func (w winAdminExportFileTaskDo) FindByPage(offset int, limit int) (result []*model.WinAdminExportFileTask, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w winAdminExportFileTaskDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w winAdminExportFileTaskDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w winAdminExportFileTaskDo) Delete(models ...*model.WinAdminExportFileTask) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *winAdminExportFileTaskDo) withDO(do gen.Dao) *winAdminExportFileTaskDo {
	w.DO = *do.(*gen.DO)
	return w
}
