// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gitlab.skig.tech/zero-core/common/zorm/model"
)

func newXxlJobGroup(db *gorm.DB, opts ...gen.DOOption) xxlJobGroup {
	_xxlJobGroup := xxlJobGroup{}

	_xxlJobGroup.xxlJobGroupDo.UseDB(db, opts...)
	_xxlJobGroup.xxlJobGroupDo.UseModel(&model.XxlJobGroup{})

	tableName := _xxlJobGroup.xxlJobGroupDo.TableName()
	_xxlJobGroup.ALL = field.NewAsterisk(tableName)
	_xxlJobGroup.ID = field.NewInt64(tableName, "id")
	_xxlJobGroup.AppName = field.NewString(tableName, "app_name")
	_xxlJobGroup.Title = field.NewString(tableName, "title")
	_xxlJobGroup.AddressType = field.NewInt64(tableName, "address_type")
	_xxlJobGroup.AddressList = field.NewString(tableName, "address_list")
	_xxlJobGroup.UpdateTime = field.NewTime(tableName, "update_time")

	_xxlJobGroup.fillFieldMap()

	return _xxlJobGroup
}

type xxlJobGroup struct {
	xxlJobGroupDo

	ALL         field.Asterisk
	ID          field.Int64
	AppName     field.String // 执行器AppName
	Title       field.String // 执行器名称
	AddressType field.Int64  // 执行器地址类型：0=自动注册、1=手动录入
	AddressList field.String // 执行器地址列表，多地址逗号分隔
	UpdateTime  field.Time

	fieldMap map[string]field.Expr
}

func (x xxlJobGroup) Table(newTableName string) *xxlJobGroup {
	x.xxlJobGroupDo.UseTable(newTableName)
	return x.updateTableName(newTableName)
}

func (x xxlJobGroup) As(alias string) *xxlJobGroup {
	x.xxlJobGroupDo.DO = *(x.xxlJobGroupDo.As(alias).(*gen.DO))
	return x.updateTableName(alias)
}

func (x *xxlJobGroup) updateTableName(table string) *xxlJobGroup {
	x.ALL = field.NewAsterisk(table)
	x.ID = field.NewInt64(table, "id")
	x.AppName = field.NewString(table, "app_name")
	x.Title = field.NewString(table, "title")
	x.AddressType = field.NewInt64(table, "address_type")
	x.AddressList = field.NewString(table, "address_list")
	x.UpdateTime = field.NewTime(table, "update_time")

	x.fillFieldMap()

	return x
}

func (x *xxlJobGroup) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := x.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (x *xxlJobGroup) fillFieldMap() {
	x.fieldMap = make(map[string]field.Expr, 6)
	x.fieldMap["id"] = x.ID
	x.fieldMap["app_name"] = x.AppName
	x.fieldMap["title"] = x.Title
	x.fieldMap["address_type"] = x.AddressType
	x.fieldMap["address_list"] = x.AddressList
	x.fieldMap["update_time"] = x.UpdateTime
}

func (x xxlJobGroup) clone(db *gorm.DB) xxlJobGroup {
	x.xxlJobGroupDo.ReplaceConnPool(db.Statement.ConnPool)
	return x
}

func (x xxlJobGroup) replaceDB(db *gorm.DB) xxlJobGroup {
	x.xxlJobGroupDo.ReplaceDB(db)
	return x
}

type xxlJobGroupDo struct{ gen.DO }

type IXxlJobGroupDo interface {
	gen.SubQuery
	Debug() IXxlJobGroupDo
	WithContext(ctx context.Context) IXxlJobGroupDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IXxlJobGroupDo
	WriteDB() IXxlJobGroupDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IXxlJobGroupDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IXxlJobGroupDo
	Not(conds ...gen.Condition) IXxlJobGroupDo
	Or(conds ...gen.Condition) IXxlJobGroupDo
	Select(conds ...field.Expr) IXxlJobGroupDo
	Where(conds ...gen.Condition) IXxlJobGroupDo
	Order(conds ...field.Expr) IXxlJobGroupDo
	Distinct(cols ...field.Expr) IXxlJobGroupDo
	Omit(cols ...field.Expr) IXxlJobGroupDo
	Join(table schema.Tabler, on ...field.Expr) IXxlJobGroupDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IXxlJobGroupDo
	RightJoin(table schema.Tabler, on ...field.Expr) IXxlJobGroupDo
	Group(cols ...field.Expr) IXxlJobGroupDo
	Having(conds ...gen.Condition) IXxlJobGroupDo
	Limit(limit int) IXxlJobGroupDo
	Offset(offset int) IXxlJobGroupDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IXxlJobGroupDo
	Unscoped() IXxlJobGroupDo
	Create(values ...*model.XxlJobGroup) error
	CreateInBatches(values []*model.XxlJobGroup, batchSize int) error
	Save(values ...*model.XxlJobGroup) error
	First() (*model.XxlJobGroup, error)
	Take() (*model.XxlJobGroup, error)
	Last() (*model.XxlJobGroup, error)
	Find() ([]*model.XxlJobGroup, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.XxlJobGroup, err error)
	FindInBatches(result *[]*model.XxlJobGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.XxlJobGroup) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IXxlJobGroupDo
	Assign(attrs ...field.AssignExpr) IXxlJobGroupDo
	Joins(fields ...field.RelationField) IXxlJobGroupDo
	Preload(fields ...field.RelationField) IXxlJobGroupDo
	FirstOrInit() (*model.XxlJobGroup, error)
	FirstOrCreate() (*model.XxlJobGroup, error)
	FindByPage(offset int, limit int) (result []*model.XxlJobGroup, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IXxlJobGroupDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (x xxlJobGroupDo) Debug() IXxlJobGroupDo {
	return x.withDO(x.DO.Debug())
}

func (x xxlJobGroupDo) WithContext(ctx context.Context) IXxlJobGroupDo {
	return x.withDO(x.DO.WithContext(ctx))
}

func (x xxlJobGroupDo) ReadDB() IXxlJobGroupDo {
	return x.Clauses(dbresolver.Read)
}

func (x xxlJobGroupDo) WriteDB() IXxlJobGroupDo {
	return x.Clauses(dbresolver.Write)
}

func (x xxlJobGroupDo) Session(config *gorm.Session) IXxlJobGroupDo {
	return x.withDO(x.DO.Session(config))
}

func (x xxlJobGroupDo) Clauses(conds ...clause.Expression) IXxlJobGroupDo {
	return x.withDO(x.DO.Clauses(conds...))
}

func (x xxlJobGroupDo) Returning(value interface{}, columns ...string) IXxlJobGroupDo {
	return x.withDO(x.DO.Returning(value, columns...))
}

func (x xxlJobGroupDo) Not(conds ...gen.Condition) IXxlJobGroupDo {
	return x.withDO(x.DO.Not(conds...))
}

func (x xxlJobGroupDo) Or(conds ...gen.Condition) IXxlJobGroupDo {
	return x.withDO(x.DO.Or(conds...))
}

func (x xxlJobGroupDo) Select(conds ...field.Expr) IXxlJobGroupDo {
	return x.withDO(x.DO.Select(conds...))
}

func (x xxlJobGroupDo) Where(conds ...gen.Condition) IXxlJobGroupDo {
	return x.withDO(x.DO.Where(conds...))
}

func (x xxlJobGroupDo) Order(conds ...field.Expr) IXxlJobGroupDo {
	return x.withDO(x.DO.Order(conds...))
}

func (x xxlJobGroupDo) Distinct(cols ...field.Expr) IXxlJobGroupDo {
	return x.withDO(x.DO.Distinct(cols...))
}

func (x xxlJobGroupDo) Omit(cols ...field.Expr) IXxlJobGroupDo {
	return x.withDO(x.DO.Omit(cols...))
}

func (x xxlJobGroupDo) Join(table schema.Tabler, on ...field.Expr) IXxlJobGroupDo {
	return x.withDO(x.DO.Join(table, on...))
}

func (x xxlJobGroupDo) LeftJoin(table schema.Tabler, on ...field.Expr) IXxlJobGroupDo {
	return x.withDO(x.DO.LeftJoin(table, on...))
}

func (x xxlJobGroupDo) RightJoin(table schema.Tabler, on ...field.Expr) IXxlJobGroupDo {
	return x.withDO(x.DO.RightJoin(table, on...))
}

func (x xxlJobGroupDo) Group(cols ...field.Expr) IXxlJobGroupDo {
	return x.withDO(x.DO.Group(cols...))
}

func (x xxlJobGroupDo) Having(conds ...gen.Condition) IXxlJobGroupDo {
	return x.withDO(x.DO.Having(conds...))
}

func (x xxlJobGroupDo) Limit(limit int) IXxlJobGroupDo {
	return x.withDO(x.DO.Limit(limit))
}

func (x xxlJobGroupDo) Offset(offset int) IXxlJobGroupDo {
	return x.withDO(x.DO.Offset(offset))
}

func (x xxlJobGroupDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IXxlJobGroupDo {
	return x.withDO(x.DO.Scopes(funcs...))
}

func (x xxlJobGroupDo) Unscoped() IXxlJobGroupDo {
	return x.withDO(x.DO.Unscoped())
}

func (x xxlJobGroupDo) Create(values ...*model.XxlJobGroup) error {
	if len(values) == 0 {
		return nil
	}
	return x.DO.Create(values)
}

func (x xxlJobGroupDo) CreateInBatches(values []*model.XxlJobGroup, batchSize int) error {
	return x.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (x xxlJobGroupDo) Save(values ...*model.XxlJobGroup) error {
	if len(values) == 0 {
		return nil
	}
	return x.DO.Save(values)
}

func (x xxlJobGroupDo) First() (*model.XxlJobGroup, error) {
	if result, err := x.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.XxlJobGroup), nil
	}
}

func (x xxlJobGroupDo) Take() (*model.XxlJobGroup, error) {
	if result, err := x.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.XxlJobGroup), nil
	}
}

func (x xxlJobGroupDo) Last() (*model.XxlJobGroup, error) {
	if result, err := x.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.XxlJobGroup), nil
	}
}

func (x xxlJobGroupDo) Find() ([]*model.XxlJobGroup, error) {
	result, err := x.DO.Find()
	return result.([]*model.XxlJobGroup), err
}

func (x xxlJobGroupDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.XxlJobGroup, err error) {
	buf := make([]*model.XxlJobGroup, 0, batchSize)
	err = x.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (x xxlJobGroupDo) FindInBatches(result *[]*model.XxlJobGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return x.DO.FindInBatches(result, batchSize, fc)
}

func (x xxlJobGroupDo) Attrs(attrs ...field.AssignExpr) IXxlJobGroupDo {
	return x.withDO(x.DO.Attrs(attrs...))
}

func (x xxlJobGroupDo) Assign(attrs ...field.AssignExpr) IXxlJobGroupDo {
	return x.withDO(x.DO.Assign(attrs...))
}

func (x xxlJobGroupDo) Joins(fields ...field.RelationField) IXxlJobGroupDo {
	for _, _f := range fields {
		x = *x.withDO(x.DO.Joins(_f))
	}
	return &x
}

func (x xxlJobGroupDo) Preload(fields ...field.RelationField) IXxlJobGroupDo {
	for _, _f := range fields {
		x = *x.withDO(x.DO.Preload(_f))
	}
	return &x
}

func (x xxlJobGroupDo) FirstOrInit() (*model.XxlJobGroup, error) {
	if result, err := x.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.XxlJobGroup), nil
	}
}

func (x xxlJobGroupDo) FirstOrCreate() (*model.XxlJobGroup, error) {
	if result, err := x.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.XxlJobGroup), nil
	}
}

func (x xxlJobGroupDo) FindByPage(offset int, limit int) (result []*model.XxlJobGroup, count int64, err error) {
	result, err = x.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = x.Offset(-1).Limit(-1).Count()
	return
}

func (x xxlJobGroupDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = x.Count()
	if err != nil {
		return
	}

	err = x.Offset(offset).Limit(limit).Scan(result)
	return
}

func (x xxlJobGroupDo) Scan(result interface{}) (err error) {
	return x.DO.Scan(result)
}

func (x xxlJobGroupDo) Delete(models ...*model.XxlJobGroup) (result gen.ResultInfo, err error) {
	return x.DO.Delete(models)
}

func (x *xxlJobGroupDo) withDO(do gen.Dao) *xxlJobGroupDo {
	x.DO = *do.(*gen.DO)
	return x
}
