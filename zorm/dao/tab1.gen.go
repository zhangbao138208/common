// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gitlab.skig.tech/zero-core/common/zorm/model"
)

func newTab1(db *gorm.DB, opts ...gen.DOOption) tab1 {
	_tab1 := tab1{}

	_tab1.tab1Do.UseDB(db, opts...)
	_tab1.tab1Do.UseModel(&model.Tab1{})

	tableName := _tab1.tab1Do.TableName()
	_tab1.ALL = field.NewAsterisk(tableName)
	_tab1.XbUID = field.NewInt64(tableName, "xb_uid")
	_tab1.XbUsername = field.NewString(tableName, "xb_username")
	_tab1.XbProfit = field.NewField(tableName, "xb_profit")
	_tab1.Stake = field.NewField(tableName, "stake")
	_tab1.ValidStake = field.NewField(tableName, "valid_stake")
	_tab1.Payout = field.NewField(tableName, "payout")
	_tab1.Reward = field.NewString(tableName, "reward")
	_tab1.Diff = field.NewField(tableName, "diff")

	_tab1.fillFieldMap()

	return _tab1
}

type tab1 struct {
	tab1Do

	ALL        field.Asterisk
	XbUID      field.Int64
	XbUsername field.String
	XbProfit   field.Field
	Stake      field.Field
	ValidStake field.Field
	Payout     field.Field
	Reward     field.String
	Diff       field.Field

	fieldMap map[string]field.Expr
}

func (t tab1) Table(newTableName string) *tab1 {
	t.tab1Do.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tab1) As(alias string) *tab1 {
	t.tab1Do.DO = *(t.tab1Do.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tab1) updateTableName(table string) *tab1 {
	t.ALL = field.NewAsterisk(table)
	t.XbUID = field.NewInt64(table, "xb_uid")
	t.XbUsername = field.NewString(table, "xb_username")
	t.XbProfit = field.NewField(table, "xb_profit")
	t.Stake = field.NewField(table, "stake")
	t.ValidStake = field.NewField(table, "valid_stake")
	t.Payout = field.NewField(table, "payout")
	t.Reward = field.NewString(table, "reward")
	t.Diff = field.NewField(table, "diff")

	t.fillFieldMap()

	return t
}

func (t *tab1) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tab1) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 8)
	t.fieldMap["xb_uid"] = t.XbUID
	t.fieldMap["xb_username"] = t.XbUsername
	t.fieldMap["xb_profit"] = t.XbProfit
	t.fieldMap["stake"] = t.Stake
	t.fieldMap["valid_stake"] = t.ValidStake
	t.fieldMap["payout"] = t.Payout
	t.fieldMap["reward"] = t.Reward
	t.fieldMap["diff"] = t.Diff
}

func (t tab1) clone(db *gorm.DB) tab1 {
	t.tab1Do.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tab1) replaceDB(db *gorm.DB) tab1 {
	t.tab1Do.ReplaceDB(db)
	return t
}

type tab1Do struct{ gen.DO }

type ITab1Do interface {
	gen.SubQuery
	Debug() ITab1Do
	WithContext(ctx context.Context) ITab1Do
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITab1Do
	WriteDB() ITab1Do
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITab1Do
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITab1Do
	Not(conds ...gen.Condition) ITab1Do
	Or(conds ...gen.Condition) ITab1Do
	Select(conds ...field.Expr) ITab1Do
	Where(conds ...gen.Condition) ITab1Do
	Order(conds ...field.Expr) ITab1Do
	Distinct(cols ...field.Expr) ITab1Do
	Omit(cols ...field.Expr) ITab1Do
	Join(table schema.Tabler, on ...field.Expr) ITab1Do
	LeftJoin(table schema.Tabler, on ...field.Expr) ITab1Do
	RightJoin(table schema.Tabler, on ...field.Expr) ITab1Do
	Group(cols ...field.Expr) ITab1Do
	Having(conds ...gen.Condition) ITab1Do
	Limit(limit int) ITab1Do
	Offset(offset int) ITab1Do
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITab1Do
	Unscoped() ITab1Do
	Create(values ...*model.Tab1) error
	CreateInBatches(values []*model.Tab1, batchSize int) error
	Save(values ...*model.Tab1) error
	First() (*model.Tab1, error)
	Take() (*model.Tab1, error)
	Last() (*model.Tab1, error)
	Find() ([]*model.Tab1, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Tab1, err error)
	FindInBatches(result *[]*model.Tab1, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Tab1) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITab1Do
	Assign(attrs ...field.AssignExpr) ITab1Do
	Joins(fields ...field.RelationField) ITab1Do
	Preload(fields ...field.RelationField) ITab1Do
	FirstOrInit() (*model.Tab1, error)
	FirstOrCreate() (*model.Tab1, error)
	FindByPage(offset int, limit int) (result []*model.Tab1, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITab1Do
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tab1Do) Debug() ITab1Do {
	return t.withDO(t.DO.Debug())
}

func (t tab1Do) WithContext(ctx context.Context) ITab1Do {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tab1Do) ReadDB() ITab1Do {
	return t.Clauses(dbresolver.Read)
}

func (t tab1Do) WriteDB() ITab1Do {
	return t.Clauses(dbresolver.Write)
}

func (t tab1Do) Session(config *gorm.Session) ITab1Do {
	return t.withDO(t.DO.Session(config))
}

func (t tab1Do) Clauses(conds ...clause.Expression) ITab1Do {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tab1Do) Returning(value interface{}, columns ...string) ITab1Do {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tab1Do) Not(conds ...gen.Condition) ITab1Do {
	return t.withDO(t.DO.Not(conds...))
}

func (t tab1Do) Or(conds ...gen.Condition) ITab1Do {
	return t.withDO(t.DO.Or(conds...))
}

func (t tab1Do) Select(conds ...field.Expr) ITab1Do {
	return t.withDO(t.DO.Select(conds...))
}

func (t tab1Do) Where(conds ...gen.Condition) ITab1Do {
	return t.withDO(t.DO.Where(conds...))
}

func (t tab1Do) Order(conds ...field.Expr) ITab1Do {
	return t.withDO(t.DO.Order(conds...))
}

func (t tab1Do) Distinct(cols ...field.Expr) ITab1Do {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tab1Do) Omit(cols ...field.Expr) ITab1Do {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tab1Do) Join(table schema.Tabler, on ...field.Expr) ITab1Do {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tab1Do) LeftJoin(table schema.Tabler, on ...field.Expr) ITab1Do {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tab1Do) RightJoin(table schema.Tabler, on ...field.Expr) ITab1Do {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tab1Do) Group(cols ...field.Expr) ITab1Do {
	return t.withDO(t.DO.Group(cols...))
}

func (t tab1Do) Having(conds ...gen.Condition) ITab1Do {
	return t.withDO(t.DO.Having(conds...))
}

func (t tab1Do) Limit(limit int) ITab1Do {
	return t.withDO(t.DO.Limit(limit))
}

func (t tab1Do) Offset(offset int) ITab1Do {
	return t.withDO(t.DO.Offset(offset))
}

func (t tab1Do) Scopes(funcs ...func(gen.Dao) gen.Dao) ITab1Do {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tab1Do) Unscoped() ITab1Do {
	return t.withDO(t.DO.Unscoped())
}

func (t tab1Do) Create(values ...*model.Tab1) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tab1Do) CreateInBatches(values []*model.Tab1, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tab1Do) Save(values ...*model.Tab1) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tab1Do) First() (*model.Tab1, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Tab1), nil
	}
}

func (t tab1Do) Take() (*model.Tab1, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Tab1), nil
	}
}

func (t tab1Do) Last() (*model.Tab1, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Tab1), nil
	}
}

func (t tab1Do) Find() ([]*model.Tab1, error) {
	result, err := t.DO.Find()
	return result.([]*model.Tab1), err
}

func (t tab1Do) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Tab1, err error) {
	buf := make([]*model.Tab1, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tab1Do) FindInBatches(result *[]*model.Tab1, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tab1Do) Attrs(attrs ...field.AssignExpr) ITab1Do {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tab1Do) Assign(attrs ...field.AssignExpr) ITab1Do {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tab1Do) Joins(fields ...field.RelationField) ITab1Do {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tab1Do) Preload(fields ...field.RelationField) ITab1Do {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tab1Do) FirstOrInit() (*model.Tab1, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Tab1), nil
	}
}

func (t tab1Do) FirstOrCreate() (*model.Tab1, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Tab1), nil
	}
}

func (t tab1Do) FindByPage(offset int, limit int) (result []*model.Tab1, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tab1Do) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tab1Do) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tab1Do) Delete(models ...*model.Tab1) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tab1Do) withDO(do gen.Dao) *tab1Do {
	t.DO = *do.(*gen.DO)
	return t
}
