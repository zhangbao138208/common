// Code generated by ent, DO NOT EDIT.

package winuser

import (
	"entgo.io/ent/dialect/sql"
	"gitlab.skig.tech/zero-core/common/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int32) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int32) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int32) predicate.WinUser {
	return predicate.WinUser(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int32) predicate.WinUser {
	return predicate.WinUser(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int32) predicate.WinUser {
	return predicate.WinUser(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int32) predicate.WinUser {
	return predicate.WinUser(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int32) predicate.WinUser {
	return predicate.WinUser(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int32) predicate.WinUser {
	return predicate.WinUser(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int32) predicate.WinUser {
	return predicate.WinUser(sql.FieldLTE(FieldID, id))
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldUsername, v))
}

// Avatar applies equality check predicate on the "avatar" field. It's identical to AvatarEQ.
func Avatar(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldAvatar, v))
}

// Fcoin applies equality check predicate on the "fcoin" field. It's identical to FcoinEQ.
func Fcoin(v float64) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldFcoin, v))
}

// CoinCommission applies equality check predicate on the "coin_commission" field. It's identical to CoinCommissionEQ.
func CoinCommission(v float64) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldCoinCommission, v))
}

// LevelID applies equality check predicate on the "level_id" field. It's identical to LevelIDEQ.
func LevelID(v int8) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldLevelID, v))
}

// Role applies equality check predicate on the "role" field. It's identical to RoleEQ.
func Role(v int8) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldRole, v))
}

// IsPromoter applies equality check predicate on the "is_promoter" field. It's identical to IsPromoterEQ.
func IsPromoter(v bool) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldIsPromoter, v))
}

// Flag applies equality check predicate on the "flag" field. It's identical to FlagEQ.
func Flag(v uint32) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldFlag, v))
}

// RealName applies equality check predicate on the "real_name" field. It's identical to RealNameEQ.
func RealName(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldRealName, v))
}

// Signature applies equality check predicate on the "signature" field. It's identical to SignatureEQ.
func Signature(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldSignature, v))
}

// Birthday applies equality check predicate on the "birthday" field. It's identical to BirthdayEQ.
func Birthday(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldBirthday, v))
}

// AreaCode applies equality check predicate on the "area_code" field. It's identical to AreaCodeEQ.
func AreaCode(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldAreaCode, v))
}

// Mobile applies equality check predicate on the "mobile" field. It's identical to MobileEQ.
func Mobile(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldMobile, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldEmail, v))
}

// Sex applies equality check predicate on the "sex" field. It's identical to SexEQ.
func Sex(v bool) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldSex, v))
}

// BindBank applies equality check predicate on the "bind_bank" field. It's identical to BindBankEQ.
func BindBank(v bool) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldBindBank, v))
}

// Address applies equality check predicate on the "address" field. It's identical to AddressEQ.
func Address(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldAddress, v))
}

// Score applies equality check predicate on the "score" field. It's identical to ScoreEQ.
func Score(v uint32) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldScore, v))
}

// PromoCode applies equality check predicate on the "promo_code" field. It's identical to PromoCodeEQ.
func PromoCode(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldPromoCode, v))
}

// SupUID1 applies equality check predicate on the "sup_uid_1" field. It's identical to SupUID1EQ.
func SupUID1(v uint32) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldSupUID1, v))
}

// SupUsername1 applies equality check predicate on the "sup_username_1" field. It's identical to SupUsername1EQ.
func SupUsername1(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldSupUsername1, v))
}

// SupUID2 applies equality check predicate on the "sup_uid_2" field. It's identical to SupUID2EQ.
func SupUID2(v uint32) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldSupUID2, v))
}

// SupUID3 applies equality check predicate on the "sup_uid_3" field. It's identical to SupUID3EQ.
func SupUID3(v uint32) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldSupUID3, v))
}

// SupUID4 applies equality check predicate on the "sup_uid_4" field. It's identical to SupUID4EQ.
func SupUID4(v uint32) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldSupUID4, v))
}

// SupUID5 applies equality check predicate on the "sup_uid_5" field. It's identical to SupUID5EQ.
func SupUID5(v uint32) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldSupUID5, v))
}

// SupUID6 applies equality check predicate on the "sup_uid_6" field. It's identical to SupUID6EQ.
func SupUID6(v uint32) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldSupUID6, v))
}

// SupUIDTop applies equality check predicate on the "sup_uid_top" field. It's identical to SupUIDTopEQ.
func SupUIDTop(v int32) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldSupUIDTop, v))
}

// SupUsernameTop applies equality check predicate on the "sup_username_top" field. It's identical to SupUsernameTopEQ.
func SupUsernameTop(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldSupUsernameTop, v))
}

// SupLevelTop applies equality check predicate on the "sup_level_top" field. It's identical to SupLevelTopEQ.
func SupLevelTop(v int32) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldSupLevelTop, v))
}

// PasswordHash applies equality check predicate on the "password_hash" field. It's identical to PasswordHashEQ.
func PasswordHash(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldPasswordHash, v))
}

// PasswordCoin applies equality check predicate on the "password_coin" field. It's identical to PasswordCoinEQ.
func PasswordCoin(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldPasswordCoin, v))
}

// IP applies equality check predicate on the "ip" field. It's identical to IPEQ.
func IP(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldIP, v))
}

// IPRegion applies equality check predicate on the "ip_region" field. It's identical to IPRegionEQ.
func IPRegion(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldIPRegion, v))
}

// ThirdLoginType applies equality check predicate on the "third_login_type" field. It's identical to ThirdLoginTypeEQ.
func ThirdLoginType(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldThirdLoginType, v))
}

// FreezeCause applies equality check predicate on the "freeze_cause" field. It's identical to FreezeCauseEQ.
func FreezeCause(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldFreezeCause, v))
}

// FreezeAt applies equality check predicate on the "freeze_at" field. It's identical to FreezeAtEQ.
func FreezeAt(v int32) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldFreezeAt, v))
}

// OperatorName applies equality check predicate on the "operator_name" field. It's identical to OperatorNameEQ.
func OperatorName(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldOperatorName, v))
}

// CreatedName applies equality check predicate on the "created_name" field. It's identical to CreatedNameEQ.
func CreatedName(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldCreatedName, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int8) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldStatus, v))
}

// LastLoginIP applies equality check predicate on the "last_login_ip" field. It's identical to LastLoginIPEQ.
func LastLoginIP(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldLastLoginIP, v))
}

// LastLoginIPRegion applies equality check predicate on the "last_login_ip_region" field. It's identical to LastLoginIPRegionEQ.
func LastLoginIPRegion(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldLastLoginIPRegion, v))
}

// LastLoginTime applies equality check predicate on the "last_login_time" field. It's identical to LastLoginTimeEQ.
func LastLoginTime(v int32) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldLastLoginTime, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v int32) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v int32) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldUpdatedAt, v))
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldUsername, v))
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldNEQ(FieldUsername, v))
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...string) predicate.WinUser {
	return predicate.WinUser(sql.FieldIn(FieldUsername, vs...))
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...string) predicate.WinUser {
	return predicate.WinUser(sql.FieldNotIn(FieldUsername, vs...))
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldGT(FieldUsername, v))
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldGTE(FieldUsername, v))
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldLT(FieldUsername, v))
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldLTE(FieldUsername, v))
}

// UsernameContains applies the Contains predicate on the "username" field.
func UsernameContains(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldContains(FieldUsername, v))
}

// UsernameHasPrefix applies the HasPrefix predicate on the "username" field.
func UsernameHasPrefix(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldHasPrefix(FieldUsername, v))
}

// UsernameHasSuffix applies the HasSuffix predicate on the "username" field.
func UsernameHasSuffix(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldHasSuffix(FieldUsername, v))
}

// UsernameEqualFold applies the EqualFold predicate on the "username" field.
func UsernameEqualFold(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldEqualFold(FieldUsername, v))
}

// UsernameContainsFold applies the ContainsFold predicate on the "username" field.
func UsernameContainsFold(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldContainsFold(FieldUsername, v))
}

// AvatarEQ applies the EQ predicate on the "avatar" field.
func AvatarEQ(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldAvatar, v))
}

// AvatarNEQ applies the NEQ predicate on the "avatar" field.
func AvatarNEQ(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldNEQ(FieldAvatar, v))
}

// AvatarIn applies the In predicate on the "avatar" field.
func AvatarIn(vs ...string) predicate.WinUser {
	return predicate.WinUser(sql.FieldIn(FieldAvatar, vs...))
}

// AvatarNotIn applies the NotIn predicate on the "avatar" field.
func AvatarNotIn(vs ...string) predicate.WinUser {
	return predicate.WinUser(sql.FieldNotIn(FieldAvatar, vs...))
}

// AvatarGT applies the GT predicate on the "avatar" field.
func AvatarGT(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldGT(FieldAvatar, v))
}

// AvatarGTE applies the GTE predicate on the "avatar" field.
func AvatarGTE(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldGTE(FieldAvatar, v))
}

// AvatarLT applies the LT predicate on the "avatar" field.
func AvatarLT(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldLT(FieldAvatar, v))
}

// AvatarLTE applies the LTE predicate on the "avatar" field.
func AvatarLTE(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldLTE(FieldAvatar, v))
}

// AvatarContains applies the Contains predicate on the "avatar" field.
func AvatarContains(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldContains(FieldAvatar, v))
}

// AvatarHasPrefix applies the HasPrefix predicate on the "avatar" field.
func AvatarHasPrefix(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldHasPrefix(FieldAvatar, v))
}

// AvatarHasSuffix applies the HasSuffix predicate on the "avatar" field.
func AvatarHasSuffix(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldHasSuffix(FieldAvatar, v))
}

// AvatarIsNil applies the IsNil predicate on the "avatar" field.
func AvatarIsNil() predicate.WinUser {
	return predicate.WinUser(sql.FieldIsNull(FieldAvatar))
}

// AvatarNotNil applies the NotNil predicate on the "avatar" field.
func AvatarNotNil() predicate.WinUser {
	return predicate.WinUser(sql.FieldNotNull(FieldAvatar))
}

// AvatarEqualFold applies the EqualFold predicate on the "avatar" field.
func AvatarEqualFold(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldEqualFold(FieldAvatar, v))
}

// AvatarContainsFold applies the ContainsFold predicate on the "avatar" field.
func AvatarContainsFold(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldContainsFold(FieldAvatar, v))
}

// FcoinEQ applies the EQ predicate on the "fcoin" field.
func FcoinEQ(v float64) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldFcoin, v))
}

// FcoinNEQ applies the NEQ predicate on the "fcoin" field.
func FcoinNEQ(v float64) predicate.WinUser {
	return predicate.WinUser(sql.FieldNEQ(FieldFcoin, v))
}

// FcoinIn applies the In predicate on the "fcoin" field.
func FcoinIn(vs ...float64) predicate.WinUser {
	return predicate.WinUser(sql.FieldIn(FieldFcoin, vs...))
}

// FcoinNotIn applies the NotIn predicate on the "fcoin" field.
func FcoinNotIn(vs ...float64) predicate.WinUser {
	return predicate.WinUser(sql.FieldNotIn(FieldFcoin, vs...))
}

// FcoinGT applies the GT predicate on the "fcoin" field.
func FcoinGT(v float64) predicate.WinUser {
	return predicate.WinUser(sql.FieldGT(FieldFcoin, v))
}

// FcoinGTE applies the GTE predicate on the "fcoin" field.
func FcoinGTE(v float64) predicate.WinUser {
	return predicate.WinUser(sql.FieldGTE(FieldFcoin, v))
}

// FcoinLT applies the LT predicate on the "fcoin" field.
func FcoinLT(v float64) predicate.WinUser {
	return predicate.WinUser(sql.FieldLT(FieldFcoin, v))
}

// FcoinLTE applies the LTE predicate on the "fcoin" field.
func FcoinLTE(v float64) predicate.WinUser {
	return predicate.WinUser(sql.FieldLTE(FieldFcoin, v))
}

// CoinCommissionEQ applies the EQ predicate on the "coin_commission" field.
func CoinCommissionEQ(v float64) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldCoinCommission, v))
}

// CoinCommissionNEQ applies the NEQ predicate on the "coin_commission" field.
func CoinCommissionNEQ(v float64) predicate.WinUser {
	return predicate.WinUser(sql.FieldNEQ(FieldCoinCommission, v))
}

// CoinCommissionIn applies the In predicate on the "coin_commission" field.
func CoinCommissionIn(vs ...float64) predicate.WinUser {
	return predicate.WinUser(sql.FieldIn(FieldCoinCommission, vs...))
}

// CoinCommissionNotIn applies the NotIn predicate on the "coin_commission" field.
func CoinCommissionNotIn(vs ...float64) predicate.WinUser {
	return predicate.WinUser(sql.FieldNotIn(FieldCoinCommission, vs...))
}

// CoinCommissionGT applies the GT predicate on the "coin_commission" field.
func CoinCommissionGT(v float64) predicate.WinUser {
	return predicate.WinUser(sql.FieldGT(FieldCoinCommission, v))
}

// CoinCommissionGTE applies the GTE predicate on the "coin_commission" field.
func CoinCommissionGTE(v float64) predicate.WinUser {
	return predicate.WinUser(sql.FieldGTE(FieldCoinCommission, v))
}

// CoinCommissionLT applies the LT predicate on the "coin_commission" field.
func CoinCommissionLT(v float64) predicate.WinUser {
	return predicate.WinUser(sql.FieldLT(FieldCoinCommission, v))
}

// CoinCommissionLTE applies the LTE predicate on the "coin_commission" field.
func CoinCommissionLTE(v float64) predicate.WinUser {
	return predicate.WinUser(sql.FieldLTE(FieldCoinCommission, v))
}

// LevelIDEQ applies the EQ predicate on the "level_id" field.
func LevelIDEQ(v int8) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldLevelID, v))
}

// LevelIDNEQ applies the NEQ predicate on the "level_id" field.
func LevelIDNEQ(v int8) predicate.WinUser {
	return predicate.WinUser(sql.FieldNEQ(FieldLevelID, v))
}

// LevelIDIn applies the In predicate on the "level_id" field.
func LevelIDIn(vs ...int8) predicate.WinUser {
	return predicate.WinUser(sql.FieldIn(FieldLevelID, vs...))
}

// LevelIDNotIn applies the NotIn predicate on the "level_id" field.
func LevelIDNotIn(vs ...int8) predicate.WinUser {
	return predicate.WinUser(sql.FieldNotIn(FieldLevelID, vs...))
}

// LevelIDGT applies the GT predicate on the "level_id" field.
func LevelIDGT(v int8) predicate.WinUser {
	return predicate.WinUser(sql.FieldGT(FieldLevelID, v))
}

// LevelIDGTE applies the GTE predicate on the "level_id" field.
func LevelIDGTE(v int8) predicate.WinUser {
	return predicate.WinUser(sql.FieldGTE(FieldLevelID, v))
}

// LevelIDLT applies the LT predicate on the "level_id" field.
func LevelIDLT(v int8) predicate.WinUser {
	return predicate.WinUser(sql.FieldLT(FieldLevelID, v))
}

// LevelIDLTE applies the LTE predicate on the "level_id" field.
func LevelIDLTE(v int8) predicate.WinUser {
	return predicate.WinUser(sql.FieldLTE(FieldLevelID, v))
}

// RoleEQ applies the EQ predicate on the "role" field.
func RoleEQ(v int8) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldRole, v))
}

// RoleNEQ applies the NEQ predicate on the "role" field.
func RoleNEQ(v int8) predicate.WinUser {
	return predicate.WinUser(sql.FieldNEQ(FieldRole, v))
}

// RoleIn applies the In predicate on the "role" field.
func RoleIn(vs ...int8) predicate.WinUser {
	return predicate.WinUser(sql.FieldIn(FieldRole, vs...))
}

// RoleNotIn applies the NotIn predicate on the "role" field.
func RoleNotIn(vs ...int8) predicate.WinUser {
	return predicate.WinUser(sql.FieldNotIn(FieldRole, vs...))
}

// RoleGT applies the GT predicate on the "role" field.
func RoleGT(v int8) predicate.WinUser {
	return predicate.WinUser(sql.FieldGT(FieldRole, v))
}

// RoleGTE applies the GTE predicate on the "role" field.
func RoleGTE(v int8) predicate.WinUser {
	return predicate.WinUser(sql.FieldGTE(FieldRole, v))
}

// RoleLT applies the LT predicate on the "role" field.
func RoleLT(v int8) predicate.WinUser {
	return predicate.WinUser(sql.FieldLT(FieldRole, v))
}

// RoleLTE applies the LTE predicate on the "role" field.
func RoleLTE(v int8) predicate.WinUser {
	return predicate.WinUser(sql.FieldLTE(FieldRole, v))
}

// IsPromoterEQ applies the EQ predicate on the "is_promoter" field.
func IsPromoterEQ(v bool) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldIsPromoter, v))
}

// IsPromoterNEQ applies the NEQ predicate on the "is_promoter" field.
func IsPromoterNEQ(v bool) predicate.WinUser {
	return predicate.WinUser(sql.FieldNEQ(FieldIsPromoter, v))
}

// FlagEQ applies the EQ predicate on the "flag" field.
func FlagEQ(v uint32) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldFlag, v))
}

// FlagNEQ applies the NEQ predicate on the "flag" field.
func FlagNEQ(v uint32) predicate.WinUser {
	return predicate.WinUser(sql.FieldNEQ(FieldFlag, v))
}

// FlagIn applies the In predicate on the "flag" field.
func FlagIn(vs ...uint32) predicate.WinUser {
	return predicate.WinUser(sql.FieldIn(FieldFlag, vs...))
}

// FlagNotIn applies the NotIn predicate on the "flag" field.
func FlagNotIn(vs ...uint32) predicate.WinUser {
	return predicate.WinUser(sql.FieldNotIn(FieldFlag, vs...))
}

// FlagGT applies the GT predicate on the "flag" field.
func FlagGT(v uint32) predicate.WinUser {
	return predicate.WinUser(sql.FieldGT(FieldFlag, v))
}

// FlagGTE applies the GTE predicate on the "flag" field.
func FlagGTE(v uint32) predicate.WinUser {
	return predicate.WinUser(sql.FieldGTE(FieldFlag, v))
}

// FlagLT applies the LT predicate on the "flag" field.
func FlagLT(v uint32) predicate.WinUser {
	return predicate.WinUser(sql.FieldLT(FieldFlag, v))
}

// FlagLTE applies the LTE predicate on the "flag" field.
func FlagLTE(v uint32) predicate.WinUser {
	return predicate.WinUser(sql.FieldLTE(FieldFlag, v))
}

// RealNameEQ applies the EQ predicate on the "real_name" field.
func RealNameEQ(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldRealName, v))
}

// RealNameNEQ applies the NEQ predicate on the "real_name" field.
func RealNameNEQ(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldNEQ(FieldRealName, v))
}

// RealNameIn applies the In predicate on the "real_name" field.
func RealNameIn(vs ...string) predicate.WinUser {
	return predicate.WinUser(sql.FieldIn(FieldRealName, vs...))
}

// RealNameNotIn applies the NotIn predicate on the "real_name" field.
func RealNameNotIn(vs ...string) predicate.WinUser {
	return predicate.WinUser(sql.FieldNotIn(FieldRealName, vs...))
}

// RealNameGT applies the GT predicate on the "real_name" field.
func RealNameGT(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldGT(FieldRealName, v))
}

// RealNameGTE applies the GTE predicate on the "real_name" field.
func RealNameGTE(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldGTE(FieldRealName, v))
}

// RealNameLT applies the LT predicate on the "real_name" field.
func RealNameLT(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldLT(FieldRealName, v))
}

// RealNameLTE applies the LTE predicate on the "real_name" field.
func RealNameLTE(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldLTE(FieldRealName, v))
}

// RealNameContains applies the Contains predicate on the "real_name" field.
func RealNameContains(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldContains(FieldRealName, v))
}

// RealNameHasPrefix applies the HasPrefix predicate on the "real_name" field.
func RealNameHasPrefix(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldHasPrefix(FieldRealName, v))
}

// RealNameHasSuffix applies the HasSuffix predicate on the "real_name" field.
func RealNameHasSuffix(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldHasSuffix(FieldRealName, v))
}

// RealNameEqualFold applies the EqualFold predicate on the "real_name" field.
func RealNameEqualFold(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldEqualFold(FieldRealName, v))
}

// RealNameContainsFold applies the ContainsFold predicate on the "real_name" field.
func RealNameContainsFold(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldContainsFold(FieldRealName, v))
}

// SignatureEQ applies the EQ predicate on the "signature" field.
func SignatureEQ(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldSignature, v))
}

// SignatureNEQ applies the NEQ predicate on the "signature" field.
func SignatureNEQ(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldNEQ(FieldSignature, v))
}

// SignatureIn applies the In predicate on the "signature" field.
func SignatureIn(vs ...string) predicate.WinUser {
	return predicate.WinUser(sql.FieldIn(FieldSignature, vs...))
}

// SignatureNotIn applies the NotIn predicate on the "signature" field.
func SignatureNotIn(vs ...string) predicate.WinUser {
	return predicate.WinUser(sql.FieldNotIn(FieldSignature, vs...))
}

// SignatureGT applies the GT predicate on the "signature" field.
func SignatureGT(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldGT(FieldSignature, v))
}

// SignatureGTE applies the GTE predicate on the "signature" field.
func SignatureGTE(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldGTE(FieldSignature, v))
}

// SignatureLT applies the LT predicate on the "signature" field.
func SignatureLT(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldLT(FieldSignature, v))
}

// SignatureLTE applies the LTE predicate on the "signature" field.
func SignatureLTE(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldLTE(FieldSignature, v))
}

// SignatureContains applies the Contains predicate on the "signature" field.
func SignatureContains(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldContains(FieldSignature, v))
}

// SignatureHasPrefix applies the HasPrefix predicate on the "signature" field.
func SignatureHasPrefix(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldHasPrefix(FieldSignature, v))
}

// SignatureHasSuffix applies the HasSuffix predicate on the "signature" field.
func SignatureHasSuffix(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldHasSuffix(FieldSignature, v))
}

// SignatureEqualFold applies the EqualFold predicate on the "signature" field.
func SignatureEqualFold(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldEqualFold(FieldSignature, v))
}

// SignatureContainsFold applies the ContainsFold predicate on the "signature" field.
func SignatureContainsFold(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldContainsFold(FieldSignature, v))
}

// BirthdayEQ applies the EQ predicate on the "birthday" field.
func BirthdayEQ(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldBirthday, v))
}

// BirthdayNEQ applies the NEQ predicate on the "birthday" field.
func BirthdayNEQ(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldNEQ(FieldBirthday, v))
}

// BirthdayIn applies the In predicate on the "birthday" field.
func BirthdayIn(vs ...string) predicate.WinUser {
	return predicate.WinUser(sql.FieldIn(FieldBirthday, vs...))
}

// BirthdayNotIn applies the NotIn predicate on the "birthday" field.
func BirthdayNotIn(vs ...string) predicate.WinUser {
	return predicate.WinUser(sql.FieldNotIn(FieldBirthday, vs...))
}

// BirthdayGT applies the GT predicate on the "birthday" field.
func BirthdayGT(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldGT(FieldBirthday, v))
}

// BirthdayGTE applies the GTE predicate on the "birthday" field.
func BirthdayGTE(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldGTE(FieldBirthday, v))
}

// BirthdayLT applies the LT predicate on the "birthday" field.
func BirthdayLT(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldLT(FieldBirthday, v))
}

// BirthdayLTE applies the LTE predicate on the "birthday" field.
func BirthdayLTE(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldLTE(FieldBirthday, v))
}

// BirthdayContains applies the Contains predicate on the "birthday" field.
func BirthdayContains(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldContains(FieldBirthday, v))
}

// BirthdayHasPrefix applies the HasPrefix predicate on the "birthday" field.
func BirthdayHasPrefix(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldHasPrefix(FieldBirthday, v))
}

// BirthdayHasSuffix applies the HasSuffix predicate on the "birthday" field.
func BirthdayHasSuffix(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldHasSuffix(FieldBirthday, v))
}

// BirthdayIsNil applies the IsNil predicate on the "birthday" field.
func BirthdayIsNil() predicate.WinUser {
	return predicate.WinUser(sql.FieldIsNull(FieldBirthday))
}

// BirthdayNotNil applies the NotNil predicate on the "birthday" field.
func BirthdayNotNil() predicate.WinUser {
	return predicate.WinUser(sql.FieldNotNull(FieldBirthday))
}

// BirthdayEqualFold applies the EqualFold predicate on the "birthday" field.
func BirthdayEqualFold(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldEqualFold(FieldBirthday, v))
}

// BirthdayContainsFold applies the ContainsFold predicate on the "birthday" field.
func BirthdayContainsFold(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldContainsFold(FieldBirthday, v))
}

// AreaCodeEQ applies the EQ predicate on the "area_code" field.
func AreaCodeEQ(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldAreaCode, v))
}

// AreaCodeNEQ applies the NEQ predicate on the "area_code" field.
func AreaCodeNEQ(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldNEQ(FieldAreaCode, v))
}

// AreaCodeIn applies the In predicate on the "area_code" field.
func AreaCodeIn(vs ...string) predicate.WinUser {
	return predicate.WinUser(sql.FieldIn(FieldAreaCode, vs...))
}

// AreaCodeNotIn applies the NotIn predicate on the "area_code" field.
func AreaCodeNotIn(vs ...string) predicate.WinUser {
	return predicate.WinUser(sql.FieldNotIn(FieldAreaCode, vs...))
}

// AreaCodeGT applies the GT predicate on the "area_code" field.
func AreaCodeGT(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldGT(FieldAreaCode, v))
}

// AreaCodeGTE applies the GTE predicate on the "area_code" field.
func AreaCodeGTE(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldGTE(FieldAreaCode, v))
}

// AreaCodeLT applies the LT predicate on the "area_code" field.
func AreaCodeLT(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldLT(FieldAreaCode, v))
}

// AreaCodeLTE applies the LTE predicate on the "area_code" field.
func AreaCodeLTE(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldLTE(FieldAreaCode, v))
}

// AreaCodeContains applies the Contains predicate on the "area_code" field.
func AreaCodeContains(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldContains(FieldAreaCode, v))
}

// AreaCodeHasPrefix applies the HasPrefix predicate on the "area_code" field.
func AreaCodeHasPrefix(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldHasPrefix(FieldAreaCode, v))
}

// AreaCodeHasSuffix applies the HasSuffix predicate on the "area_code" field.
func AreaCodeHasSuffix(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldHasSuffix(FieldAreaCode, v))
}

// AreaCodeEqualFold applies the EqualFold predicate on the "area_code" field.
func AreaCodeEqualFold(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldEqualFold(FieldAreaCode, v))
}

// AreaCodeContainsFold applies the ContainsFold predicate on the "area_code" field.
func AreaCodeContainsFold(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldContainsFold(FieldAreaCode, v))
}

// MobileEQ applies the EQ predicate on the "mobile" field.
func MobileEQ(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldMobile, v))
}

// MobileNEQ applies the NEQ predicate on the "mobile" field.
func MobileNEQ(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldNEQ(FieldMobile, v))
}

// MobileIn applies the In predicate on the "mobile" field.
func MobileIn(vs ...string) predicate.WinUser {
	return predicate.WinUser(sql.FieldIn(FieldMobile, vs...))
}

// MobileNotIn applies the NotIn predicate on the "mobile" field.
func MobileNotIn(vs ...string) predicate.WinUser {
	return predicate.WinUser(sql.FieldNotIn(FieldMobile, vs...))
}

// MobileGT applies the GT predicate on the "mobile" field.
func MobileGT(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldGT(FieldMobile, v))
}

// MobileGTE applies the GTE predicate on the "mobile" field.
func MobileGTE(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldGTE(FieldMobile, v))
}

// MobileLT applies the LT predicate on the "mobile" field.
func MobileLT(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldLT(FieldMobile, v))
}

// MobileLTE applies the LTE predicate on the "mobile" field.
func MobileLTE(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldLTE(FieldMobile, v))
}

// MobileContains applies the Contains predicate on the "mobile" field.
func MobileContains(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldContains(FieldMobile, v))
}

// MobileHasPrefix applies the HasPrefix predicate on the "mobile" field.
func MobileHasPrefix(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldHasPrefix(FieldMobile, v))
}

// MobileHasSuffix applies the HasSuffix predicate on the "mobile" field.
func MobileHasSuffix(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldHasSuffix(FieldMobile, v))
}

// MobileEqualFold applies the EqualFold predicate on the "mobile" field.
func MobileEqualFold(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldEqualFold(FieldMobile, v))
}

// MobileContainsFold applies the ContainsFold predicate on the "mobile" field.
func MobileContainsFold(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldContainsFold(FieldMobile, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.WinUser {
	return predicate.WinUser(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.WinUser {
	return predicate.WinUser(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailIsNil applies the IsNil predicate on the "email" field.
func EmailIsNil() predicate.WinUser {
	return predicate.WinUser(sql.FieldIsNull(FieldEmail))
}

// EmailNotNil applies the NotNil predicate on the "email" field.
func EmailNotNil() predicate.WinUser {
	return predicate.WinUser(sql.FieldNotNull(FieldEmail))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldContainsFold(FieldEmail, v))
}

// SexEQ applies the EQ predicate on the "sex" field.
func SexEQ(v bool) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldSex, v))
}

// SexNEQ applies the NEQ predicate on the "sex" field.
func SexNEQ(v bool) predicate.WinUser {
	return predicate.WinUser(sql.FieldNEQ(FieldSex, v))
}

// BindBankEQ applies the EQ predicate on the "bind_bank" field.
func BindBankEQ(v bool) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldBindBank, v))
}

// BindBankNEQ applies the NEQ predicate on the "bind_bank" field.
func BindBankNEQ(v bool) predicate.WinUser {
	return predicate.WinUser(sql.FieldNEQ(FieldBindBank, v))
}

// AddressEQ applies the EQ predicate on the "address" field.
func AddressEQ(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldAddress, v))
}

// AddressNEQ applies the NEQ predicate on the "address" field.
func AddressNEQ(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldNEQ(FieldAddress, v))
}

// AddressIn applies the In predicate on the "address" field.
func AddressIn(vs ...string) predicate.WinUser {
	return predicate.WinUser(sql.FieldIn(FieldAddress, vs...))
}

// AddressNotIn applies the NotIn predicate on the "address" field.
func AddressNotIn(vs ...string) predicate.WinUser {
	return predicate.WinUser(sql.FieldNotIn(FieldAddress, vs...))
}

// AddressGT applies the GT predicate on the "address" field.
func AddressGT(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldGT(FieldAddress, v))
}

// AddressGTE applies the GTE predicate on the "address" field.
func AddressGTE(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldGTE(FieldAddress, v))
}

// AddressLT applies the LT predicate on the "address" field.
func AddressLT(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldLT(FieldAddress, v))
}

// AddressLTE applies the LTE predicate on the "address" field.
func AddressLTE(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldLTE(FieldAddress, v))
}

// AddressContains applies the Contains predicate on the "address" field.
func AddressContains(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldContains(FieldAddress, v))
}

// AddressHasPrefix applies the HasPrefix predicate on the "address" field.
func AddressHasPrefix(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldHasPrefix(FieldAddress, v))
}

// AddressHasSuffix applies the HasSuffix predicate on the "address" field.
func AddressHasSuffix(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldHasSuffix(FieldAddress, v))
}

// AddressEqualFold applies the EqualFold predicate on the "address" field.
func AddressEqualFold(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldEqualFold(FieldAddress, v))
}

// AddressContainsFold applies the ContainsFold predicate on the "address" field.
func AddressContainsFold(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldContainsFold(FieldAddress, v))
}

// ScoreEQ applies the EQ predicate on the "score" field.
func ScoreEQ(v uint32) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldScore, v))
}

// ScoreNEQ applies the NEQ predicate on the "score" field.
func ScoreNEQ(v uint32) predicate.WinUser {
	return predicate.WinUser(sql.FieldNEQ(FieldScore, v))
}

// ScoreIn applies the In predicate on the "score" field.
func ScoreIn(vs ...uint32) predicate.WinUser {
	return predicate.WinUser(sql.FieldIn(FieldScore, vs...))
}

// ScoreNotIn applies the NotIn predicate on the "score" field.
func ScoreNotIn(vs ...uint32) predicate.WinUser {
	return predicate.WinUser(sql.FieldNotIn(FieldScore, vs...))
}

// ScoreGT applies the GT predicate on the "score" field.
func ScoreGT(v uint32) predicate.WinUser {
	return predicate.WinUser(sql.FieldGT(FieldScore, v))
}

// ScoreGTE applies the GTE predicate on the "score" field.
func ScoreGTE(v uint32) predicate.WinUser {
	return predicate.WinUser(sql.FieldGTE(FieldScore, v))
}

// ScoreLT applies the LT predicate on the "score" field.
func ScoreLT(v uint32) predicate.WinUser {
	return predicate.WinUser(sql.FieldLT(FieldScore, v))
}

// ScoreLTE applies the LTE predicate on the "score" field.
func ScoreLTE(v uint32) predicate.WinUser {
	return predicate.WinUser(sql.FieldLTE(FieldScore, v))
}

// PromoCodeEQ applies the EQ predicate on the "promo_code" field.
func PromoCodeEQ(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldPromoCode, v))
}

// PromoCodeNEQ applies the NEQ predicate on the "promo_code" field.
func PromoCodeNEQ(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldNEQ(FieldPromoCode, v))
}

// PromoCodeIn applies the In predicate on the "promo_code" field.
func PromoCodeIn(vs ...string) predicate.WinUser {
	return predicate.WinUser(sql.FieldIn(FieldPromoCode, vs...))
}

// PromoCodeNotIn applies the NotIn predicate on the "promo_code" field.
func PromoCodeNotIn(vs ...string) predicate.WinUser {
	return predicate.WinUser(sql.FieldNotIn(FieldPromoCode, vs...))
}

// PromoCodeGT applies the GT predicate on the "promo_code" field.
func PromoCodeGT(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldGT(FieldPromoCode, v))
}

// PromoCodeGTE applies the GTE predicate on the "promo_code" field.
func PromoCodeGTE(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldGTE(FieldPromoCode, v))
}

// PromoCodeLT applies the LT predicate on the "promo_code" field.
func PromoCodeLT(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldLT(FieldPromoCode, v))
}

// PromoCodeLTE applies the LTE predicate on the "promo_code" field.
func PromoCodeLTE(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldLTE(FieldPromoCode, v))
}

// PromoCodeContains applies the Contains predicate on the "promo_code" field.
func PromoCodeContains(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldContains(FieldPromoCode, v))
}

// PromoCodeHasPrefix applies the HasPrefix predicate on the "promo_code" field.
func PromoCodeHasPrefix(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldHasPrefix(FieldPromoCode, v))
}

// PromoCodeHasSuffix applies the HasSuffix predicate on the "promo_code" field.
func PromoCodeHasSuffix(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldHasSuffix(FieldPromoCode, v))
}

// PromoCodeEqualFold applies the EqualFold predicate on the "promo_code" field.
func PromoCodeEqualFold(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldEqualFold(FieldPromoCode, v))
}

// PromoCodeContainsFold applies the ContainsFold predicate on the "promo_code" field.
func PromoCodeContainsFold(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldContainsFold(FieldPromoCode, v))
}

// SupUID1EQ applies the EQ predicate on the "sup_uid_1" field.
func SupUID1EQ(v uint32) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldSupUID1, v))
}

// SupUID1NEQ applies the NEQ predicate on the "sup_uid_1" field.
func SupUID1NEQ(v uint32) predicate.WinUser {
	return predicate.WinUser(sql.FieldNEQ(FieldSupUID1, v))
}

// SupUID1In applies the In predicate on the "sup_uid_1" field.
func SupUID1In(vs ...uint32) predicate.WinUser {
	return predicate.WinUser(sql.FieldIn(FieldSupUID1, vs...))
}

// SupUID1NotIn applies the NotIn predicate on the "sup_uid_1" field.
func SupUID1NotIn(vs ...uint32) predicate.WinUser {
	return predicate.WinUser(sql.FieldNotIn(FieldSupUID1, vs...))
}

// SupUID1GT applies the GT predicate on the "sup_uid_1" field.
func SupUID1GT(v uint32) predicate.WinUser {
	return predicate.WinUser(sql.FieldGT(FieldSupUID1, v))
}

// SupUID1GTE applies the GTE predicate on the "sup_uid_1" field.
func SupUID1GTE(v uint32) predicate.WinUser {
	return predicate.WinUser(sql.FieldGTE(FieldSupUID1, v))
}

// SupUID1LT applies the LT predicate on the "sup_uid_1" field.
func SupUID1LT(v uint32) predicate.WinUser {
	return predicate.WinUser(sql.FieldLT(FieldSupUID1, v))
}

// SupUID1LTE applies the LTE predicate on the "sup_uid_1" field.
func SupUID1LTE(v uint32) predicate.WinUser {
	return predicate.WinUser(sql.FieldLTE(FieldSupUID1, v))
}

// SupUsername1EQ applies the EQ predicate on the "sup_username_1" field.
func SupUsername1EQ(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldSupUsername1, v))
}

// SupUsername1NEQ applies the NEQ predicate on the "sup_username_1" field.
func SupUsername1NEQ(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldNEQ(FieldSupUsername1, v))
}

// SupUsername1In applies the In predicate on the "sup_username_1" field.
func SupUsername1In(vs ...string) predicate.WinUser {
	return predicate.WinUser(sql.FieldIn(FieldSupUsername1, vs...))
}

// SupUsername1NotIn applies the NotIn predicate on the "sup_username_1" field.
func SupUsername1NotIn(vs ...string) predicate.WinUser {
	return predicate.WinUser(sql.FieldNotIn(FieldSupUsername1, vs...))
}

// SupUsername1GT applies the GT predicate on the "sup_username_1" field.
func SupUsername1GT(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldGT(FieldSupUsername1, v))
}

// SupUsername1GTE applies the GTE predicate on the "sup_username_1" field.
func SupUsername1GTE(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldGTE(FieldSupUsername1, v))
}

// SupUsername1LT applies the LT predicate on the "sup_username_1" field.
func SupUsername1LT(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldLT(FieldSupUsername1, v))
}

// SupUsername1LTE applies the LTE predicate on the "sup_username_1" field.
func SupUsername1LTE(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldLTE(FieldSupUsername1, v))
}

// SupUsername1Contains applies the Contains predicate on the "sup_username_1" field.
func SupUsername1Contains(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldContains(FieldSupUsername1, v))
}

// SupUsername1HasPrefix applies the HasPrefix predicate on the "sup_username_1" field.
func SupUsername1HasPrefix(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldHasPrefix(FieldSupUsername1, v))
}

// SupUsername1HasSuffix applies the HasSuffix predicate on the "sup_username_1" field.
func SupUsername1HasSuffix(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldHasSuffix(FieldSupUsername1, v))
}

// SupUsername1EqualFold applies the EqualFold predicate on the "sup_username_1" field.
func SupUsername1EqualFold(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldEqualFold(FieldSupUsername1, v))
}

// SupUsername1ContainsFold applies the ContainsFold predicate on the "sup_username_1" field.
func SupUsername1ContainsFold(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldContainsFold(FieldSupUsername1, v))
}

// SupUID2EQ applies the EQ predicate on the "sup_uid_2" field.
func SupUID2EQ(v uint32) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldSupUID2, v))
}

// SupUID2NEQ applies the NEQ predicate on the "sup_uid_2" field.
func SupUID2NEQ(v uint32) predicate.WinUser {
	return predicate.WinUser(sql.FieldNEQ(FieldSupUID2, v))
}

// SupUID2In applies the In predicate on the "sup_uid_2" field.
func SupUID2In(vs ...uint32) predicate.WinUser {
	return predicate.WinUser(sql.FieldIn(FieldSupUID2, vs...))
}

// SupUID2NotIn applies the NotIn predicate on the "sup_uid_2" field.
func SupUID2NotIn(vs ...uint32) predicate.WinUser {
	return predicate.WinUser(sql.FieldNotIn(FieldSupUID2, vs...))
}

// SupUID2GT applies the GT predicate on the "sup_uid_2" field.
func SupUID2GT(v uint32) predicate.WinUser {
	return predicate.WinUser(sql.FieldGT(FieldSupUID2, v))
}

// SupUID2GTE applies the GTE predicate on the "sup_uid_2" field.
func SupUID2GTE(v uint32) predicate.WinUser {
	return predicate.WinUser(sql.FieldGTE(FieldSupUID2, v))
}

// SupUID2LT applies the LT predicate on the "sup_uid_2" field.
func SupUID2LT(v uint32) predicate.WinUser {
	return predicate.WinUser(sql.FieldLT(FieldSupUID2, v))
}

// SupUID2LTE applies the LTE predicate on the "sup_uid_2" field.
func SupUID2LTE(v uint32) predicate.WinUser {
	return predicate.WinUser(sql.FieldLTE(FieldSupUID2, v))
}

// SupUID3EQ applies the EQ predicate on the "sup_uid_3" field.
func SupUID3EQ(v uint32) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldSupUID3, v))
}

// SupUID3NEQ applies the NEQ predicate on the "sup_uid_3" field.
func SupUID3NEQ(v uint32) predicate.WinUser {
	return predicate.WinUser(sql.FieldNEQ(FieldSupUID3, v))
}

// SupUID3In applies the In predicate on the "sup_uid_3" field.
func SupUID3In(vs ...uint32) predicate.WinUser {
	return predicate.WinUser(sql.FieldIn(FieldSupUID3, vs...))
}

// SupUID3NotIn applies the NotIn predicate on the "sup_uid_3" field.
func SupUID3NotIn(vs ...uint32) predicate.WinUser {
	return predicate.WinUser(sql.FieldNotIn(FieldSupUID3, vs...))
}

// SupUID3GT applies the GT predicate on the "sup_uid_3" field.
func SupUID3GT(v uint32) predicate.WinUser {
	return predicate.WinUser(sql.FieldGT(FieldSupUID3, v))
}

// SupUID3GTE applies the GTE predicate on the "sup_uid_3" field.
func SupUID3GTE(v uint32) predicate.WinUser {
	return predicate.WinUser(sql.FieldGTE(FieldSupUID3, v))
}

// SupUID3LT applies the LT predicate on the "sup_uid_3" field.
func SupUID3LT(v uint32) predicate.WinUser {
	return predicate.WinUser(sql.FieldLT(FieldSupUID3, v))
}

// SupUID3LTE applies the LTE predicate on the "sup_uid_3" field.
func SupUID3LTE(v uint32) predicate.WinUser {
	return predicate.WinUser(sql.FieldLTE(FieldSupUID3, v))
}

// SupUID4EQ applies the EQ predicate on the "sup_uid_4" field.
func SupUID4EQ(v uint32) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldSupUID4, v))
}

// SupUID4NEQ applies the NEQ predicate on the "sup_uid_4" field.
func SupUID4NEQ(v uint32) predicate.WinUser {
	return predicate.WinUser(sql.FieldNEQ(FieldSupUID4, v))
}

// SupUID4In applies the In predicate on the "sup_uid_4" field.
func SupUID4In(vs ...uint32) predicate.WinUser {
	return predicate.WinUser(sql.FieldIn(FieldSupUID4, vs...))
}

// SupUID4NotIn applies the NotIn predicate on the "sup_uid_4" field.
func SupUID4NotIn(vs ...uint32) predicate.WinUser {
	return predicate.WinUser(sql.FieldNotIn(FieldSupUID4, vs...))
}

// SupUID4GT applies the GT predicate on the "sup_uid_4" field.
func SupUID4GT(v uint32) predicate.WinUser {
	return predicate.WinUser(sql.FieldGT(FieldSupUID4, v))
}

// SupUID4GTE applies the GTE predicate on the "sup_uid_4" field.
func SupUID4GTE(v uint32) predicate.WinUser {
	return predicate.WinUser(sql.FieldGTE(FieldSupUID4, v))
}

// SupUID4LT applies the LT predicate on the "sup_uid_4" field.
func SupUID4LT(v uint32) predicate.WinUser {
	return predicate.WinUser(sql.FieldLT(FieldSupUID4, v))
}

// SupUID4LTE applies the LTE predicate on the "sup_uid_4" field.
func SupUID4LTE(v uint32) predicate.WinUser {
	return predicate.WinUser(sql.FieldLTE(FieldSupUID4, v))
}

// SupUID5EQ applies the EQ predicate on the "sup_uid_5" field.
func SupUID5EQ(v uint32) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldSupUID5, v))
}

// SupUID5NEQ applies the NEQ predicate on the "sup_uid_5" field.
func SupUID5NEQ(v uint32) predicate.WinUser {
	return predicate.WinUser(sql.FieldNEQ(FieldSupUID5, v))
}

// SupUID5In applies the In predicate on the "sup_uid_5" field.
func SupUID5In(vs ...uint32) predicate.WinUser {
	return predicate.WinUser(sql.FieldIn(FieldSupUID5, vs...))
}

// SupUID5NotIn applies the NotIn predicate on the "sup_uid_5" field.
func SupUID5NotIn(vs ...uint32) predicate.WinUser {
	return predicate.WinUser(sql.FieldNotIn(FieldSupUID5, vs...))
}

// SupUID5GT applies the GT predicate on the "sup_uid_5" field.
func SupUID5GT(v uint32) predicate.WinUser {
	return predicate.WinUser(sql.FieldGT(FieldSupUID5, v))
}

// SupUID5GTE applies the GTE predicate on the "sup_uid_5" field.
func SupUID5GTE(v uint32) predicate.WinUser {
	return predicate.WinUser(sql.FieldGTE(FieldSupUID5, v))
}

// SupUID5LT applies the LT predicate on the "sup_uid_5" field.
func SupUID5LT(v uint32) predicate.WinUser {
	return predicate.WinUser(sql.FieldLT(FieldSupUID5, v))
}

// SupUID5LTE applies the LTE predicate on the "sup_uid_5" field.
func SupUID5LTE(v uint32) predicate.WinUser {
	return predicate.WinUser(sql.FieldLTE(FieldSupUID5, v))
}

// SupUID6EQ applies the EQ predicate on the "sup_uid_6" field.
func SupUID6EQ(v uint32) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldSupUID6, v))
}

// SupUID6NEQ applies the NEQ predicate on the "sup_uid_6" field.
func SupUID6NEQ(v uint32) predicate.WinUser {
	return predicate.WinUser(sql.FieldNEQ(FieldSupUID6, v))
}

// SupUID6In applies the In predicate on the "sup_uid_6" field.
func SupUID6In(vs ...uint32) predicate.WinUser {
	return predicate.WinUser(sql.FieldIn(FieldSupUID6, vs...))
}

// SupUID6NotIn applies the NotIn predicate on the "sup_uid_6" field.
func SupUID6NotIn(vs ...uint32) predicate.WinUser {
	return predicate.WinUser(sql.FieldNotIn(FieldSupUID6, vs...))
}

// SupUID6GT applies the GT predicate on the "sup_uid_6" field.
func SupUID6GT(v uint32) predicate.WinUser {
	return predicate.WinUser(sql.FieldGT(FieldSupUID6, v))
}

// SupUID6GTE applies the GTE predicate on the "sup_uid_6" field.
func SupUID6GTE(v uint32) predicate.WinUser {
	return predicate.WinUser(sql.FieldGTE(FieldSupUID6, v))
}

// SupUID6LT applies the LT predicate on the "sup_uid_6" field.
func SupUID6LT(v uint32) predicate.WinUser {
	return predicate.WinUser(sql.FieldLT(FieldSupUID6, v))
}

// SupUID6LTE applies the LTE predicate on the "sup_uid_6" field.
func SupUID6LTE(v uint32) predicate.WinUser {
	return predicate.WinUser(sql.FieldLTE(FieldSupUID6, v))
}

// SupUIDTopEQ applies the EQ predicate on the "sup_uid_top" field.
func SupUIDTopEQ(v int32) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldSupUIDTop, v))
}

// SupUIDTopNEQ applies the NEQ predicate on the "sup_uid_top" field.
func SupUIDTopNEQ(v int32) predicate.WinUser {
	return predicate.WinUser(sql.FieldNEQ(FieldSupUIDTop, v))
}

// SupUIDTopIn applies the In predicate on the "sup_uid_top" field.
func SupUIDTopIn(vs ...int32) predicate.WinUser {
	return predicate.WinUser(sql.FieldIn(FieldSupUIDTop, vs...))
}

// SupUIDTopNotIn applies the NotIn predicate on the "sup_uid_top" field.
func SupUIDTopNotIn(vs ...int32) predicate.WinUser {
	return predicate.WinUser(sql.FieldNotIn(FieldSupUIDTop, vs...))
}

// SupUIDTopGT applies the GT predicate on the "sup_uid_top" field.
func SupUIDTopGT(v int32) predicate.WinUser {
	return predicate.WinUser(sql.FieldGT(FieldSupUIDTop, v))
}

// SupUIDTopGTE applies the GTE predicate on the "sup_uid_top" field.
func SupUIDTopGTE(v int32) predicate.WinUser {
	return predicate.WinUser(sql.FieldGTE(FieldSupUIDTop, v))
}

// SupUIDTopLT applies the LT predicate on the "sup_uid_top" field.
func SupUIDTopLT(v int32) predicate.WinUser {
	return predicate.WinUser(sql.FieldLT(FieldSupUIDTop, v))
}

// SupUIDTopLTE applies the LTE predicate on the "sup_uid_top" field.
func SupUIDTopLTE(v int32) predicate.WinUser {
	return predicate.WinUser(sql.FieldLTE(FieldSupUIDTop, v))
}

// SupUsernameTopEQ applies the EQ predicate on the "sup_username_top" field.
func SupUsernameTopEQ(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldSupUsernameTop, v))
}

// SupUsernameTopNEQ applies the NEQ predicate on the "sup_username_top" field.
func SupUsernameTopNEQ(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldNEQ(FieldSupUsernameTop, v))
}

// SupUsernameTopIn applies the In predicate on the "sup_username_top" field.
func SupUsernameTopIn(vs ...string) predicate.WinUser {
	return predicate.WinUser(sql.FieldIn(FieldSupUsernameTop, vs...))
}

// SupUsernameTopNotIn applies the NotIn predicate on the "sup_username_top" field.
func SupUsernameTopNotIn(vs ...string) predicate.WinUser {
	return predicate.WinUser(sql.FieldNotIn(FieldSupUsernameTop, vs...))
}

// SupUsernameTopGT applies the GT predicate on the "sup_username_top" field.
func SupUsernameTopGT(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldGT(FieldSupUsernameTop, v))
}

// SupUsernameTopGTE applies the GTE predicate on the "sup_username_top" field.
func SupUsernameTopGTE(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldGTE(FieldSupUsernameTop, v))
}

// SupUsernameTopLT applies the LT predicate on the "sup_username_top" field.
func SupUsernameTopLT(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldLT(FieldSupUsernameTop, v))
}

// SupUsernameTopLTE applies the LTE predicate on the "sup_username_top" field.
func SupUsernameTopLTE(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldLTE(FieldSupUsernameTop, v))
}

// SupUsernameTopContains applies the Contains predicate on the "sup_username_top" field.
func SupUsernameTopContains(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldContains(FieldSupUsernameTop, v))
}

// SupUsernameTopHasPrefix applies the HasPrefix predicate on the "sup_username_top" field.
func SupUsernameTopHasPrefix(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldHasPrefix(FieldSupUsernameTop, v))
}

// SupUsernameTopHasSuffix applies the HasSuffix predicate on the "sup_username_top" field.
func SupUsernameTopHasSuffix(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldHasSuffix(FieldSupUsernameTop, v))
}

// SupUsernameTopEqualFold applies the EqualFold predicate on the "sup_username_top" field.
func SupUsernameTopEqualFold(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldEqualFold(FieldSupUsernameTop, v))
}

// SupUsernameTopContainsFold applies the ContainsFold predicate on the "sup_username_top" field.
func SupUsernameTopContainsFold(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldContainsFold(FieldSupUsernameTop, v))
}

// SupLevelTopEQ applies the EQ predicate on the "sup_level_top" field.
func SupLevelTopEQ(v int32) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldSupLevelTop, v))
}

// SupLevelTopNEQ applies the NEQ predicate on the "sup_level_top" field.
func SupLevelTopNEQ(v int32) predicate.WinUser {
	return predicate.WinUser(sql.FieldNEQ(FieldSupLevelTop, v))
}

// SupLevelTopIn applies the In predicate on the "sup_level_top" field.
func SupLevelTopIn(vs ...int32) predicate.WinUser {
	return predicate.WinUser(sql.FieldIn(FieldSupLevelTop, vs...))
}

// SupLevelTopNotIn applies the NotIn predicate on the "sup_level_top" field.
func SupLevelTopNotIn(vs ...int32) predicate.WinUser {
	return predicate.WinUser(sql.FieldNotIn(FieldSupLevelTop, vs...))
}

// SupLevelTopGT applies the GT predicate on the "sup_level_top" field.
func SupLevelTopGT(v int32) predicate.WinUser {
	return predicate.WinUser(sql.FieldGT(FieldSupLevelTop, v))
}

// SupLevelTopGTE applies the GTE predicate on the "sup_level_top" field.
func SupLevelTopGTE(v int32) predicate.WinUser {
	return predicate.WinUser(sql.FieldGTE(FieldSupLevelTop, v))
}

// SupLevelTopLT applies the LT predicate on the "sup_level_top" field.
func SupLevelTopLT(v int32) predicate.WinUser {
	return predicate.WinUser(sql.FieldLT(FieldSupLevelTop, v))
}

// SupLevelTopLTE applies the LTE predicate on the "sup_level_top" field.
func SupLevelTopLTE(v int32) predicate.WinUser {
	return predicate.WinUser(sql.FieldLTE(FieldSupLevelTop, v))
}

// PasswordHashEQ applies the EQ predicate on the "password_hash" field.
func PasswordHashEQ(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldPasswordHash, v))
}

// PasswordHashNEQ applies the NEQ predicate on the "password_hash" field.
func PasswordHashNEQ(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldNEQ(FieldPasswordHash, v))
}

// PasswordHashIn applies the In predicate on the "password_hash" field.
func PasswordHashIn(vs ...string) predicate.WinUser {
	return predicate.WinUser(sql.FieldIn(FieldPasswordHash, vs...))
}

// PasswordHashNotIn applies the NotIn predicate on the "password_hash" field.
func PasswordHashNotIn(vs ...string) predicate.WinUser {
	return predicate.WinUser(sql.FieldNotIn(FieldPasswordHash, vs...))
}

// PasswordHashGT applies the GT predicate on the "password_hash" field.
func PasswordHashGT(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldGT(FieldPasswordHash, v))
}

// PasswordHashGTE applies the GTE predicate on the "password_hash" field.
func PasswordHashGTE(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldGTE(FieldPasswordHash, v))
}

// PasswordHashLT applies the LT predicate on the "password_hash" field.
func PasswordHashLT(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldLT(FieldPasswordHash, v))
}

// PasswordHashLTE applies the LTE predicate on the "password_hash" field.
func PasswordHashLTE(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldLTE(FieldPasswordHash, v))
}

// PasswordHashContains applies the Contains predicate on the "password_hash" field.
func PasswordHashContains(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldContains(FieldPasswordHash, v))
}

// PasswordHashHasPrefix applies the HasPrefix predicate on the "password_hash" field.
func PasswordHashHasPrefix(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldHasPrefix(FieldPasswordHash, v))
}

// PasswordHashHasSuffix applies the HasSuffix predicate on the "password_hash" field.
func PasswordHashHasSuffix(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldHasSuffix(FieldPasswordHash, v))
}

// PasswordHashEqualFold applies the EqualFold predicate on the "password_hash" field.
func PasswordHashEqualFold(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldEqualFold(FieldPasswordHash, v))
}

// PasswordHashContainsFold applies the ContainsFold predicate on the "password_hash" field.
func PasswordHashContainsFold(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldContainsFold(FieldPasswordHash, v))
}

// PasswordCoinEQ applies the EQ predicate on the "password_coin" field.
func PasswordCoinEQ(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldPasswordCoin, v))
}

// PasswordCoinNEQ applies the NEQ predicate on the "password_coin" field.
func PasswordCoinNEQ(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldNEQ(FieldPasswordCoin, v))
}

// PasswordCoinIn applies the In predicate on the "password_coin" field.
func PasswordCoinIn(vs ...string) predicate.WinUser {
	return predicate.WinUser(sql.FieldIn(FieldPasswordCoin, vs...))
}

// PasswordCoinNotIn applies the NotIn predicate on the "password_coin" field.
func PasswordCoinNotIn(vs ...string) predicate.WinUser {
	return predicate.WinUser(sql.FieldNotIn(FieldPasswordCoin, vs...))
}

// PasswordCoinGT applies the GT predicate on the "password_coin" field.
func PasswordCoinGT(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldGT(FieldPasswordCoin, v))
}

// PasswordCoinGTE applies the GTE predicate on the "password_coin" field.
func PasswordCoinGTE(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldGTE(FieldPasswordCoin, v))
}

// PasswordCoinLT applies the LT predicate on the "password_coin" field.
func PasswordCoinLT(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldLT(FieldPasswordCoin, v))
}

// PasswordCoinLTE applies the LTE predicate on the "password_coin" field.
func PasswordCoinLTE(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldLTE(FieldPasswordCoin, v))
}

// PasswordCoinContains applies the Contains predicate on the "password_coin" field.
func PasswordCoinContains(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldContains(FieldPasswordCoin, v))
}

// PasswordCoinHasPrefix applies the HasPrefix predicate on the "password_coin" field.
func PasswordCoinHasPrefix(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldHasPrefix(FieldPasswordCoin, v))
}

// PasswordCoinHasSuffix applies the HasSuffix predicate on the "password_coin" field.
func PasswordCoinHasSuffix(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldHasSuffix(FieldPasswordCoin, v))
}

// PasswordCoinEqualFold applies the EqualFold predicate on the "password_coin" field.
func PasswordCoinEqualFold(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldEqualFold(FieldPasswordCoin, v))
}

// PasswordCoinContainsFold applies the ContainsFold predicate on the "password_coin" field.
func PasswordCoinContainsFold(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldContainsFold(FieldPasswordCoin, v))
}

// IPEQ applies the EQ predicate on the "ip" field.
func IPEQ(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldIP, v))
}

// IPNEQ applies the NEQ predicate on the "ip" field.
func IPNEQ(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldNEQ(FieldIP, v))
}

// IPIn applies the In predicate on the "ip" field.
func IPIn(vs ...string) predicate.WinUser {
	return predicate.WinUser(sql.FieldIn(FieldIP, vs...))
}

// IPNotIn applies the NotIn predicate on the "ip" field.
func IPNotIn(vs ...string) predicate.WinUser {
	return predicate.WinUser(sql.FieldNotIn(FieldIP, vs...))
}

// IPGT applies the GT predicate on the "ip" field.
func IPGT(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldGT(FieldIP, v))
}

// IPGTE applies the GTE predicate on the "ip" field.
func IPGTE(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldGTE(FieldIP, v))
}

// IPLT applies the LT predicate on the "ip" field.
func IPLT(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldLT(FieldIP, v))
}

// IPLTE applies the LTE predicate on the "ip" field.
func IPLTE(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldLTE(FieldIP, v))
}

// IPContains applies the Contains predicate on the "ip" field.
func IPContains(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldContains(FieldIP, v))
}

// IPHasPrefix applies the HasPrefix predicate on the "ip" field.
func IPHasPrefix(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldHasPrefix(FieldIP, v))
}

// IPHasSuffix applies the HasSuffix predicate on the "ip" field.
func IPHasSuffix(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldHasSuffix(FieldIP, v))
}

// IPEqualFold applies the EqualFold predicate on the "ip" field.
func IPEqualFold(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldEqualFold(FieldIP, v))
}

// IPContainsFold applies the ContainsFold predicate on the "ip" field.
func IPContainsFold(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldContainsFold(FieldIP, v))
}

// IPRegionEQ applies the EQ predicate on the "ip_region" field.
func IPRegionEQ(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldIPRegion, v))
}

// IPRegionNEQ applies the NEQ predicate on the "ip_region" field.
func IPRegionNEQ(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldNEQ(FieldIPRegion, v))
}

// IPRegionIn applies the In predicate on the "ip_region" field.
func IPRegionIn(vs ...string) predicate.WinUser {
	return predicate.WinUser(sql.FieldIn(FieldIPRegion, vs...))
}

// IPRegionNotIn applies the NotIn predicate on the "ip_region" field.
func IPRegionNotIn(vs ...string) predicate.WinUser {
	return predicate.WinUser(sql.FieldNotIn(FieldIPRegion, vs...))
}

// IPRegionGT applies the GT predicate on the "ip_region" field.
func IPRegionGT(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldGT(FieldIPRegion, v))
}

// IPRegionGTE applies the GTE predicate on the "ip_region" field.
func IPRegionGTE(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldGTE(FieldIPRegion, v))
}

// IPRegionLT applies the LT predicate on the "ip_region" field.
func IPRegionLT(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldLT(FieldIPRegion, v))
}

// IPRegionLTE applies the LTE predicate on the "ip_region" field.
func IPRegionLTE(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldLTE(FieldIPRegion, v))
}

// IPRegionContains applies the Contains predicate on the "ip_region" field.
func IPRegionContains(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldContains(FieldIPRegion, v))
}

// IPRegionHasPrefix applies the HasPrefix predicate on the "ip_region" field.
func IPRegionHasPrefix(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldHasPrefix(FieldIPRegion, v))
}

// IPRegionHasSuffix applies the HasSuffix predicate on the "ip_region" field.
func IPRegionHasSuffix(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldHasSuffix(FieldIPRegion, v))
}

// IPRegionIsNil applies the IsNil predicate on the "ip_region" field.
func IPRegionIsNil() predicate.WinUser {
	return predicate.WinUser(sql.FieldIsNull(FieldIPRegion))
}

// IPRegionNotNil applies the NotNil predicate on the "ip_region" field.
func IPRegionNotNil() predicate.WinUser {
	return predicate.WinUser(sql.FieldNotNull(FieldIPRegion))
}

// IPRegionEqualFold applies the EqualFold predicate on the "ip_region" field.
func IPRegionEqualFold(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldEqualFold(FieldIPRegion, v))
}

// IPRegionContainsFold applies the ContainsFold predicate on the "ip_region" field.
func IPRegionContainsFold(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldContainsFold(FieldIPRegion, v))
}

// ThirdLoginTypeEQ applies the EQ predicate on the "third_login_type" field.
func ThirdLoginTypeEQ(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldThirdLoginType, v))
}

// ThirdLoginTypeNEQ applies the NEQ predicate on the "third_login_type" field.
func ThirdLoginTypeNEQ(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldNEQ(FieldThirdLoginType, v))
}

// ThirdLoginTypeIn applies the In predicate on the "third_login_type" field.
func ThirdLoginTypeIn(vs ...string) predicate.WinUser {
	return predicate.WinUser(sql.FieldIn(FieldThirdLoginType, vs...))
}

// ThirdLoginTypeNotIn applies the NotIn predicate on the "third_login_type" field.
func ThirdLoginTypeNotIn(vs ...string) predicate.WinUser {
	return predicate.WinUser(sql.FieldNotIn(FieldThirdLoginType, vs...))
}

// ThirdLoginTypeGT applies the GT predicate on the "third_login_type" field.
func ThirdLoginTypeGT(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldGT(FieldThirdLoginType, v))
}

// ThirdLoginTypeGTE applies the GTE predicate on the "third_login_type" field.
func ThirdLoginTypeGTE(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldGTE(FieldThirdLoginType, v))
}

// ThirdLoginTypeLT applies the LT predicate on the "third_login_type" field.
func ThirdLoginTypeLT(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldLT(FieldThirdLoginType, v))
}

// ThirdLoginTypeLTE applies the LTE predicate on the "third_login_type" field.
func ThirdLoginTypeLTE(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldLTE(FieldThirdLoginType, v))
}

// ThirdLoginTypeContains applies the Contains predicate on the "third_login_type" field.
func ThirdLoginTypeContains(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldContains(FieldThirdLoginType, v))
}

// ThirdLoginTypeHasPrefix applies the HasPrefix predicate on the "third_login_type" field.
func ThirdLoginTypeHasPrefix(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldHasPrefix(FieldThirdLoginType, v))
}

// ThirdLoginTypeHasSuffix applies the HasSuffix predicate on the "third_login_type" field.
func ThirdLoginTypeHasSuffix(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldHasSuffix(FieldThirdLoginType, v))
}

// ThirdLoginTypeEqualFold applies the EqualFold predicate on the "third_login_type" field.
func ThirdLoginTypeEqualFold(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldEqualFold(FieldThirdLoginType, v))
}

// ThirdLoginTypeContainsFold applies the ContainsFold predicate on the "third_login_type" field.
func ThirdLoginTypeContainsFold(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldContainsFold(FieldThirdLoginType, v))
}

// FreezeCauseEQ applies the EQ predicate on the "freeze_cause" field.
func FreezeCauseEQ(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldFreezeCause, v))
}

// FreezeCauseNEQ applies the NEQ predicate on the "freeze_cause" field.
func FreezeCauseNEQ(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldNEQ(FieldFreezeCause, v))
}

// FreezeCauseIn applies the In predicate on the "freeze_cause" field.
func FreezeCauseIn(vs ...string) predicate.WinUser {
	return predicate.WinUser(sql.FieldIn(FieldFreezeCause, vs...))
}

// FreezeCauseNotIn applies the NotIn predicate on the "freeze_cause" field.
func FreezeCauseNotIn(vs ...string) predicate.WinUser {
	return predicate.WinUser(sql.FieldNotIn(FieldFreezeCause, vs...))
}

// FreezeCauseGT applies the GT predicate on the "freeze_cause" field.
func FreezeCauseGT(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldGT(FieldFreezeCause, v))
}

// FreezeCauseGTE applies the GTE predicate on the "freeze_cause" field.
func FreezeCauseGTE(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldGTE(FieldFreezeCause, v))
}

// FreezeCauseLT applies the LT predicate on the "freeze_cause" field.
func FreezeCauseLT(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldLT(FieldFreezeCause, v))
}

// FreezeCauseLTE applies the LTE predicate on the "freeze_cause" field.
func FreezeCauseLTE(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldLTE(FieldFreezeCause, v))
}

// FreezeCauseContains applies the Contains predicate on the "freeze_cause" field.
func FreezeCauseContains(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldContains(FieldFreezeCause, v))
}

// FreezeCauseHasPrefix applies the HasPrefix predicate on the "freeze_cause" field.
func FreezeCauseHasPrefix(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldHasPrefix(FieldFreezeCause, v))
}

// FreezeCauseHasSuffix applies the HasSuffix predicate on the "freeze_cause" field.
func FreezeCauseHasSuffix(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldHasSuffix(FieldFreezeCause, v))
}

// FreezeCauseIsNil applies the IsNil predicate on the "freeze_cause" field.
func FreezeCauseIsNil() predicate.WinUser {
	return predicate.WinUser(sql.FieldIsNull(FieldFreezeCause))
}

// FreezeCauseNotNil applies the NotNil predicate on the "freeze_cause" field.
func FreezeCauseNotNil() predicate.WinUser {
	return predicate.WinUser(sql.FieldNotNull(FieldFreezeCause))
}

// FreezeCauseEqualFold applies the EqualFold predicate on the "freeze_cause" field.
func FreezeCauseEqualFold(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldEqualFold(FieldFreezeCause, v))
}

// FreezeCauseContainsFold applies the ContainsFold predicate on the "freeze_cause" field.
func FreezeCauseContainsFold(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldContainsFold(FieldFreezeCause, v))
}

// FreezeAtEQ applies the EQ predicate on the "freeze_at" field.
func FreezeAtEQ(v int32) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldFreezeAt, v))
}

// FreezeAtNEQ applies the NEQ predicate on the "freeze_at" field.
func FreezeAtNEQ(v int32) predicate.WinUser {
	return predicate.WinUser(sql.FieldNEQ(FieldFreezeAt, v))
}

// FreezeAtIn applies the In predicate on the "freeze_at" field.
func FreezeAtIn(vs ...int32) predicate.WinUser {
	return predicate.WinUser(sql.FieldIn(FieldFreezeAt, vs...))
}

// FreezeAtNotIn applies the NotIn predicate on the "freeze_at" field.
func FreezeAtNotIn(vs ...int32) predicate.WinUser {
	return predicate.WinUser(sql.FieldNotIn(FieldFreezeAt, vs...))
}

// FreezeAtGT applies the GT predicate on the "freeze_at" field.
func FreezeAtGT(v int32) predicate.WinUser {
	return predicate.WinUser(sql.FieldGT(FieldFreezeAt, v))
}

// FreezeAtGTE applies the GTE predicate on the "freeze_at" field.
func FreezeAtGTE(v int32) predicate.WinUser {
	return predicate.WinUser(sql.FieldGTE(FieldFreezeAt, v))
}

// FreezeAtLT applies the LT predicate on the "freeze_at" field.
func FreezeAtLT(v int32) predicate.WinUser {
	return predicate.WinUser(sql.FieldLT(FieldFreezeAt, v))
}

// FreezeAtLTE applies the LTE predicate on the "freeze_at" field.
func FreezeAtLTE(v int32) predicate.WinUser {
	return predicate.WinUser(sql.FieldLTE(FieldFreezeAt, v))
}

// FreezeAtIsNil applies the IsNil predicate on the "freeze_at" field.
func FreezeAtIsNil() predicate.WinUser {
	return predicate.WinUser(sql.FieldIsNull(FieldFreezeAt))
}

// FreezeAtNotNil applies the NotNil predicate on the "freeze_at" field.
func FreezeAtNotNil() predicate.WinUser {
	return predicate.WinUser(sql.FieldNotNull(FieldFreezeAt))
}

// OperatorNameEQ applies the EQ predicate on the "operator_name" field.
func OperatorNameEQ(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldOperatorName, v))
}

// OperatorNameNEQ applies the NEQ predicate on the "operator_name" field.
func OperatorNameNEQ(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldNEQ(FieldOperatorName, v))
}

// OperatorNameIn applies the In predicate on the "operator_name" field.
func OperatorNameIn(vs ...string) predicate.WinUser {
	return predicate.WinUser(sql.FieldIn(FieldOperatorName, vs...))
}

// OperatorNameNotIn applies the NotIn predicate on the "operator_name" field.
func OperatorNameNotIn(vs ...string) predicate.WinUser {
	return predicate.WinUser(sql.FieldNotIn(FieldOperatorName, vs...))
}

// OperatorNameGT applies the GT predicate on the "operator_name" field.
func OperatorNameGT(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldGT(FieldOperatorName, v))
}

// OperatorNameGTE applies the GTE predicate on the "operator_name" field.
func OperatorNameGTE(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldGTE(FieldOperatorName, v))
}

// OperatorNameLT applies the LT predicate on the "operator_name" field.
func OperatorNameLT(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldLT(FieldOperatorName, v))
}

// OperatorNameLTE applies the LTE predicate on the "operator_name" field.
func OperatorNameLTE(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldLTE(FieldOperatorName, v))
}

// OperatorNameContains applies the Contains predicate on the "operator_name" field.
func OperatorNameContains(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldContains(FieldOperatorName, v))
}

// OperatorNameHasPrefix applies the HasPrefix predicate on the "operator_name" field.
func OperatorNameHasPrefix(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldHasPrefix(FieldOperatorName, v))
}

// OperatorNameHasSuffix applies the HasSuffix predicate on the "operator_name" field.
func OperatorNameHasSuffix(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldHasSuffix(FieldOperatorName, v))
}

// OperatorNameIsNil applies the IsNil predicate on the "operator_name" field.
func OperatorNameIsNil() predicate.WinUser {
	return predicate.WinUser(sql.FieldIsNull(FieldOperatorName))
}

// OperatorNameNotNil applies the NotNil predicate on the "operator_name" field.
func OperatorNameNotNil() predicate.WinUser {
	return predicate.WinUser(sql.FieldNotNull(FieldOperatorName))
}

// OperatorNameEqualFold applies the EqualFold predicate on the "operator_name" field.
func OperatorNameEqualFold(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldEqualFold(FieldOperatorName, v))
}

// OperatorNameContainsFold applies the ContainsFold predicate on the "operator_name" field.
func OperatorNameContainsFold(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldContainsFold(FieldOperatorName, v))
}

// CreatedNameEQ applies the EQ predicate on the "created_name" field.
func CreatedNameEQ(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldCreatedName, v))
}

// CreatedNameNEQ applies the NEQ predicate on the "created_name" field.
func CreatedNameNEQ(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldNEQ(FieldCreatedName, v))
}

// CreatedNameIn applies the In predicate on the "created_name" field.
func CreatedNameIn(vs ...string) predicate.WinUser {
	return predicate.WinUser(sql.FieldIn(FieldCreatedName, vs...))
}

// CreatedNameNotIn applies the NotIn predicate on the "created_name" field.
func CreatedNameNotIn(vs ...string) predicate.WinUser {
	return predicate.WinUser(sql.FieldNotIn(FieldCreatedName, vs...))
}

// CreatedNameGT applies the GT predicate on the "created_name" field.
func CreatedNameGT(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldGT(FieldCreatedName, v))
}

// CreatedNameGTE applies the GTE predicate on the "created_name" field.
func CreatedNameGTE(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldGTE(FieldCreatedName, v))
}

// CreatedNameLT applies the LT predicate on the "created_name" field.
func CreatedNameLT(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldLT(FieldCreatedName, v))
}

// CreatedNameLTE applies the LTE predicate on the "created_name" field.
func CreatedNameLTE(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldLTE(FieldCreatedName, v))
}

// CreatedNameContains applies the Contains predicate on the "created_name" field.
func CreatedNameContains(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldContains(FieldCreatedName, v))
}

// CreatedNameHasPrefix applies the HasPrefix predicate on the "created_name" field.
func CreatedNameHasPrefix(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldHasPrefix(FieldCreatedName, v))
}

// CreatedNameHasSuffix applies the HasSuffix predicate on the "created_name" field.
func CreatedNameHasSuffix(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldHasSuffix(FieldCreatedName, v))
}

// CreatedNameIsNil applies the IsNil predicate on the "created_name" field.
func CreatedNameIsNil() predicate.WinUser {
	return predicate.WinUser(sql.FieldIsNull(FieldCreatedName))
}

// CreatedNameNotNil applies the NotNil predicate on the "created_name" field.
func CreatedNameNotNil() predicate.WinUser {
	return predicate.WinUser(sql.FieldNotNull(FieldCreatedName))
}

// CreatedNameEqualFold applies the EqualFold predicate on the "created_name" field.
func CreatedNameEqualFold(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldEqualFold(FieldCreatedName, v))
}

// CreatedNameContainsFold applies the ContainsFold predicate on the "created_name" field.
func CreatedNameContainsFold(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldContainsFold(FieldCreatedName, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int8) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int8) predicate.WinUser {
	return predicate.WinUser(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int8) predicate.WinUser {
	return predicate.WinUser(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int8) predicate.WinUser {
	return predicate.WinUser(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int8) predicate.WinUser {
	return predicate.WinUser(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int8) predicate.WinUser {
	return predicate.WinUser(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int8) predicate.WinUser {
	return predicate.WinUser(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int8) predicate.WinUser {
	return predicate.WinUser(sql.FieldLTE(FieldStatus, v))
}

// LastLoginIPEQ applies the EQ predicate on the "last_login_ip" field.
func LastLoginIPEQ(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldLastLoginIP, v))
}

// LastLoginIPNEQ applies the NEQ predicate on the "last_login_ip" field.
func LastLoginIPNEQ(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldNEQ(FieldLastLoginIP, v))
}

// LastLoginIPIn applies the In predicate on the "last_login_ip" field.
func LastLoginIPIn(vs ...string) predicate.WinUser {
	return predicate.WinUser(sql.FieldIn(FieldLastLoginIP, vs...))
}

// LastLoginIPNotIn applies the NotIn predicate on the "last_login_ip" field.
func LastLoginIPNotIn(vs ...string) predicate.WinUser {
	return predicate.WinUser(sql.FieldNotIn(FieldLastLoginIP, vs...))
}

// LastLoginIPGT applies the GT predicate on the "last_login_ip" field.
func LastLoginIPGT(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldGT(FieldLastLoginIP, v))
}

// LastLoginIPGTE applies the GTE predicate on the "last_login_ip" field.
func LastLoginIPGTE(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldGTE(FieldLastLoginIP, v))
}

// LastLoginIPLT applies the LT predicate on the "last_login_ip" field.
func LastLoginIPLT(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldLT(FieldLastLoginIP, v))
}

// LastLoginIPLTE applies the LTE predicate on the "last_login_ip" field.
func LastLoginIPLTE(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldLTE(FieldLastLoginIP, v))
}

// LastLoginIPContains applies the Contains predicate on the "last_login_ip" field.
func LastLoginIPContains(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldContains(FieldLastLoginIP, v))
}

// LastLoginIPHasPrefix applies the HasPrefix predicate on the "last_login_ip" field.
func LastLoginIPHasPrefix(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldHasPrefix(FieldLastLoginIP, v))
}

// LastLoginIPHasSuffix applies the HasSuffix predicate on the "last_login_ip" field.
func LastLoginIPHasSuffix(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldHasSuffix(FieldLastLoginIP, v))
}

// LastLoginIPIsNil applies the IsNil predicate on the "last_login_ip" field.
func LastLoginIPIsNil() predicate.WinUser {
	return predicate.WinUser(sql.FieldIsNull(FieldLastLoginIP))
}

// LastLoginIPNotNil applies the NotNil predicate on the "last_login_ip" field.
func LastLoginIPNotNil() predicate.WinUser {
	return predicate.WinUser(sql.FieldNotNull(FieldLastLoginIP))
}

// LastLoginIPEqualFold applies the EqualFold predicate on the "last_login_ip" field.
func LastLoginIPEqualFold(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldEqualFold(FieldLastLoginIP, v))
}

// LastLoginIPContainsFold applies the ContainsFold predicate on the "last_login_ip" field.
func LastLoginIPContainsFold(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldContainsFold(FieldLastLoginIP, v))
}

// LastLoginIPRegionEQ applies the EQ predicate on the "last_login_ip_region" field.
func LastLoginIPRegionEQ(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldLastLoginIPRegion, v))
}

// LastLoginIPRegionNEQ applies the NEQ predicate on the "last_login_ip_region" field.
func LastLoginIPRegionNEQ(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldNEQ(FieldLastLoginIPRegion, v))
}

// LastLoginIPRegionIn applies the In predicate on the "last_login_ip_region" field.
func LastLoginIPRegionIn(vs ...string) predicate.WinUser {
	return predicate.WinUser(sql.FieldIn(FieldLastLoginIPRegion, vs...))
}

// LastLoginIPRegionNotIn applies the NotIn predicate on the "last_login_ip_region" field.
func LastLoginIPRegionNotIn(vs ...string) predicate.WinUser {
	return predicate.WinUser(sql.FieldNotIn(FieldLastLoginIPRegion, vs...))
}

// LastLoginIPRegionGT applies the GT predicate on the "last_login_ip_region" field.
func LastLoginIPRegionGT(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldGT(FieldLastLoginIPRegion, v))
}

// LastLoginIPRegionGTE applies the GTE predicate on the "last_login_ip_region" field.
func LastLoginIPRegionGTE(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldGTE(FieldLastLoginIPRegion, v))
}

// LastLoginIPRegionLT applies the LT predicate on the "last_login_ip_region" field.
func LastLoginIPRegionLT(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldLT(FieldLastLoginIPRegion, v))
}

// LastLoginIPRegionLTE applies the LTE predicate on the "last_login_ip_region" field.
func LastLoginIPRegionLTE(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldLTE(FieldLastLoginIPRegion, v))
}

// LastLoginIPRegionContains applies the Contains predicate on the "last_login_ip_region" field.
func LastLoginIPRegionContains(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldContains(FieldLastLoginIPRegion, v))
}

// LastLoginIPRegionHasPrefix applies the HasPrefix predicate on the "last_login_ip_region" field.
func LastLoginIPRegionHasPrefix(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldHasPrefix(FieldLastLoginIPRegion, v))
}

// LastLoginIPRegionHasSuffix applies the HasSuffix predicate on the "last_login_ip_region" field.
func LastLoginIPRegionHasSuffix(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldHasSuffix(FieldLastLoginIPRegion, v))
}

// LastLoginIPRegionIsNil applies the IsNil predicate on the "last_login_ip_region" field.
func LastLoginIPRegionIsNil() predicate.WinUser {
	return predicate.WinUser(sql.FieldIsNull(FieldLastLoginIPRegion))
}

// LastLoginIPRegionNotNil applies the NotNil predicate on the "last_login_ip_region" field.
func LastLoginIPRegionNotNil() predicate.WinUser {
	return predicate.WinUser(sql.FieldNotNull(FieldLastLoginIPRegion))
}

// LastLoginIPRegionEqualFold applies the EqualFold predicate on the "last_login_ip_region" field.
func LastLoginIPRegionEqualFold(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldEqualFold(FieldLastLoginIPRegion, v))
}

// LastLoginIPRegionContainsFold applies the ContainsFold predicate on the "last_login_ip_region" field.
func LastLoginIPRegionContainsFold(v string) predicate.WinUser {
	return predicate.WinUser(sql.FieldContainsFold(FieldLastLoginIPRegion, v))
}

// LastLoginTimeEQ applies the EQ predicate on the "last_login_time" field.
func LastLoginTimeEQ(v int32) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldLastLoginTime, v))
}

// LastLoginTimeNEQ applies the NEQ predicate on the "last_login_time" field.
func LastLoginTimeNEQ(v int32) predicate.WinUser {
	return predicate.WinUser(sql.FieldNEQ(FieldLastLoginTime, v))
}

// LastLoginTimeIn applies the In predicate on the "last_login_time" field.
func LastLoginTimeIn(vs ...int32) predicate.WinUser {
	return predicate.WinUser(sql.FieldIn(FieldLastLoginTime, vs...))
}

// LastLoginTimeNotIn applies the NotIn predicate on the "last_login_time" field.
func LastLoginTimeNotIn(vs ...int32) predicate.WinUser {
	return predicate.WinUser(sql.FieldNotIn(FieldLastLoginTime, vs...))
}

// LastLoginTimeGT applies the GT predicate on the "last_login_time" field.
func LastLoginTimeGT(v int32) predicate.WinUser {
	return predicate.WinUser(sql.FieldGT(FieldLastLoginTime, v))
}

// LastLoginTimeGTE applies the GTE predicate on the "last_login_time" field.
func LastLoginTimeGTE(v int32) predicate.WinUser {
	return predicate.WinUser(sql.FieldGTE(FieldLastLoginTime, v))
}

// LastLoginTimeLT applies the LT predicate on the "last_login_time" field.
func LastLoginTimeLT(v int32) predicate.WinUser {
	return predicate.WinUser(sql.FieldLT(FieldLastLoginTime, v))
}

// LastLoginTimeLTE applies the LTE predicate on the "last_login_time" field.
func LastLoginTimeLTE(v int32) predicate.WinUser {
	return predicate.WinUser(sql.FieldLTE(FieldLastLoginTime, v))
}

// LastLoginTimeIsNil applies the IsNil predicate on the "last_login_time" field.
func LastLoginTimeIsNil() predicate.WinUser {
	return predicate.WinUser(sql.FieldIsNull(FieldLastLoginTime))
}

// LastLoginTimeNotNil applies the NotNil predicate on the "last_login_time" field.
func LastLoginTimeNotNil() predicate.WinUser {
	return predicate.WinUser(sql.FieldNotNull(FieldLastLoginTime))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v int32) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v int32) predicate.WinUser {
	return predicate.WinUser(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...int32) predicate.WinUser {
	return predicate.WinUser(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...int32) predicate.WinUser {
	return predicate.WinUser(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v int32) predicate.WinUser {
	return predicate.WinUser(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v int32) predicate.WinUser {
	return predicate.WinUser(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v int32) predicate.WinUser {
	return predicate.WinUser(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v int32) predicate.WinUser {
	return predicate.WinUser(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v int32) predicate.WinUser {
	return predicate.WinUser(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v int32) predicate.WinUser {
	return predicate.WinUser(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...int32) predicate.WinUser {
	return predicate.WinUser(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...int32) predicate.WinUser {
	return predicate.WinUser(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v int32) predicate.WinUser {
	return predicate.WinUser(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v int32) predicate.WinUser {
	return predicate.WinUser(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v int32) predicate.WinUser {
	return predicate.WinUser(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v int32) predicate.WinUser {
	return predicate.WinUser(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.WinUser) predicate.WinUser {
	return predicate.WinUser(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.WinUser) predicate.WinUser {
	return predicate.WinUser(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.WinUser) predicate.WinUser {
	return predicate.WinUser(func(s *sql.Selector) {
		p(s.Not())
	})
}
