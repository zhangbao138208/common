// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.skig.tech/zero-core/common/ent/winuser"
)

// WinUserCreate is the builder for creating a WinUser entity.
type WinUserCreate struct {
	config
	mutation *WinUserMutation
	hooks    []Hook
}

// SetUsername sets the "username" field.
func (wuc *WinUserCreate) SetUsername(s string) *WinUserCreate {
	wuc.mutation.SetUsername(s)
	return wuc
}

// SetAvatar sets the "avatar" field.
func (wuc *WinUserCreate) SetAvatar(s string) *WinUserCreate {
	wuc.mutation.SetAvatar(s)
	return wuc
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (wuc *WinUserCreate) SetNillableAvatar(s *string) *WinUserCreate {
	if s != nil {
		wuc.SetAvatar(*s)
	}
	return wuc
}

// SetFcoin sets the "fcoin" field.
func (wuc *WinUserCreate) SetFcoin(f float64) *WinUserCreate {
	wuc.mutation.SetFcoin(f)
	return wuc
}

// SetCoinCommission sets the "coin_commission" field.
func (wuc *WinUserCreate) SetCoinCommission(f float64) *WinUserCreate {
	wuc.mutation.SetCoinCommission(f)
	return wuc
}

// SetLevelID sets the "level_id" field.
func (wuc *WinUserCreate) SetLevelID(i int8) *WinUserCreate {
	wuc.mutation.SetLevelID(i)
	return wuc
}

// SetRole sets the "role" field.
func (wuc *WinUserCreate) SetRole(i int8) *WinUserCreate {
	wuc.mutation.SetRole(i)
	return wuc
}

// SetIsPromoter sets the "is_promoter" field.
func (wuc *WinUserCreate) SetIsPromoter(b bool) *WinUserCreate {
	wuc.mutation.SetIsPromoter(b)
	return wuc
}

// SetFlag sets the "flag" field.
func (wuc *WinUserCreate) SetFlag(u uint32) *WinUserCreate {
	wuc.mutation.SetFlag(u)
	return wuc
}

// SetRealName sets the "real_name" field.
func (wuc *WinUserCreate) SetRealName(s string) *WinUserCreate {
	wuc.mutation.SetRealName(s)
	return wuc
}

// SetSignature sets the "signature" field.
func (wuc *WinUserCreate) SetSignature(s string) *WinUserCreate {
	wuc.mutation.SetSignature(s)
	return wuc
}

// SetBirthday sets the "birthday" field.
func (wuc *WinUserCreate) SetBirthday(s string) *WinUserCreate {
	wuc.mutation.SetBirthday(s)
	return wuc
}

// SetNillableBirthday sets the "birthday" field if the given value is not nil.
func (wuc *WinUserCreate) SetNillableBirthday(s *string) *WinUserCreate {
	if s != nil {
		wuc.SetBirthday(*s)
	}
	return wuc
}

// SetAreaCode sets the "area_code" field.
func (wuc *WinUserCreate) SetAreaCode(s string) *WinUserCreate {
	wuc.mutation.SetAreaCode(s)
	return wuc
}

// SetMobile sets the "mobile" field.
func (wuc *WinUserCreate) SetMobile(s string) *WinUserCreate {
	wuc.mutation.SetMobile(s)
	return wuc
}

// SetEmail sets the "email" field.
func (wuc *WinUserCreate) SetEmail(s string) *WinUserCreate {
	wuc.mutation.SetEmail(s)
	return wuc
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (wuc *WinUserCreate) SetNillableEmail(s *string) *WinUserCreate {
	if s != nil {
		wuc.SetEmail(*s)
	}
	return wuc
}

// SetSex sets the "sex" field.
func (wuc *WinUserCreate) SetSex(b bool) *WinUserCreate {
	wuc.mutation.SetSex(b)
	return wuc
}

// SetBindBank sets the "bind_bank" field.
func (wuc *WinUserCreate) SetBindBank(b bool) *WinUserCreate {
	wuc.mutation.SetBindBank(b)
	return wuc
}

// SetAddress sets the "address" field.
func (wuc *WinUserCreate) SetAddress(s string) *WinUserCreate {
	wuc.mutation.SetAddress(s)
	return wuc
}

// SetScore sets the "score" field.
func (wuc *WinUserCreate) SetScore(u uint32) *WinUserCreate {
	wuc.mutation.SetScore(u)
	return wuc
}

// SetPromoCode sets the "promo_code" field.
func (wuc *WinUserCreate) SetPromoCode(s string) *WinUserCreate {
	wuc.mutation.SetPromoCode(s)
	return wuc
}

// SetSupUID1 sets the "sup_uid_1" field.
func (wuc *WinUserCreate) SetSupUID1(u uint32) *WinUserCreate {
	wuc.mutation.SetSupUID1(u)
	return wuc
}

// SetSupUsername1 sets the "sup_username_1" field.
func (wuc *WinUserCreate) SetSupUsername1(s string) *WinUserCreate {
	wuc.mutation.SetSupUsername1(s)
	return wuc
}

// SetSupUID2 sets the "sup_uid_2" field.
func (wuc *WinUserCreate) SetSupUID2(u uint32) *WinUserCreate {
	wuc.mutation.SetSupUID2(u)
	return wuc
}

// SetSupUID3 sets the "sup_uid_3" field.
func (wuc *WinUserCreate) SetSupUID3(u uint32) *WinUserCreate {
	wuc.mutation.SetSupUID3(u)
	return wuc
}

// SetSupUID4 sets the "sup_uid_4" field.
func (wuc *WinUserCreate) SetSupUID4(u uint32) *WinUserCreate {
	wuc.mutation.SetSupUID4(u)
	return wuc
}

// SetSupUID5 sets the "sup_uid_5" field.
func (wuc *WinUserCreate) SetSupUID5(u uint32) *WinUserCreate {
	wuc.mutation.SetSupUID5(u)
	return wuc
}

// SetSupUID6 sets the "sup_uid_6" field.
func (wuc *WinUserCreate) SetSupUID6(u uint32) *WinUserCreate {
	wuc.mutation.SetSupUID6(u)
	return wuc
}

// SetSupUIDTop sets the "sup_uid_top" field.
func (wuc *WinUserCreate) SetSupUIDTop(i int32) *WinUserCreate {
	wuc.mutation.SetSupUIDTop(i)
	return wuc
}

// SetSupUsernameTop sets the "sup_username_top" field.
func (wuc *WinUserCreate) SetSupUsernameTop(s string) *WinUserCreate {
	wuc.mutation.SetSupUsernameTop(s)
	return wuc
}

// SetSupLevelTop sets the "sup_level_top" field.
func (wuc *WinUserCreate) SetSupLevelTop(i int32) *WinUserCreate {
	wuc.mutation.SetSupLevelTop(i)
	return wuc
}

// SetPasswordHash sets the "password_hash" field.
func (wuc *WinUserCreate) SetPasswordHash(s string) *WinUserCreate {
	wuc.mutation.SetPasswordHash(s)
	return wuc
}

// SetPasswordCoin sets the "password_coin" field.
func (wuc *WinUserCreate) SetPasswordCoin(s string) *WinUserCreate {
	wuc.mutation.SetPasswordCoin(s)
	return wuc
}

// SetIP sets the "ip" field.
func (wuc *WinUserCreate) SetIP(s string) *WinUserCreate {
	wuc.mutation.SetIP(s)
	return wuc
}

// SetIPRegion sets the "ip_region" field.
func (wuc *WinUserCreate) SetIPRegion(s string) *WinUserCreate {
	wuc.mutation.SetIPRegion(s)
	return wuc
}

// SetNillableIPRegion sets the "ip_region" field if the given value is not nil.
func (wuc *WinUserCreate) SetNillableIPRegion(s *string) *WinUserCreate {
	if s != nil {
		wuc.SetIPRegion(*s)
	}
	return wuc
}

// SetThirdLoginType sets the "third_login_type" field.
func (wuc *WinUserCreate) SetThirdLoginType(s string) *WinUserCreate {
	wuc.mutation.SetThirdLoginType(s)
	return wuc
}

// SetFreezeCause sets the "freeze_cause" field.
func (wuc *WinUserCreate) SetFreezeCause(s string) *WinUserCreate {
	wuc.mutation.SetFreezeCause(s)
	return wuc
}

// SetNillableFreezeCause sets the "freeze_cause" field if the given value is not nil.
func (wuc *WinUserCreate) SetNillableFreezeCause(s *string) *WinUserCreate {
	if s != nil {
		wuc.SetFreezeCause(*s)
	}
	return wuc
}

// SetFreezeAt sets the "freeze_at" field.
func (wuc *WinUserCreate) SetFreezeAt(i int32) *WinUserCreate {
	wuc.mutation.SetFreezeAt(i)
	return wuc
}

// SetNillableFreezeAt sets the "freeze_at" field if the given value is not nil.
func (wuc *WinUserCreate) SetNillableFreezeAt(i *int32) *WinUserCreate {
	if i != nil {
		wuc.SetFreezeAt(*i)
	}
	return wuc
}

// SetOperatorName sets the "operator_name" field.
func (wuc *WinUserCreate) SetOperatorName(s string) *WinUserCreate {
	wuc.mutation.SetOperatorName(s)
	return wuc
}

// SetNillableOperatorName sets the "operator_name" field if the given value is not nil.
func (wuc *WinUserCreate) SetNillableOperatorName(s *string) *WinUserCreate {
	if s != nil {
		wuc.SetOperatorName(*s)
	}
	return wuc
}

// SetCreatedName sets the "created_name" field.
func (wuc *WinUserCreate) SetCreatedName(s string) *WinUserCreate {
	wuc.mutation.SetCreatedName(s)
	return wuc
}

// SetNillableCreatedName sets the "created_name" field if the given value is not nil.
func (wuc *WinUserCreate) SetNillableCreatedName(s *string) *WinUserCreate {
	if s != nil {
		wuc.SetCreatedName(*s)
	}
	return wuc
}

// SetStatus sets the "status" field.
func (wuc *WinUserCreate) SetStatus(i int8) *WinUserCreate {
	wuc.mutation.SetStatus(i)
	return wuc
}

// SetLastLoginIP sets the "last_login_ip" field.
func (wuc *WinUserCreate) SetLastLoginIP(s string) *WinUserCreate {
	wuc.mutation.SetLastLoginIP(s)
	return wuc
}

// SetNillableLastLoginIP sets the "last_login_ip" field if the given value is not nil.
func (wuc *WinUserCreate) SetNillableLastLoginIP(s *string) *WinUserCreate {
	if s != nil {
		wuc.SetLastLoginIP(*s)
	}
	return wuc
}

// SetLastLoginIPRegion sets the "last_login_ip_region" field.
func (wuc *WinUserCreate) SetLastLoginIPRegion(s string) *WinUserCreate {
	wuc.mutation.SetLastLoginIPRegion(s)
	return wuc
}

// SetNillableLastLoginIPRegion sets the "last_login_ip_region" field if the given value is not nil.
func (wuc *WinUserCreate) SetNillableLastLoginIPRegion(s *string) *WinUserCreate {
	if s != nil {
		wuc.SetLastLoginIPRegion(*s)
	}
	return wuc
}

// SetLastLoginTime sets the "last_login_time" field.
func (wuc *WinUserCreate) SetLastLoginTime(i int32) *WinUserCreate {
	wuc.mutation.SetLastLoginTime(i)
	return wuc
}

// SetNillableLastLoginTime sets the "last_login_time" field if the given value is not nil.
func (wuc *WinUserCreate) SetNillableLastLoginTime(i *int32) *WinUserCreate {
	if i != nil {
		wuc.SetLastLoginTime(*i)
	}
	return wuc
}

// SetCreatedAt sets the "created_at" field.
func (wuc *WinUserCreate) SetCreatedAt(i int32) *WinUserCreate {
	wuc.mutation.SetCreatedAt(i)
	return wuc
}

// SetUpdatedAt sets the "updated_at" field.
func (wuc *WinUserCreate) SetUpdatedAt(i int32) *WinUserCreate {
	wuc.mutation.SetUpdatedAt(i)
	return wuc
}

// SetID sets the "id" field.
func (wuc *WinUserCreate) SetID(i int32) *WinUserCreate {
	wuc.mutation.SetID(i)
	return wuc
}

// Mutation returns the WinUserMutation object of the builder.
func (wuc *WinUserCreate) Mutation() *WinUserMutation {
	return wuc.mutation
}

// Save creates the WinUser in the database.
func (wuc *WinUserCreate) Save(ctx context.Context) (*WinUser, error) {
	return withHooks(ctx, wuc.sqlSave, wuc.mutation, wuc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wuc *WinUserCreate) SaveX(ctx context.Context) *WinUser {
	v, err := wuc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wuc *WinUserCreate) Exec(ctx context.Context) error {
	_, err := wuc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wuc *WinUserCreate) ExecX(ctx context.Context) {
	if err := wuc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wuc *WinUserCreate) check() error {
	if _, ok := wuc.mutation.Username(); !ok {
		return &ValidationError{Name: "username", err: errors.New(`ent: missing required field "WinUser.username"`)}
	}
	if _, ok := wuc.mutation.Fcoin(); !ok {
		return &ValidationError{Name: "fcoin", err: errors.New(`ent: missing required field "WinUser.fcoin"`)}
	}
	if _, ok := wuc.mutation.CoinCommission(); !ok {
		return &ValidationError{Name: "coin_commission", err: errors.New(`ent: missing required field "WinUser.coin_commission"`)}
	}
	if _, ok := wuc.mutation.LevelID(); !ok {
		return &ValidationError{Name: "level_id", err: errors.New(`ent: missing required field "WinUser.level_id"`)}
	}
	if _, ok := wuc.mutation.Role(); !ok {
		return &ValidationError{Name: "role", err: errors.New(`ent: missing required field "WinUser.role"`)}
	}
	if _, ok := wuc.mutation.IsPromoter(); !ok {
		return &ValidationError{Name: "is_promoter", err: errors.New(`ent: missing required field "WinUser.is_promoter"`)}
	}
	if _, ok := wuc.mutation.Flag(); !ok {
		return &ValidationError{Name: "flag", err: errors.New(`ent: missing required field "WinUser.flag"`)}
	}
	if _, ok := wuc.mutation.RealName(); !ok {
		return &ValidationError{Name: "real_name", err: errors.New(`ent: missing required field "WinUser.real_name"`)}
	}
	if _, ok := wuc.mutation.Signature(); !ok {
		return &ValidationError{Name: "signature", err: errors.New(`ent: missing required field "WinUser.signature"`)}
	}
	if _, ok := wuc.mutation.AreaCode(); !ok {
		return &ValidationError{Name: "area_code", err: errors.New(`ent: missing required field "WinUser.area_code"`)}
	}
	if _, ok := wuc.mutation.Mobile(); !ok {
		return &ValidationError{Name: "mobile", err: errors.New(`ent: missing required field "WinUser.mobile"`)}
	}
	if _, ok := wuc.mutation.Sex(); !ok {
		return &ValidationError{Name: "sex", err: errors.New(`ent: missing required field "WinUser.sex"`)}
	}
	if _, ok := wuc.mutation.BindBank(); !ok {
		return &ValidationError{Name: "bind_bank", err: errors.New(`ent: missing required field "WinUser.bind_bank"`)}
	}
	if _, ok := wuc.mutation.Address(); !ok {
		return &ValidationError{Name: "address", err: errors.New(`ent: missing required field "WinUser.address"`)}
	}
	if _, ok := wuc.mutation.Score(); !ok {
		return &ValidationError{Name: "score", err: errors.New(`ent: missing required field "WinUser.score"`)}
	}
	if _, ok := wuc.mutation.PromoCode(); !ok {
		return &ValidationError{Name: "promo_code", err: errors.New(`ent: missing required field "WinUser.promo_code"`)}
	}
	if _, ok := wuc.mutation.SupUID1(); !ok {
		return &ValidationError{Name: "sup_uid_1", err: errors.New(`ent: missing required field "WinUser.sup_uid_1"`)}
	}
	if _, ok := wuc.mutation.SupUsername1(); !ok {
		return &ValidationError{Name: "sup_username_1", err: errors.New(`ent: missing required field "WinUser.sup_username_1"`)}
	}
	if _, ok := wuc.mutation.SupUID2(); !ok {
		return &ValidationError{Name: "sup_uid_2", err: errors.New(`ent: missing required field "WinUser.sup_uid_2"`)}
	}
	if _, ok := wuc.mutation.SupUID3(); !ok {
		return &ValidationError{Name: "sup_uid_3", err: errors.New(`ent: missing required field "WinUser.sup_uid_3"`)}
	}
	if _, ok := wuc.mutation.SupUID4(); !ok {
		return &ValidationError{Name: "sup_uid_4", err: errors.New(`ent: missing required field "WinUser.sup_uid_4"`)}
	}
	if _, ok := wuc.mutation.SupUID5(); !ok {
		return &ValidationError{Name: "sup_uid_5", err: errors.New(`ent: missing required field "WinUser.sup_uid_5"`)}
	}
	if _, ok := wuc.mutation.SupUID6(); !ok {
		return &ValidationError{Name: "sup_uid_6", err: errors.New(`ent: missing required field "WinUser.sup_uid_6"`)}
	}
	if _, ok := wuc.mutation.SupUIDTop(); !ok {
		return &ValidationError{Name: "sup_uid_top", err: errors.New(`ent: missing required field "WinUser.sup_uid_top"`)}
	}
	if _, ok := wuc.mutation.SupUsernameTop(); !ok {
		return &ValidationError{Name: "sup_username_top", err: errors.New(`ent: missing required field "WinUser.sup_username_top"`)}
	}
	if _, ok := wuc.mutation.SupLevelTop(); !ok {
		return &ValidationError{Name: "sup_level_top", err: errors.New(`ent: missing required field "WinUser.sup_level_top"`)}
	}
	if _, ok := wuc.mutation.PasswordHash(); !ok {
		return &ValidationError{Name: "password_hash", err: errors.New(`ent: missing required field "WinUser.password_hash"`)}
	}
	if _, ok := wuc.mutation.PasswordCoin(); !ok {
		return &ValidationError{Name: "password_coin", err: errors.New(`ent: missing required field "WinUser.password_coin"`)}
	}
	if _, ok := wuc.mutation.IP(); !ok {
		return &ValidationError{Name: "ip", err: errors.New(`ent: missing required field "WinUser.ip"`)}
	}
	if _, ok := wuc.mutation.ThirdLoginType(); !ok {
		return &ValidationError{Name: "third_login_type", err: errors.New(`ent: missing required field "WinUser.third_login_type"`)}
	}
	if _, ok := wuc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "WinUser.status"`)}
	}
	if _, ok := wuc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "WinUser.created_at"`)}
	}
	if _, ok := wuc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "WinUser.updated_at"`)}
	}
	return nil
}

func (wuc *WinUserCreate) sqlSave(ctx context.Context) (*WinUser, error) {
	if err := wuc.check(); err != nil {
		return nil, err
	}
	_node, _spec := wuc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wuc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int32(id)
	}
	wuc.mutation.id = &_node.ID
	wuc.mutation.done = true
	return _node, nil
}

func (wuc *WinUserCreate) createSpec() (*WinUser, *sqlgraph.CreateSpec) {
	var (
		_node = &WinUser{config: wuc.config}
		_spec = sqlgraph.NewCreateSpec(winuser.Table, sqlgraph.NewFieldSpec(winuser.FieldID, field.TypeInt32))
	)
	if id, ok := wuc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := wuc.mutation.Username(); ok {
		_spec.SetField(winuser.FieldUsername, field.TypeString, value)
		_node.Username = value
	}
	if value, ok := wuc.mutation.Avatar(); ok {
		_spec.SetField(winuser.FieldAvatar, field.TypeString, value)
		_node.Avatar = value
	}
	if value, ok := wuc.mutation.Fcoin(); ok {
		_spec.SetField(winuser.FieldFcoin, field.TypeFloat64, value)
		_node.Fcoin = value
	}
	if value, ok := wuc.mutation.CoinCommission(); ok {
		_spec.SetField(winuser.FieldCoinCommission, field.TypeFloat64, value)
		_node.CoinCommission = value
	}
	if value, ok := wuc.mutation.LevelID(); ok {
		_spec.SetField(winuser.FieldLevelID, field.TypeInt8, value)
		_node.LevelID = value
	}
	if value, ok := wuc.mutation.Role(); ok {
		_spec.SetField(winuser.FieldRole, field.TypeInt8, value)
		_node.Role = value
	}
	if value, ok := wuc.mutation.IsPromoter(); ok {
		_spec.SetField(winuser.FieldIsPromoter, field.TypeBool, value)
		_node.IsPromoter = value
	}
	if value, ok := wuc.mutation.Flag(); ok {
		_spec.SetField(winuser.FieldFlag, field.TypeUint32, value)
		_node.Flag = value
	}
	if value, ok := wuc.mutation.RealName(); ok {
		_spec.SetField(winuser.FieldRealName, field.TypeString, value)
		_node.RealName = value
	}
	if value, ok := wuc.mutation.Signature(); ok {
		_spec.SetField(winuser.FieldSignature, field.TypeString, value)
		_node.Signature = value
	}
	if value, ok := wuc.mutation.Birthday(); ok {
		_spec.SetField(winuser.FieldBirthday, field.TypeString, value)
		_node.Birthday = value
	}
	if value, ok := wuc.mutation.AreaCode(); ok {
		_spec.SetField(winuser.FieldAreaCode, field.TypeString, value)
		_node.AreaCode = value
	}
	if value, ok := wuc.mutation.Mobile(); ok {
		_spec.SetField(winuser.FieldMobile, field.TypeString, value)
		_node.Mobile = value
	}
	if value, ok := wuc.mutation.Email(); ok {
		_spec.SetField(winuser.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := wuc.mutation.Sex(); ok {
		_spec.SetField(winuser.FieldSex, field.TypeBool, value)
		_node.Sex = value
	}
	if value, ok := wuc.mutation.BindBank(); ok {
		_spec.SetField(winuser.FieldBindBank, field.TypeBool, value)
		_node.BindBank = value
	}
	if value, ok := wuc.mutation.Address(); ok {
		_spec.SetField(winuser.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	if value, ok := wuc.mutation.Score(); ok {
		_spec.SetField(winuser.FieldScore, field.TypeUint32, value)
		_node.Score = value
	}
	if value, ok := wuc.mutation.PromoCode(); ok {
		_spec.SetField(winuser.FieldPromoCode, field.TypeString, value)
		_node.PromoCode = value
	}
	if value, ok := wuc.mutation.SupUID1(); ok {
		_spec.SetField(winuser.FieldSupUID1, field.TypeUint32, value)
		_node.SupUID1 = value
	}
	if value, ok := wuc.mutation.SupUsername1(); ok {
		_spec.SetField(winuser.FieldSupUsername1, field.TypeString, value)
		_node.SupUsername1 = value
	}
	if value, ok := wuc.mutation.SupUID2(); ok {
		_spec.SetField(winuser.FieldSupUID2, field.TypeUint32, value)
		_node.SupUID2 = value
	}
	if value, ok := wuc.mutation.SupUID3(); ok {
		_spec.SetField(winuser.FieldSupUID3, field.TypeUint32, value)
		_node.SupUID3 = value
	}
	if value, ok := wuc.mutation.SupUID4(); ok {
		_spec.SetField(winuser.FieldSupUID4, field.TypeUint32, value)
		_node.SupUID4 = value
	}
	if value, ok := wuc.mutation.SupUID5(); ok {
		_spec.SetField(winuser.FieldSupUID5, field.TypeUint32, value)
		_node.SupUID5 = value
	}
	if value, ok := wuc.mutation.SupUID6(); ok {
		_spec.SetField(winuser.FieldSupUID6, field.TypeUint32, value)
		_node.SupUID6 = value
	}
	if value, ok := wuc.mutation.SupUIDTop(); ok {
		_spec.SetField(winuser.FieldSupUIDTop, field.TypeInt32, value)
		_node.SupUIDTop = value
	}
	if value, ok := wuc.mutation.SupUsernameTop(); ok {
		_spec.SetField(winuser.FieldSupUsernameTop, field.TypeString, value)
		_node.SupUsernameTop = value
	}
	if value, ok := wuc.mutation.SupLevelTop(); ok {
		_spec.SetField(winuser.FieldSupLevelTop, field.TypeInt32, value)
		_node.SupLevelTop = value
	}
	if value, ok := wuc.mutation.PasswordHash(); ok {
		_spec.SetField(winuser.FieldPasswordHash, field.TypeString, value)
		_node.PasswordHash = value
	}
	if value, ok := wuc.mutation.PasswordCoin(); ok {
		_spec.SetField(winuser.FieldPasswordCoin, field.TypeString, value)
		_node.PasswordCoin = value
	}
	if value, ok := wuc.mutation.IP(); ok {
		_spec.SetField(winuser.FieldIP, field.TypeString, value)
		_node.IP = value
	}
	if value, ok := wuc.mutation.IPRegion(); ok {
		_spec.SetField(winuser.FieldIPRegion, field.TypeString, value)
		_node.IPRegion = value
	}
	if value, ok := wuc.mutation.ThirdLoginType(); ok {
		_spec.SetField(winuser.FieldThirdLoginType, field.TypeString, value)
		_node.ThirdLoginType = value
	}
	if value, ok := wuc.mutation.FreezeCause(); ok {
		_spec.SetField(winuser.FieldFreezeCause, field.TypeString, value)
		_node.FreezeCause = value
	}
	if value, ok := wuc.mutation.FreezeAt(); ok {
		_spec.SetField(winuser.FieldFreezeAt, field.TypeInt32, value)
		_node.FreezeAt = value
	}
	if value, ok := wuc.mutation.OperatorName(); ok {
		_spec.SetField(winuser.FieldOperatorName, field.TypeString, value)
		_node.OperatorName = value
	}
	if value, ok := wuc.mutation.CreatedName(); ok {
		_spec.SetField(winuser.FieldCreatedName, field.TypeString, value)
		_node.CreatedName = value
	}
	if value, ok := wuc.mutation.Status(); ok {
		_spec.SetField(winuser.FieldStatus, field.TypeInt8, value)
		_node.Status = value
	}
	if value, ok := wuc.mutation.LastLoginIP(); ok {
		_spec.SetField(winuser.FieldLastLoginIP, field.TypeString, value)
		_node.LastLoginIP = value
	}
	if value, ok := wuc.mutation.LastLoginIPRegion(); ok {
		_spec.SetField(winuser.FieldLastLoginIPRegion, field.TypeString, value)
		_node.LastLoginIPRegion = value
	}
	if value, ok := wuc.mutation.LastLoginTime(); ok {
		_spec.SetField(winuser.FieldLastLoginTime, field.TypeInt32, value)
		_node.LastLoginTime = value
	}
	if value, ok := wuc.mutation.CreatedAt(); ok {
		_spec.SetField(winuser.FieldCreatedAt, field.TypeInt32, value)
		_node.CreatedAt = value
	}
	if value, ok := wuc.mutation.UpdatedAt(); ok {
		_spec.SetField(winuser.FieldUpdatedAt, field.TypeInt32, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// WinUserCreateBulk is the builder for creating many WinUser entities in bulk.
type WinUserCreateBulk struct {
	config
	builders []*WinUserCreate
}

// Save creates the WinUser entities in the database.
func (wucb *WinUserCreateBulk) Save(ctx context.Context) ([]*WinUser, error) {
	specs := make([]*sqlgraph.CreateSpec, len(wucb.builders))
	nodes := make([]*WinUser, len(wucb.builders))
	mutators := make([]Mutator, len(wucb.builders))
	for i := range wucb.builders {
		func(i int, root context.Context) {
			builder := wucb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WinUserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wucb *WinUserCreateBulk) SaveX(ctx context.Context) []*WinUser {
	v, err := wucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wucb *WinUserCreateBulk) Exec(ctx context.Context) error {
	_, err := wucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wucb *WinUserCreateBulk) ExecX(ctx context.Context) {
	if err := wucb.Exec(ctx); err != nil {
		panic(err)
	}
}
