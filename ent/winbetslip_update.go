// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.skig.tech/zero-core/common/ent/predicate"
	"gitlab.skig.tech/zero-core/common/ent/winbetslip"
)

// WinBetslipUpdate is the builder for updating WinBetslip entities.
type WinBetslipUpdate struct {
	config
	hooks    []Hook
	mutation *WinBetslipMutation
}

// Where appends a list predicates to the WinBetslipUpdate builder.
func (wbu *WinBetslipUpdate) Where(ps ...predicate.WinBetslip) *WinBetslipUpdate {
	wbu.mutation.Where(ps...)
	return wbu
}

// SetRoundID sets the "round_id" field.
func (wbu *WinBetslipUpdate) SetRoundID(s string) *WinBetslipUpdate {
	wbu.mutation.SetRoundID(s)
	return wbu
}

// SetTransactionID sets the "transaction_id" field.
func (wbu *WinBetslipUpdate) SetTransactionID(s string) *WinBetslipUpdate {
	wbu.mutation.SetTransactionID(s)
	return wbu
}

// SetGamePlatID sets the "game_plat_id" field.
func (wbu *WinBetslipUpdate) SetGamePlatID(i int32) *WinBetslipUpdate {
	wbu.mutation.ResetGamePlatID()
	wbu.mutation.SetGamePlatID(i)
	return wbu
}

// AddGamePlatID adds i to the "game_plat_id" field.
func (wbu *WinBetslipUpdate) AddGamePlatID(i int32) *WinBetslipUpdate {
	wbu.mutation.AddGamePlatID(i)
	return wbu
}

// SetXbStatus sets the "xb_status" field.
func (wbu *WinBetslipUpdate) SetXbStatus(i int8) *WinBetslipUpdate {
	wbu.mutation.ResetXbStatus()
	wbu.mutation.SetXbStatus(i)
	return wbu
}

// AddXbStatus adds i to the "xb_status" field.
func (wbu *WinBetslipUpdate) AddXbStatus(i int8) *WinBetslipUpdate {
	wbu.mutation.AddXbStatus(i)
	return wbu
}

// SetXbUID sets the "xb_uid" field.
func (wbu *WinBetslipUpdate) SetXbUID(u uint32) *WinBetslipUpdate {
	wbu.mutation.ResetXbUID()
	wbu.mutation.SetXbUID(u)
	return wbu
}

// AddXbUID adds u to the "xb_uid" field.
func (wbu *WinBetslipUpdate) AddXbUID(u int32) *WinBetslipUpdate {
	wbu.mutation.AddXbUID(u)
	return wbu
}

// SetXbUsername sets the "xb_username" field.
func (wbu *WinBetslipUpdate) SetXbUsername(s string) *WinBetslipUpdate {
	wbu.mutation.SetXbUsername(s)
	return wbu
}

// SetXbProfit sets the "xb_profit" field.
func (wbu *WinBetslipUpdate) SetXbProfit(f float64) *WinBetslipUpdate {
	wbu.mutation.ResetXbProfit()
	wbu.mutation.SetXbProfit(f)
	return wbu
}

// SetNillableXbProfit sets the "xb_profit" field if the given value is not nil.
func (wbu *WinBetslipUpdate) SetNillableXbProfit(f *float64) *WinBetslipUpdate {
	if f != nil {
		wbu.SetXbProfit(*f)
	}
	return wbu
}

// AddXbProfit adds f to the "xb_profit" field.
func (wbu *WinBetslipUpdate) AddXbProfit(f float64) *WinBetslipUpdate {
	wbu.mutation.AddXbProfit(f)
	return wbu
}

// ClearXbProfit clears the value of the "xb_profit" field.
func (wbu *WinBetslipUpdate) ClearXbProfit() *WinBetslipUpdate {
	wbu.mutation.ClearXbProfit()
	return wbu
}

// SetStake sets the "stake" field.
func (wbu *WinBetslipUpdate) SetStake(f float64) *WinBetslipUpdate {
	wbu.mutation.ResetStake()
	wbu.mutation.SetStake(f)
	return wbu
}

// AddStake adds f to the "stake" field.
func (wbu *WinBetslipUpdate) AddStake(f float64) *WinBetslipUpdate {
	wbu.mutation.AddStake(f)
	return wbu
}

// SetValidStake sets the "valid_stake" field.
func (wbu *WinBetslipUpdate) SetValidStake(f float64) *WinBetslipUpdate {
	wbu.mutation.ResetValidStake()
	wbu.mutation.SetValidStake(f)
	return wbu
}

// AddValidStake adds f to the "valid_stake" field.
func (wbu *WinBetslipUpdate) AddValidStake(f float64) *WinBetslipUpdate {
	wbu.mutation.AddValidStake(f)
	return wbu
}

// SetPayout sets the "payout" field.
func (wbu *WinBetslipUpdate) SetPayout(f float64) *WinBetslipUpdate {
	wbu.mutation.ResetPayout()
	wbu.mutation.SetPayout(f)
	return wbu
}

// SetNillablePayout sets the "payout" field if the given value is not nil.
func (wbu *WinBetslipUpdate) SetNillablePayout(f *float64) *WinBetslipUpdate {
	if f != nil {
		wbu.SetPayout(*f)
	}
	return wbu
}

// AddPayout adds f to the "payout" field.
func (wbu *WinBetslipUpdate) AddPayout(f float64) *WinBetslipUpdate {
	wbu.mutation.AddPayout(f)
	return wbu
}

// ClearPayout clears the value of the "payout" field.
func (wbu *WinBetslipUpdate) ClearPayout() *WinBetslipUpdate {
	wbu.mutation.ClearPayout()
	return wbu
}

// SetCoinRefund sets the "coin_refund" field.
func (wbu *WinBetslipUpdate) SetCoinRefund(f float64) *WinBetslipUpdate {
	wbu.mutation.ResetCoinRefund()
	wbu.mutation.SetCoinRefund(f)
	return wbu
}

// AddCoinRefund adds f to the "coin_refund" field.
func (wbu *WinBetslipUpdate) AddCoinRefund(f float64) *WinBetslipUpdate {
	wbu.mutation.AddCoinRefund(f)
	return wbu
}

// SetCoinBefore sets the "coin_before" field.
func (wbu *WinBetslipUpdate) SetCoinBefore(f float64) *WinBetslipUpdate {
	wbu.mutation.ResetCoinBefore()
	wbu.mutation.SetCoinBefore(f)
	return wbu
}

// AddCoinBefore adds f to the "coin_before" field.
func (wbu *WinBetslipUpdate) AddCoinBefore(f float64) *WinBetslipUpdate {
	wbu.mutation.AddCoinBefore(f)
	return wbu
}

// SetGameID sets the "game_id" field.
func (wbu *WinBetslipUpdate) SetGameID(s string) *WinBetslipUpdate {
	wbu.mutation.SetGameID(s)
	return wbu
}

// SetGameName sets the "game_name" field.
func (wbu *WinBetslipUpdate) SetGameName(s string) *WinBetslipUpdate {
	wbu.mutation.SetGameName(s)
	return wbu
}

// SetNillableGameName sets the "game_name" field if the given value is not nil.
func (wbu *WinBetslipUpdate) SetNillableGameName(s *string) *WinBetslipUpdate {
	if s != nil {
		wbu.SetGameName(*s)
	}
	return wbu
}

// ClearGameName clears the value of the "game_name" field.
func (wbu *WinBetslipUpdate) ClearGameName() *WinBetslipUpdate {
	wbu.mutation.ClearGameName()
	return wbu
}

// SetAmountType sets the "amount_type" field.
func (wbu *WinBetslipUpdate) SetAmountType(i int32) *WinBetslipUpdate {
	wbu.mutation.ResetAmountType()
	wbu.mutation.SetAmountType(i)
	return wbu
}

// AddAmountType adds i to the "amount_type" field.
func (wbu *WinBetslipUpdate) AddAmountType(i int32) *WinBetslipUpdate {
	wbu.mutation.AddAmountType(i)
	return wbu
}

// SetGameTypeID sets the "game_type_id" field.
func (wbu *WinBetslipUpdate) SetGameTypeID(s string) *WinBetslipUpdate {
	wbu.mutation.SetGameTypeID(s)
	return wbu
}

// SetGameGroupID sets the "game_group_id" field.
func (wbu *WinBetslipUpdate) SetGameGroupID(i int32) *WinBetslipUpdate {
	wbu.mutation.ResetGameGroupID()
	wbu.mutation.SetGameGroupID(i)
	return wbu
}

// SetNillableGameGroupID sets the "game_group_id" field if the given value is not nil.
func (wbu *WinBetslipUpdate) SetNillableGameGroupID(i *int32) *WinBetslipUpdate {
	if i != nil {
		wbu.SetGameGroupID(*i)
	}
	return wbu
}

// AddGameGroupID adds i to the "game_group_id" field.
func (wbu *WinBetslipUpdate) AddGameGroupID(i int32) *WinBetslipUpdate {
	wbu.mutation.AddGameGroupID(i)
	return wbu
}

// ClearGameGroupID clears the value of the "game_group_id" field.
func (wbu *WinBetslipUpdate) ClearGameGroupID() *WinBetslipUpdate {
	wbu.mutation.ClearGameGroupID()
	return wbu
}

// SetSportType sets the "sport_type" field.
func (wbu *WinBetslipUpdate) SetSportType(s string) *WinBetslipUpdate {
	wbu.mutation.SetSportType(s)
	return wbu
}

// SetNillableSportType sets the "sport_type" field if the given value is not nil.
func (wbu *WinBetslipUpdate) SetNillableSportType(s *string) *WinBetslipUpdate {
	if s != nil {
		wbu.SetSportType(*s)
	}
	return wbu
}

// ClearSportType clears the value of the "sport_type" field.
func (wbu *WinBetslipUpdate) ClearSportType() *WinBetslipUpdate {
	wbu.mutation.ClearSportType()
	return wbu
}

// SetDtStarted sets the "dt_started" field.
func (wbu *WinBetslipUpdate) SetDtStarted(i int) *WinBetslipUpdate {
	wbu.mutation.ResetDtStarted()
	wbu.mutation.SetDtStarted(i)
	return wbu
}

// AddDtStarted adds i to the "dt_started" field.
func (wbu *WinBetslipUpdate) AddDtStarted(i int) *WinBetslipUpdate {
	wbu.mutation.AddDtStarted(i)
	return wbu
}

// SetDtCompleted sets the "dt_completed" field.
func (wbu *WinBetslipUpdate) SetDtCompleted(i int) *WinBetslipUpdate {
	wbu.mutation.ResetDtCompleted()
	wbu.mutation.SetDtCompleted(i)
	return wbu
}

// SetNillableDtCompleted sets the "dt_completed" field if the given value is not nil.
func (wbu *WinBetslipUpdate) SetNillableDtCompleted(i *int) *WinBetslipUpdate {
	if i != nil {
		wbu.SetDtCompleted(*i)
	}
	return wbu
}

// AddDtCompleted adds i to the "dt_completed" field.
func (wbu *WinBetslipUpdate) AddDtCompleted(i int) *WinBetslipUpdate {
	wbu.mutation.AddDtCompleted(i)
	return wbu
}

// ClearDtCompleted clears the value of the "dt_completed" field.
func (wbu *WinBetslipUpdate) ClearDtCompleted() *WinBetslipUpdate {
	wbu.mutation.ClearDtCompleted()
	return wbu
}

// SetWinTransactionID sets the "win_transaction_id" field.
func (wbu *WinBetslipUpdate) SetWinTransactionID(s string) *WinBetslipUpdate {
	wbu.mutation.SetWinTransactionID(s)
	return wbu
}

// SetNillableWinTransactionID sets the "win_transaction_id" field if the given value is not nil.
func (wbu *WinBetslipUpdate) SetNillableWinTransactionID(s *string) *WinBetslipUpdate {
	if s != nil {
		wbu.SetWinTransactionID(*s)
	}
	return wbu
}

// ClearWinTransactionID clears the value of the "win_transaction_id" field.
func (wbu *WinBetslipUpdate) ClearWinTransactionID() *WinBetslipUpdate {
	wbu.mutation.ClearWinTransactionID()
	return wbu
}

// SetBetJSON sets the "bet_json" field.
func (wbu *WinBetslipUpdate) SetBetJSON(s string) *WinBetslipUpdate {
	wbu.mutation.SetBetJSON(s)
	return wbu
}

// SetNillableBetJSON sets the "bet_json" field if the given value is not nil.
func (wbu *WinBetslipUpdate) SetNillableBetJSON(s *string) *WinBetslipUpdate {
	if s != nil {
		wbu.SetBetJSON(*s)
	}
	return wbu
}

// ClearBetJSON clears the value of the "bet_json" field.
func (wbu *WinBetslipUpdate) ClearBetJSON() *WinBetslipUpdate {
	wbu.mutation.ClearBetJSON()
	return wbu
}

// SetRewardJSON sets the "reward_json" field.
func (wbu *WinBetslipUpdate) SetRewardJSON(s string) *WinBetslipUpdate {
	wbu.mutation.SetRewardJSON(s)
	return wbu
}

// SetNillableRewardJSON sets the "reward_json" field if the given value is not nil.
func (wbu *WinBetslipUpdate) SetNillableRewardJSON(s *string) *WinBetslipUpdate {
	if s != nil {
		wbu.SetRewardJSON(*s)
	}
	return wbu
}

// ClearRewardJSON clears the value of the "reward_json" field.
func (wbu *WinBetslipUpdate) ClearRewardJSON() *WinBetslipUpdate {
	wbu.mutation.ClearRewardJSON()
	return wbu
}

// SetRefundJSON sets the "refund_json" field.
func (wbu *WinBetslipUpdate) SetRefundJSON(s string) *WinBetslipUpdate {
	wbu.mutation.SetRefundJSON(s)
	return wbu
}

// SetNillableRefundJSON sets the "refund_json" field if the given value is not nil.
func (wbu *WinBetslipUpdate) SetNillableRefundJSON(s *string) *WinBetslipUpdate {
	if s != nil {
		wbu.SetRefundJSON(*s)
	}
	return wbu
}

// ClearRefundJSON clears the value of the "refund_json" field.
func (wbu *WinBetslipUpdate) ClearRefundJSON() *WinBetslipUpdate {
	wbu.mutation.ClearRefundJSON()
	return wbu
}

// SetCreateTimeStr sets the "create_time_str" field.
func (wbu *WinBetslipUpdate) SetCreateTimeStr(s string) *WinBetslipUpdate {
	wbu.mutation.SetCreateTimeStr(s)
	return wbu
}

// SetCreatedAt sets the "created_at" field.
func (wbu *WinBetslipUpdate) SetCreatedAt(i int32) *WinBetslipUpdate {
	wbu.mutation.ResetCreatedAt()
	wbu.mutation.SetCreatedAt(i)
	return wbu
}

// AddCreatedAt adds i to the "created_at" field.
func (wbu *WinBetslipUpdate) AddCreatedAt(i int32) *WinBetslipUpdate {
	wbu.mutation.AddCreatedAt(i)
	return wbu
}

// SetUpdatedAt sets the "updated_at" field.
func (wbu *WinBetslipUpdate) SetUpdatedAt(i int32) *WinBetslipUpdate {
	wbu.mutation.ResetUpdatedAt()
	wbu.mutation.SetUpdatedAt(i)
	return wbu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (wbu *WinBetslipUpdate) AddUpdatedAt(i int32) *WinBetslipUpdate {
	wbu.mutation.AddUpdatedAt(i)
	return wbu
}

// Mutation returns the WinBetslipMutation object of the builder.
func (wbu *WinBetslipUpdate) Mutation() *WinBetslipMutation {
	return wbu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wbu *WinBetslipUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, wbu.sqlSave, wbu.mutation, wbu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wbu *WinBetslipUpdate) SaveX(ctx context.Context) int {
	affected, err := wbu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wbu *WinBetslipUpdate) Exec(ctx context.Context) error {
	_, err := wbu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wbu *WinBetslipUpdate) ExecX(ctx context.Context) {
	if err := wbu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wbu *WinBetslipUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(winbetslip.Table, winbetslip.Columns, sqlgraph.NewFieldSpec(winbetslip.FieldID, field.TypeInt))
	if ps := wbu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wbu.mutation.RoundID(); ok {
		_spec.SetField(winbetslip.FieldRoundID, field.TypeString, value)
	}
	if value, ok := wbu.mutation.TransactionID(); ok {
		_spec.SetField(winbetslip.FieldTransactionID, field.TypeString, value)
	}
	if value, ok := wbu.mutation.GamePlatID(); ok {
		_spec.SetField(winbetslip.FieldGamePlatID, field.TypeInt32, value)
	}
	if value, ok := wbu.mutation.AddedGamePlatID(); ok {
		_spec.AddField(winbetslip.FieldGamePlatID, field.TypeInt32, value)
	}
	if value, ok := wbu.mutation.XbStatus(); ok {
		_spec.SetField(winbetslip.FieldXbStatus, field.TypeInt8, value)
	}
	if value, ok := wbu.mutation.AddedXbStatus(); ok {
		_spec.AddField(winbetslip.FieldXbStatus, field.TypeInt8, value)
	}
	if value, ok := wbu.mutation.XbUID(); ok {
		_spec.SetField(winbetslip.FieldXbUID, field.TypeUint32, value)
	}
	if value, ok := wbu.mutation.AddedXbUID(); ok {
		_spec.AddField(winbetslip.FieldXbUID, field.TypeUint32, value)
	}
	if value, ok := wbu.mutation.XbUsername(); ok {
		_spec.SetField(winbetslip.FieldXbUsername, field.TypeString, value)
	}
	if value, ok := wbu.mutation.XbProfit(); ok {
		_spec.SetField(winbetslip.FieldXbProfit, field.TypeFloat64, value)
	}
	if value, ok := wbu.mutation.AddedXbProfit(); ok {
		_spec.AddField(winbetslip.FieldXbProfit, field.TypeFloat64, value)
	}
	if wbu.mutation.XbProfitCleared() {
		_spec.ClearField(winbetslip.FieldXbProfit, field.TypeFloat64)
	}
	if value, ok := wbu.mutation.Stake(); ok {
		_spec.SetField(winbetslip.FieldStake, field.TypeFloat64, value)
	}
	if value, ok := wbu.mutation.AddedStake(); ok {
		_spec.AddField(winbetslip.FieldStake, field.TypeFloat64, value)
	}
	if value, ok := wbu.mutation.ValidStake(); ok {
		_spec.SetField(winbetslip.FieldValidStake, field.TypeFloat64, value)
	}
	if value, ok := wbu.mutation.AddedValidStake(); ok {
		_spec.AddField(winbetslip.FieldValidStake, field.TypeFloat64, value)
	}
	if value, ok := wbu.mutation.Payout(); ok {
		_spec.SetField(winbetslip.FieldPayout, field.TypeFloat64, value)
	}
	if value, ok := wbu.mutation.AddedPayout(); ok {
		_spec.AddField(winbetslip.FieldPayout, field.TypeFloat64, value)
	}
	if wbu.mutation.PayoutCleared() {
		_spec.ClearField(winbetslip.FieldPayout, field.TypeFloat64)
	}
	if value, ok := wbu.mutation.CoinRefund(); ok {
		_spec.SetField(winbetslip.FieldCoinRefund, field.TypeFloat64, value)
	}
	if value, ok := wbu.mutation.AddedCoinRefund(); ok {
		_spec.AddField(winbetslip.FieldCoinRefund, field.TypeFloat64, value)
	}
	if value, ok := wbu.mutation.CoinBefore(); ok {
		_spec.SetField(winbetslip.FieldCoinBefore, field.TypeFloat64, value)
	}
	if value, ok := wbu.mutation.AddedCoinBefore(); ok {
		_spec.AddField(winbetslip.FieldCoinBefore, field.TypeFloat64, value)
	}
	if value, ok := wbu.mutation.GameID(); ok {
		_spec.SetField(winbetslip.FieldGameID, field.TypeString, value)
	}
	if value, ok := wbu.mutation.GameName(); ok {
		_spec.SetField(winbetslip.FieldGameName, field.TypeString, value)
	}
	if wbu.mutation.GameNameCleared() {
		_spec.ClearField(winbetslip.FieldGameName, field.TypeString)
	}
	if value, ok := wbu.mutation.AmountType(); ok {
		_spec.SetField(winbetslip.FieldAmountType, field.TypeInt32, value)
	}
	if value, ok := wbu.mutation.AddedAmountType(); ok {
		_spec.AddField(winbetslip.FieldAmountType, field.TypeInt32, value)
	}
	if value, ok := wbu.mutation.GameTypeID(); ok {
		_spec.SetField(winbetslip.FieldGameTypeID, field.TypeString, value)
	}
	if value, ok := wbu.mutation.GameGroupID(); ok {
		_spec.SetField(winbetslip.FieldGameGroupID, field.TypeInt32, value)
	}
	if value, ok := wbu.mutation.AddedGameGroupID(); ok {
		_spec.AddField(winbetslip.FieldGameGroupID, field.TypeInt32, value)
	}
	if wbu.mutation.GameGroupIDCleared() {
		_spec.ClearField(winbetslip.FieldGameGroupID, field.TypeInt32)
	}
	if value, ok := wbu.mutation.SportType(); ok {
		_spec.SetField(winbetslip.FieldSportType, field.TypeString, value)
	}
	if wbu.mutation.SportTypeCleared() {
		_spec.ClearField(winbetslip.FieldSportType, field.TypeString)
	}
	if value, ok := wbu.mutation.DtStarted(); ok {
		_spec.SetField(winbetslip.FieldDtStarted, field.TypeInt, value)
	}
	if value, ok := wbu.mutation.AddedDtStarted(); ok {
		_spec.AddField(winbetslip.FieldDtStarted, field.TypeInt, value)
	}
	if value, ok := wbu.mutation.DtCompleted(); ok {
		_spec.SetField(winbetslip.FieldDtCompleted, field.TypeInt, value)
	}
	if value, ok := wbu.mutation.AddedDtCompleted(); ok {
		_spec.AddField(winbetslip.FieldDtCompleted, field.TypeInt, value)
	}
	if wbu.mutation.DtCompletedCleared() {
		_spec.ClearField(winbetslip.FieldDtCompleted, field.TypeInt)
	}
	if value, ok := wbu.mutation.WinTransactionID(); ok {
		_spec.SetField(winbetslip.FieldWinTransactionID, field.TypeString, value)
	}
	if wbu.mutation.WinTransactionIDCleared() {
		_spec.ClearField(winbetslip.FieldWinTransactionID, field.TypeString)
	}
	if value, ok := wbu.mutation.BetJSON(); ok {
		_spec.SetField(winbetslip.FieldBetJSON, field.TypeString, value)
	}
	if wbu.mutation.BetJSONCleared() {
		_spec.ClearField(winbetslip.FieldBetJSON, field.TypeString)
	}
	if value, ok := wbu.mutation.RewardJSON(); ok {
		_spec.SetField(winbetslip.FieldRewardJSON, field.TypeString, value)
	}
	if wbu.mutation.RewardJSONCleared() {
		_spec.ClearField(winbetslip.FieldRewardJSON, field.TypeString)
	}
	if value, ok := wbu.mutation.RefundJSON(); ok {
		_spec.SetField(winbetslip.FieldRefundJSON, field.TypeString, value)
	}
	if wbu.mutation.RefundJSONCleared() {
		_spec.ClearField(winbetslip.FieldRefundJSON, field.TypeString)
	}
	if value, ok := wbu.mutation.CreateTimeStr(); ok {
		_spec.SetField(winbetslip.FieldCreateTimeStr, field.TypeString, value)
	}
	if value, ok := wbu.mutation.CreatedAt(); ok {
		_spec.SetField(winbetslip.FieldCreatedAt, field.TypeInt32, value)
	}
	if value, ok := wbu.mutation.AddedCreatedAt(); ok {
		_spec.AddField(winbetslip.FieldCreatedAt, field.TypeInt32, value)
	}
	if value, ok := wbu.mutation.UpdatedAt(); ok {
		_spec.SetField(winbetslip.FieldUpdatedAt, field.TypeInt32, value)
	}
	if value, ok := wbu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(winbetslip.FieldUpdatedAt, field.TypeInt32, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wbu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{winbetslip.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wbu.mutation.done = true
	return n, nil
}

// WinBetslipUpdateOne is the builder for updating a single WinBetslip entity.
type WinBetslipUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WinBetslipMutation
}

// SetRoundID sets the "round_id" field.
func (wbuo *WinBetslipUpdateOne) SetRoundID(s string) *WinBetslipUpdateOne {
	wbuo.mutation.SetRoundID(s)
	return wbuo
}

// SetTransactionID sets the "transaction_id" field.
func (wbuo *WinBetslipUpdateOne) SetTransactionID(s string) *WinBetslipUpdateOne {
	wbuo.mutation.SetTransactionID(s)
	return wbuo
}

// SetGamePlatID sets the "game_plat_id" field.
func (wbuo *WinBetslipUpdateOne) SetGamePlatID(i int32) *WinBetslipUpdateOne {
	wbuo.mutation.ResetGamePlatID()
	wbuo.mutation.SetGamePlatID(i)
	return wbuo
}

// AddGamePlatID adds i to the "game_plat_id" field.
func (wbuo *WinBetslipUpdateOne) AddGamePlatID(i int32) *WinBetslipUpdateOne {
	wbuo.mutation.AddGamePlatID(i)
	return wbuo
}

// SetXbStatus sets the "xb_status" field.
func (wbuo *WinBetslipUpdateOne) SetXbStatus(i int8) *WinBetslipUpdateOne {
	wbuo.mutation.ResetXbStatus()
	wbuo.mutation.SetXbStatus(i)
	return wbuo
}

// AddXbStatus adds i to the "xb_status" field.
func (wbuo *WinBetslipUpdateOne) AddXbStatus(i int8) *WinBetslipUpdateOne {
	wbuo.mutation.AddXbStatus(i)
	return wbuo
}

// SetXbUID sets the "xb_uid" field.
func (wbuo *WinBetslipUpdateOne) SetXbUID(u uint32) *WinBetslipUpdateOne {
	wbuo.mutation.ResetXbUID()
	wbuo.mutation.SetXbUID(u)
	return wbuo
}

// AddXbUID adds u to the "xb_uid" field.
func (wbuo *WinBetslipUpdateOne) AddXbUID(u int32) *WinBetslipUpdateOne {
	wbuo.mutation.AddXbUID(u)
	return wbuo
}

// SetXbUsername sets the "xb_username" field.
func (wbuo *WinBetslipUpdateOne) SetXbUsername(s string) *WinBetslipUpdateOne {
	wbuo.mutation.SetXbUsername(s)
	return wbuo
}

// SetXbProfit sets the "xb_profit" field.
func (wbuo *WinBetslipUpdateOne) SetXbProfit(f float64) *WinBetslipUpdateOne {
	wbuo.mutation.ResetXbProfit()
	wbuo.mutation.SetXbProfit(f)
	return wbuo
}

// SetNillableXbProfit sets the "xb_profit" field if the given value is not nil.
func (wbuo *WinBetslipUpdateOne) SetNillableXbProfit(f *float64) *WinBetslipUpdateOne {
	if f != nil {
		wbuo.SetXbProfit(*f)
	}
	return wbuo
}

// AddXbProfit adds f to the "xb_profit" field.
func (wbuo *WinBetslipUpdateOne) AddXbProfit(f float64) *WinBetslipUpdateOne {
	wbuo.mutation.AddXbProfit(f)
	return wbuo
}

// ClearXbProfit clears the value of the "xb_profit" field.
func (wbuo *WinBetslipUpdateOne) ClearXbProfit() *WinBetslipUpdateOne {
	wbuo.mutation.ClearXbProfit()
	return wbuo
}

// SetStake sets the "stake" field.
func (wbuo *WinBetslipUpdateOne) SetStake(f float64) *WinBetslipUpdateOne {
	wbuo.mutation.ResetStake()
	wbuo.mutation.SetStake(f)
	return wbuo
}

// AddStake adds f to the "stake" field.
func (wbuo *WinBetslipUpdateOne) AddStake(f float64) *WinBetslipUpdateOne {
	wbuo.mutation.AddStake(f)
	return wbuo
}

// SetValidStake sets the "valid_stake" field.
func (wbuo *WinBetslipUpdateOne) SetValidStake(f float64) *WinBetslipUpdateOne {
	wbuo.mutation.ResetValidStake()
	wbuo.mutation.SetValidStake(f)
	return wbuo
}

// AddValidStake adds f to the "valid_stake" field.
func (wbuo *WinBetslipUpdateOne) AddValidStake(f float64) *WinBetslipUpdateOne {
	wbuo.mutation.AddValidStake(f)
	return wbuo
}

// SetPayout sets the "payout" field.
func (wbuo *WinBetslipUpdateOne) SetPayout(f float64) *WinBetslipUpdateOne {
	wbuo.mutation.ResetPayout()
	wbuo.mutation.SetPayout(f)
	return wbuo
}

// SetNillablePayout sets the "payout" field if the given value is not nil.
func (wbuo *WinBetslipUpdateOne) SetNillablePayout(f *float64) *WinBetslipUpdateOne {
	if f != nil {
		wbuo.SetPayout(*f)
	}
	return wbuo
}

// AddPayout adds f to the "payout" field.
func (wbuo *WinBetslipUpdateOne) AddPayout(f float64) *WinBetslipUpdateOne {
	wbuo.mutation.AddPayout(f)
	return wbuo
}

// ClearPayout clears the value of the "payout" field.
func (wbuo *WinBetslipUpdateOne) ClearPayout() *WinBetslipUpdateOne {
	wbuo.mutation.ClearPayout()
	return wbuo
}

// SetCoinRefund sets the "coin_refund" field.
func (wbuo *WinBetslipUpdateOne) SetCoinRefund(f float64) *WinBetslipUpdateOne {
	wbuo.mutation.ResetCoinRefund()
	wbuo.mutation.SetCoinRefund(f)
	return wbuo
}

// AddCoinRefund adds f to the "coin_refund" field.
func (wbuo *WinBetslipUpdateOne) AddCoinRefund(f float64) *WinBetslipUpdateOne {
	wbuo.mutation.AddCoinRefund(f)
	return wbuo
}

// SetCoinBefore sets the "coin_before" field.
func (wbuo *WinBetslipUpdateOne) SetCoinBefore(f float64) *WinBetslipUpdateOne {
	wbuo.mutation.ResetCoinBefore()
	wbuo.mutation.SetCoinBefore(f)
	return wbuo
}

// AddCoinBefore adds f to the "coin_before" field.
func (wbuo *WinBetslipUpdateOne) AddCoinBefore(f float64) *WinBetslipUpdateOne {
	wbuo.mutation.AddCoinBefore(f)
	return wbuo
}

// SetGameID sets the "game_id" field.
func (wbuo *WinBetslipUpdateOne) SetGameID(s string) *WinBetslipUpdateOne {
	wbuo.mutation.SetGameID(s)
	return wbuo
}

// SetGameName sets the "game_name" field.
func (wbuo *WinBetslipUpdateOne) SetGameName(s string) *WinBetslipUpdateOne {
	wbuo.mutation.SetGameName(s)
	return wbuo
}

// SetNillableGameName sets the "game_name" field if the given value is not nil.
func (wbuo *WinBetslipUpdateOne) SetNillableGameName(s *string) *WinBetslipUpdateOne {
	if s != nil {
		wbuo.SetGameName(*s)
	}
	return wbuo
}

// ClearGameName clears the value of the "game_name" field.
func (wbuo *WinBetslipUpdateOne) ClearGameName() *WinBetslipUpdateOne {
	wbuo.mutation.ClearGameName()
	return wbuo
}

// SetAmountType sets the "amount_type" field.
func (wbuo *WinBetslipUpdateOne) SetAmountType(i int32) *WinBetslipUpdateOne {
	wbuo.mutation.ResetAmountType()
	wbuo.mutation.SetAmountType(i)
	return wbuo
}

// AddAmountType adds i to the "amount_type" field.
func (wbuo *WinBetslipUpdateOne) AddAmountType(i int32) *WinBetslipUpdateOne {
	wbuo.mutation.AddAmountType(i)
	return wbuo
}

// SetGameTypeID sets the "game_type_id" field.
func (wbuo *WinBetslipUpdateOne) SetGameTypeID(s string) *WinBetslipUpdateOne {
	wbuo.mutation.SetGameTypeID(s)
	return wbuo
}

// SetGameGroupID sets the "game_group_id" field.
func (wbuo *WinBetslipUpdateOne) SetGameGroupID(i int32) *WinBetslipUpdateOne {
	wbuo.mutation.ResetGameGroupID()
	wbuo.mutation.SetGameGroupID(i)
	return wbuo
}

// SetNillableGameGroupID sets the "game_group_id" field if the given value is not nil.
func (wbuo *WinBetslipUpdateOne) SetNillableGameGroupID(i *int32) *WinBetslipUpdateOne {
	if i != nil {
		wbuo.SetGameGroupID(*i)
	}
	return wbuo
}

// AddGameGroupID adds i to the "game_group_id" field.
func (wbuo *WinBetslipUpdateOne) AddGameGroupID(i int32) *WinBetslipUpdateOne {
	wbuo.mutation.AddGameGroupID(i)
	return wbuo
}

// ClearGameGroupID clears the value of the "game_group_id" field.
func (wbuo *WinBetslipUpdateOne) ClearGameGroupID() *WinBetslipUpdateOne {
	wbuo.mutation.ClearGameGroupID()
	return wbuo
}

// SetSportType sets the "sport_type" field.
func (wbuo *WinBetslipUpdateOne) SetSportType(s string) *WinBetslipUpdateOne {
	wbuo.mutation.SetSportType(s)
	return wbuo
}

// SetNillableSportType sets the "sport_type" field if the given value is not nil.
func (wbuo *WinBetslipUpdateOne) SetNillableSportType(s *string) *WinBetslipUpdateOne {
	if s != nil {
		wbuo.SetSportType(*s)
	}
	return wbuo
}

// ClearSportType clears the value of the "sport_type" field.
func (wbuo *WinBetslipUpdateOne) ClearSportType() *WinBetslipUpdateOne {
	wbuo.mutation.ClearSportType()
	return wbuo
}

// SetDtStarted sets the "dt_started" field.
func (wbuo *WinBetslipUpdateOne) SetDtStarted(i int) *WinBetslipUpdateOne {
	wbuo.mutation.ResetDtStarted()
	wbuo.mutation.SetDtStarted(i)
	return wbuo
}

// AddDtStarted adds i to the "dt_started" field.
func (wbuo *WinBetslipUpdateOne) AddDtStarted(i int) *WinBetslipUpdateOne {
	wbuo.mutation.AddDtStarted(i)
	return wbuo
}

// SetDtCompleted sets the "dt_completed" field.
func (wbuo *WinBetslipUpdateOne) SetDtCompleted(i int) *WinBetslipUpdateOne {
	wbuo.mutation.ResetDtCompleted()
	wbuo.mutation.SetDtCompleted(i)
	return wbuo
}

// SetNillableDtCompleted sets the "dt_completed" field if the given value is not nil.
func (wbuo *WinBetslipUpdateOne) SetNillableDtCompleted(i *int) *WinBetslipUpdateOne {
	if i != nil {
		wbuo.SetDtCompleted(*i)
	}
	return wbuo
}

// AddDtCompleted adds i to the "dt_completed" field.
func (wbuo *WinBetslipUpdateOne) AddDtCompleted(i int) *WinBetslipUpdateOne {
	wbuo.mutation.AddDtCompleted(i)
	return wbuo
}

// ClearDtCompleted clears the value of the "dt_completed" field.
func (wbuo *WinBetslipUpdateOne) ClearDtCompleted() *WinBetslipUpdateOne {
	wbuo.mutation.ClearDtCompleted()
	return wbuo
}

// SetWinTransactionID sets the "win_transaction_id" field.
func (wbuo *WinBetslipUpdateOne) SetWinTransactionID(s string) *WinBetslipUpdateOne {
	wbuo.mutation.SetWinTransactionID(s)
	return wbuo
}

// SetNillableWinTransactionID sets the "win_transaction_id" field if the given value is not nil.
func (wbuo *WinBetslipUpdateOne) SetNillableWinTransactionID(s *string) *WinBetslipUpdateOne {
	if s != nil {
		wbuo.SetWinTransactionID(*s)
	}
	return wbuo
}

// ClearWinTransactionID clears the value of the "win_transaction_id" field.
func (wbuo *WinBetslipUpdateOne) ClearWinTransactionID() *WinBetslipUpdateOne {
	wbuo.mutation.ClearWinTransactionID()
	return wbuo
}

// SetBetJSON sets the "bet_json" field.
func (wbuo *WinBetslipUpdateOne) SetBetJSON(s string) *WinBetslipUpdateOne {
	wbuo.mutation.SetBetJSON(s)
	return wbuo
}

// SetNillableBetJSON sets the "bet_json" field if the given value is not nil.
func (wbuo *WinBetslipUpdateOne) SetNillableBetJSON(s *string) *WinBetslipUpdateOne {
	if s != nil {
		wbuo.SetBetJSON(*s)
	}
	return wbuo
}

// ClearBetJSON clears the value of the "bet_json" field.
func (wbuo *WinBetslipUpdateOne) ClearBetJSON() *WinBetslipUpdateOne {
	wbuo.mutation.ClearBetJSON()
	return wbuo
}

// SetRewardJSON sets the "reward_json" field.
func (wbuo *WinBetslipUpdateOne) SetRewardJSON(s string) *WinBetslipUpdateOne {
	wbuo.mutation.SetRewardJSON(s)
	return wbuo
}

// SetNillableRewardJSON sets the "reward_json" field if the given value is not nil.
func (wbuo *WinBetslipUpdateOne) SetNillableRewardJSON(s *string) *WinBetslipUpdateOne {
	if s != nil {
		wbuo.SetRewardJSON(*s)
	}
	return wbuo
}

// ClearRewardJSON clears the value of the "reward_json" field.
func (wbuo *WinBetslipUpdateOne) ClearRewardJSON() *WinBetslipUpdateOne {
	wbuo.mutation.ClearRewardJSON()
	return wbuo
}

// SetRefundJSON sets the "refund_json" field.
func (wbuo *WinBetslipUpdateOne) SetRefundJSON(s string) *WinBetslipUpdateOne {
	wbuo.mutation.SetRefundJSON(s)
	return wbuo
}

// SetNillableRefundJSON sets the "refund_json" field if the given value is not nil.
func (wbuo *WinBetslipUpdateOne) SetNillableRefundJSON(s *string) *WinBetslipUpdateOne {
	if s != nil {
		wbuo.SetRefundJSON(*s)
	}
	return wbuo
}

// ClearRefundJSON clears the value of the "refund_json" field.
func (wbuo *WinBetslipUpdateOne) ClearRefundJSON() *WinBetslipUpdateOne {
	wbuo.mutation.ClearRefundJSON()
	return wbuo
}

// SetCreateTimeStr sets the "create_time_str" field.
func (wbuo *WinBetslipUpdateOne) SetCreateTimeStr(s string) *WinBetslipUpdateOne {
	wbuo.mutation.SetCreateTimeStr(s)
	return wbuo
}

// SetCreatedAt sets the "created_at" field.
func (wbuo *WinBetslipUpdateOne) SetCreatedAt(i int32) *WinBetslipUpdateOne {
	wbuo.mutation.ResetCreatedAt()
	wbuo.mutation.SetCreatedAt(i)
	return wbuo
}

// AddCreatedAt adds i to the "created_at" field.
func (wbuo *WinBetslipUpdateOne) AddCreatedAt(i int32) *WinBetslipUpdateOne {
	wbuo.mutation.AddCreatedAt(i)
	return wbuo
}

// SetUpdatedAt sets the "updated_at" field.
func (wbuo *WinBetslipUpdateOne) SetUpdatedAt(i int32) *WinBetslipUpdateOne {
	wbuo.mutation.ResetUpdatedAt()
	wbuo.mutation.SetUpdatedAt(i)
	return wbuo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (wbuo *WinBetslipUpdateOne) AddUpdatedAt(i int32) *WinBetslipUpdateOne {
	wbuo.mutation.AddUpdatedAt(i)
	return wbuo
}

// Mutation returns the WinBetslipMutation object of the builder.
func (wbuo *WinBetslipUpdateOne) Mutation() *WinBetslipMutation {
	return wbuo.mutation
}

// Where appends a list predicates to the WinBetslipUpdate builder.
func (wbuo *WinBetslipUpdateOne) Where(ps ...predicate.WinBetslip) *WinBetslipUpdateOne {
	wbuo.mutation.Where(ps...)
	return wbuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wbuo *WinBetslipUpdateOne) Select(field string, fields ...string) *WinBetslipUpdateOne {
	wbuo.fields = append([]string{field}, fields...)
	return wbuo
}

// Save executes the query and returns the updated WinBetslip entity.
func (wbuo *WinBetslipUpdateOne) Save(ctx context.Context) (*WinBetslip, error) {
	return withHooks(ctx, wbuo.sqlSave, wbuo.mutation, wbuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wbuo *WinBetslipUpdateOne) SaveX(ctx context.Context) *WinBetslip {
	node, err := wbuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wbuo *WinBetslipUpdateOne) Exec(ctx context.Context) error {
	_, err := wbuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wbuo *WinBetslipUpdateOne) ExecX(ctx context.Context) {
	if err := wbuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wbuo *WinBetslipUpdateOne) sqlSave(ctx context.Context) (_node *WinBetslip, err error) {
	_spec := sqlgraph.NewUpdateSpec(winbetslip.Table, winbetslip.Columns, sqlgraph.NewFieldSpec(winbetslip.FieldID, field.TypeInt))
	id, ok := wbuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WinBetslip.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wbuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, winbetslip.FieldID)
		for _, f := range fields {
			if !winbetslip.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != winbetslip.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wbuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wbuo.mutation.RoundID(); ok {
		_spec.SetField(winbetslip.FieldRoundID, field.TypeString, value)
	}
	if value, ok := wbuo.mutation.TransactionID(); ok {
		_spec.SetField(winbetslip.FieldTransactionID, field.TypeString, value)
	}
	if value, ok := wbuo.mutation.GamePlatID(); ok {
		_spec.SetField(winbetslip.FieldGamePlatID, field.TypeInt32, value)
	}
	if value, ok := wbuo.mutation.AddedGamePlatID(); ok {
		_spec.AddField(winbetslip.FieldGamePlatID, field.TypeInt32, value)
	}
	if value, ok := wbuo.mutation.XbStatus(); ok {
		_spec.SetField(winbetslip.FieldXbStatus, field.TypeInt8, value)
	}
	if value, ok := wbuo.mutation.AddedXbStatus(); ok {
		_spec.AddField(winbetslip.FieldXbStatus, field.TypeInt8, value)
	}
	if value, ok := wbuo.mutation.XbUID(); ok {
		_spec.SetField(winbetslip.FieldXbUID, field.TypeUint32, value)
	}
	if value, ok := wbuo.mutation.AddedXbUID(); ok {
		_spec.AddField(winbetslip.FieldXbUID, field.TypeUint32, value)
	}
	if value, ok := wbuo.mutation.XbUsername(); ok {
		_spec.SetField(winbetslip.FieldXbUsername, field.TypeString, value)
	}
	if value, ok := wbuo.mutation.XbProfit(); ok {
		_spec.SetField(winbetslip.FieldXbProfit, field.TypeFloat64, value)
	}
	if value, ok := wbuo.mutation.AddedXbProfit(); ok {
		_spec.AddField(winbetslip.FieldXbProfit, field.TypeFloat64, value)
	}
	if wbuo.mutation.XbProfitCleared() {
		_spec.ClearField(winbetslip.FieldXbProfit, field.TypeFloat64)
	}
	if value, ok := wbuo.mutation.Stake(); ok {
		_spec.SetField(winbetslip.FieldStake, field.TypeFloat64, value)
	}
	if value, ok := wbuo.mutation.AddedStake(); ok {
		_spec.AddField(winbetslip.FieldStake, field.TypeFloat64, value)
	}
	if value, ok := wbuo.mutation.ValidStake(); ok {
		_spec.SetField(winbetslip.FieldValidStake, field.TypeFloat64, value)
	}
	if value, ok := wbuo.mutation.AddedValidStake(); ok {
		_spec.AddField(winbetslip.FieldValidStake, field.TypeFloat64, value)
	}
	if value, ok := wbuo.mutation.Payout(); ok {
		_spec.SetField(winbetslip.FieldPayout, field.TypeFloat64, value)
	}
	if value, ok := wbuo.mutation.AddedPayout(); ok {
		_spec.AddField(winbetslip.FieldPayout, field.TypeFloat64, value)
	}
	if wbuo.mutation.PayoutCleared() {
		_spec.ClearField(winbetslip.FieldPayout, field.TypeFloat64)
	}
	if value, ok := wbuo.mutation.CoinRefund(); ok {
		_spec.SetField(winbetslip.FieldCoinRefund, field.TypeFloat64, value)
	}
	if value, ok := wbuo.mutation.AddedCoinRefund(); ok {
		_spec.AddField(winbetslip.FieldCoinRefund, field.TypeFloat64, value)
	}
	if value, ok := wbuo.mutation.CoinBefore(); ok {
		_spec.SetField(winbetslip.FieldCoinBefore, field.TypeFloat64, value)
	}
	if value, ok := wbuo.mutation.AddedCoinBefore(); ok {
		_spec.AddField(winbetslip.FieldCoinBefore, field.TypeFloat64, value)
	}
	if value, ok := wbuo.mutation.GameID(); ok {
		_spec.SetField(winbetslip.FieldGameID, field.TypeString, value)
	}
	if value, ok := wbuo.mutation.GameName(); ok {
		_spec.SetField(winbetslip.FieldGameName, field.TypeString, value)
	}
	if wbuo.mutation.GameNameCleared() {
		_spec.ClearField(winbetslip.FieldGameName, field.TypeString)
	}
	if value, ok := wbuo.mutation.AmountType(); ok {
		_spec.SetField(winbetslip.FieldAmountType, field.TypeInt32, value)
	}
	if value, ok := wbuo.mutation.AddedAmountType(); ok {
		_spec.AddField(winbetslip.FieldAmountType, field.TypeInt32, value)
	}
	if value, ok := wbuo.mutation.GameTypeID(); ok {
		_spec.SetField(winbetslip.FieldGameTypeID, field.TypeString, value)
	}
	if value, ok := wbuo.mutation.GameGroupID(); ok {
		_spec.SetField(winbetslip.FieldGameGroupID, field.TypeInt32, value)
	}
	if value, ok := wbuo.mutation.AddedGameGroupID(); ok {
		_spec.AddField(winbetslip.FieldGameGroupID, field.TypeInt32, value)
	}
	if wbuo.mutation.GameGroupIDCleared() {
		_spec.ClearField(winbetslip.FieldGameGroupID, field.TypeInt32)
	}
	if value, ok := wbuo.mutation.SportType(); ok {
		_spec.SetField(winbetslip.FieldSportType, field.TypeString, value)
	}
	if wbuo.mutation.SportTypeCleared() {
		_spec.ClearField(winbetslip.FieldSportType, field.TypeString)
	}
	if value, ok := wbuo.mutation.DtStarted(); ok {
		_spec.SetField(winbetslip.FieldDtStarted, field.TypeInt, value)
	}
	if value, ok := wbuo.mutation.AddedDtStarted(); ok {
		_spec.AddField(winbetslip.FieldDtStarted, field.TypeInt, value)
	}
	if value, ok := wbuo.mutation.DtCompleted(); ok {
		_spec.SetField(winbetslip.FieldDtCompleted, field.TypeInt, value)
	}
	if value, ok := wbuo.mutation.AddedDtCompleted(); ok {
		_spec.AddField(winbetslip.FieldDtCompleted, field.TypeInt, value)
	}
	if wbuo.mutation.DtCompletedCleared() {
		_spec.ClearField(winbetslip.FieldDtCompleted, field.TypeInt)
	}
	if value, ok := wbuo.mutation.WinTransactionID(); ok {
		_spec.SetField(winbetslip.FieldWinTransactionID, field.TypeString, value)
	}
	if wbuo.mutation.WinTransactionIDCleared() {
		_spec.ClearField(winbetslip.FieldWinTransactionID, field.TypeString)
	}
	if value, ok := wbuo.mutation.BetJSON(); ok {
		_spec.SetField(winbetslip.FieldBetJSON, field.TypeString, value)
	}
	if wbuo.mutation.BetJSONCleared() {
		_spec.ClearField(winbetslip.FieldBetJSON, field.TypeString)
	}
	if value, ok := wbuo.mutation.RewardJSON(); ok {
		_spec.SetField(winbetslip.FieldRewardJSON, field.TypeString, value)
	}
	if wbuo.mutation.RewardJSONCleared() {
		_spec.ClearField(winbetslip.FieldRewardJSON, field.TypeString)
	}
	if value, ok := wbuo.mutation.RefundJSON(); ok {
		_spec.SetField(winbetslip.FieldRefundJSON, field.TypeString, value)
	}
	if wbuo.mutation.RefundJSONCleared() {
		_spec.ClearField(winbetslip.FieldRefundJSON, field.TypeString)
	}
	if value, ok := wbuo.mutation.CreateTimeStr(); ok {
		_spec.SetField(winbetslip.FieldCreateTimeStr, field.TypeString, value)
	}
	if value, ok := wbuo.mutation.CreatedAt(); ok {
		_spec.SetField(winbetslip.FieldCreatedAt, field.TypeInt32, value)
	}
	if value, ok := wbuo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(winbetslip.FieldCreatedAt, field.TypeInt32, value)
	}
	if value, ok := wbuo.mutation.UpdatedAt(); ok {
		_spec.SetField(winbetslip.FieldUpdatedAt, field.TypeInt32, value)
	}
	if value, ok := wbuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(winbetslip.FieldUpdatedAt, field.TypeInt32, value)
	}
	_node = &WinBetslip{config: wbuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wbuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{winbetslip.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wbuo.mutation.done = true
	return _node, nil
}
