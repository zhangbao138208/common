// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.skig.tech/zero-core/common/ent/predicate"
	"gitlab.skig.tech/zero-core/common/ent/wincoinlog"
)

// WinCoinLogUpdate is the builder for updating WinCoinLog entities.
type WinCoinLogUpdate struct {
	config
	hooks    []Hook
	mutation *WinCoinLogMutation
}

// Where appends a list predicates to the WinCoinLogUpdate builder.
func (wclu *WinCoinLogUpdate) Where(ps ...predicate.WinCoinLog) *WinCoinLogUpdate {
	wclu.mutation.Where(ps...)
	return wclu
}

// SetUID sets the "uid" field.
func (wclu *WinCoinLogUpdate) SetUID(i int32) *WinCoinLogUpdate {
	wclu.mutation.ResetUID()
	wclu.mutation.SetUID(i)
	return wclu
}

// AddUID adds i to the "uid" field.
func (wclu *WinCoinLogUpdate) AddUID(i int32) *WinCoinLogUpdate {
	wclu.mutation.AddUID(i)
	return wclu
}

// SetUsername sets the "username" field.
func (wclu *WinCoinLogUpdate) SetUsername(s string) *WinCoinLogUpdate {
	wclu.mutation.SetUsername(s)
	return wclu
}

// SetCategory sets the "category" field.
func (wclu *WinCoinLogUpdate) SetCategory(i int8) *WinCoinLogUpdate {
	wclu.mutation.ResetCategory()
	wclu.mutation.SetCategory(i)
	return wclu
}

// AddCategory adds i to the "category" field.
func (wclu *WinCoinLogUpdate) AddCategory(i int8) *WinCoinLogUpdate {
	wclu.mutation.AddCategory(i)
	return wclu
}

// SetReferID sets the "refer_id" field.
func (wclu *WinCoinLogUpdate) SetReferID(i int) *WinCoinLogUpdate {
	wclu.mutation.ResetReferID()
	wclu.mutation.SetReferID(i)
	return wclu
}

// SetNillableReferID sets the "refer_id" field if the given value is not nil.
func (wclu *WinCoinLogUpdate) SetNillableReferID(i *int) *WinCoinLogUpdate {
	if i != nil {
		wclu.SetReferID(*i)
	}
	return wclu
}

// AddReferID adds i to the "refer_id" field.
func (wclu *WinCoinLogUpdate) AddReferID(i int) *WinCoinLogUpdate {
	wclu.mutation.AddReferID(i)
	return wclu
}

// ClearReferID clears the value of the "refer_id" field.
func (wclu *WinCoinLogUpdate) ClearReferID() *WinCoinLogUpdate {
	wclu.mutation.ClearReferID()
	return wclu
}

// SetCoin sets the "coin" field.
func (wclu *WinCoinLogUpdate) SetCoin(f float64) *WinCoinLogUpdate {
	wclu.mutation.ResetCoin()
	wclu.mutation.SetCoin(f)
	return wclu
}

// AddCoin adds f to the "coin" field.
func (wclu *WinCoinLogUpdate) AddCoin(f float64) *WinCoinLogUpdate {
	wclu.mutation.AddCoin(f)
	return wclu
}

// SetCoinReal sets the "coin_real" field.
func (wclu *WinCoinLogUpdate) SetCoinReal(f float64) *WinCoinLogUpdate {
	wclu.mutation.ResetCoinReal()
	wclu.mutation.SetCoinReal(f)
	return wclu
}

// AddCoinReal adds f to the "coin_real" field.
func (wclu *WinCoinLogUpdate) AddCoinReal(f float64) *WinCoinLogUpdate {
	wclu.mutation.AddCoinReal(f)
	return wclu
}

// SetPlatID sets the "plat_id" field.
func (wclu *WinCoinLogUpdate) SetPlatID(i int32) *WinCoinLogUpdate {
	wclu.mutation.ResetPlatID()
	wclu.mutation.SetPlatID(i)
	return wclu
}

// AddPlatID adds i to the "plat_id" field.
func (wclu *WinCoinLogUpdate) AddPlatID(i int32) *WinCoinLogUpdate {
	wclu.mutation.AddPlatID(i)
	return wclu
}

// SetOutIn sets the "out_in" field.
func (wclu *WinCoinLogUpdate) SetOutIn(i int8) *WinCoinLogUpdate {
	wclu.mutation.ResetOutIn()
	wclu.mutation.SetOutIn(i)
	return wclu
}

// AddOutIn adds i to the "out_in" field.
func (wclu *WinCoinLogUpdate) AddOutIn(i int8) *WinCoinLogUpdate {
	wclu.mutation.AddOutIn(i)
	return wclu
}

// SetGameID sets the "game_id" field.
func (wclu *WinCoinLogUpdate) SetGameID(i int32) *WinCoinLogUpdate {
	wclu.mutation.ResetGameID()
	wclu.mutation.SetGameID(i)
	return wclu
}

// AddGameID adds i to the "game_id" field.
func (wclu *WinCoinLogUpdate) AddGameID(i int32) *WinCoinLogUpdate {
	wclu.mutation.AddGameID(i)
	return wclu
}

// SetCoinBefore sets the "coin_before" field.
func (wclu *WinCoinLogUpdate) SetCoinBefore(f float64) *WinCoinLogUpdate {
	wclu.mutation.ResetCoinBefore()
	wclu.mutation.SetCoinBefore(f)
	return wclu
}

// AddCoinBefore adds f to the "coin_before" field.
func (wclu *WinCoinLogUpdate) AddCoinBefore(f float64) *WinCoinLogUpdate {
	wclu.mutation.AddCoinBefore(f)
	return wclu
}

// SetCoinAfter sets the "coin_after" field.
func (wclu *WinCoinLogUpdate) SetCoinAfter(f float64) *WinCoinLogUpdate {
	wclu.mutation.ResetCoinAfter()
	wclu.mutation.SetCoinAfter(f)
	return wclu
}

// AddCoinAfter adds f to the "coin_after" field.
func (wclu *WinCoinLogUpdate) AddCoinAfter(f float64) *WinCoinLogUpdate {
	wclu.mutation.AddCoinAfter(f)
	return wclu
}

// SetStatus sets the "status" field.
func (wclu *WinCoinLogUpdate) SetStatus(i int8) *WinCoinLogUpdate {
	wclu.mutation.ResetStatus()
	wclu.mutation.SetStatus(i)
	return wclu
}

// AddStatus adds i to the "status" field.
func (wclu *WinCoinLogUpdate) AddStatus(i int8) *WinCoinLogUpdate {
	wclu.mutation.AddStatus(i)
	return wclu
}

// SetCreatedAt sets the "created_at" field.
func (wclu *WinCoinLogUpdate) SetCreatedAt(i int32) *WinCoinLogUpdate {
	wclu.mutation.ResetCreatedAt()
	wclu.mutation.SetCreatedAt(i)
	return wclu
}

// AddCreatedAt adds i to the "created_at" field.
func (wclu *WinCoinLogUpdate) AddCreatedAt(i int32) *WinCoinLogUpdate {
	wclu.mutation.AddCreatedAt(i)
	return wclu
}

// SetUpdatedAt sets the "updated_at" field.
func (wclu *WinCoinLogUpdate) SetUpdatedAt(i int32) *WinCoinLogUpdate {
	wclu.mutation.ResetUpdatedAt()
	wclu.mutation.SetUpdatedAt(i)
	return wclu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (wclu *WinCoinLogUpdate) AddUpdatedAt(i int32) *WinCoinLogUpdate {
	wclu.mutation.AddUpdatedAt(i)
	return wclu
}

// Mutation returns the WinCoinLogMutation object of the builder.
func (wclu *WinCoinLogUpdate) Mutation() *WinCoinLogMutation {
	return wclu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wclu *WinCoinLogUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, wclu.sqlSave, wclu.mutation, wclu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wclu *WinCoinLogUpdate) SaveX(ctx context.Context) int {
	affected, err := wclu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wclu *WinCoinLogUpdate) Exec(ctx context.Context) error {
	_, err := wclu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wclu *WinCoinLogUpdate) ExecX(ctx context.Context) {
	if err := wclu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wclu *WinCoinLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(wincoinlog.Table, wincoinlog.Columns, sqlgraph.NewFieldSpec(wincoinlog.FieldID, field.TypeInt))
	if ps := wclu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wclu.mutation.UID(); ok {
		_spec.SetField(wincoinlog.FieldUID, field.TypeInt32, value)
	}
	if value, ok := wclu.mutation.AddedUID(); ok {
		_spec.AddField(wincoinlog.FieldUID, field.TypeInt32, value)
	}
	if value, ok := wclu.mutation.Username(); ok {
		_spec.SetField(wincoinlog.FieldUsername, field.TypeString, value)
	}
	if value, ok := wclu.mutation.Category(); ok {
		_spec.SetField(wincoinlog.FieldCategory, field.TypeInt8, value)
	}
	if value, ok := wclu.mutation.AddedCategory(); ok {
		_spec.AddField(wincoinlog.FieldCategory, field.TypeInt8, value)
	}
	if value, ok := wclu.mutation.ReferID(); ok {
		_spec.SetField(wincoinlog.FieldReferID, field.TypeInt, value)
	}
	if value, ok := wclu.mutation.AddedReferID(); ok {
		_spec.AddField(wincoinlog.FieldReferID, field.TypeInt, value)
	}
	if wclu.mutation.ReferIDCleared() {
		_spec.ClearField(wincoinlog.FieldReferID, field.TypeInt)
	}
	if value, ok := wclu.mutation.Coin(); ok {
		_spec.SetField(wincoinlog.FieldCoin, field.TypeFloat64, value)
	}
	if value, ok := wclu.mutation.AddedCoin(); ok {
		_spec.AddField(wincoinlog.FieldCoin, field.TypeFloat64, value)
	}
	if value, ok := wclu.mutation.CoinReal(); ok {
		_spec.SetField(wincoinlog.FieldCoinReal, field.TypeFloat64, value)
	}
	if value, ok := wclu.mutation.AddedCoinReal(); ok {
		_spec.AddField(wincoinlog.FieldCoinReal, field.TypeFloat64, value)
	}
	if value, ok := wclu.mutation.PlatID(); ok {
		_spec.SetField(wincoinlog.FieldPlatID, field.TypeInt32, value)
	}
	if value, ok := wclu.mutation.AddedPlatID(); ok {
		_spec.AddField(wincoinlog.FieldPlatID, field.TypeInt32, value)
	}
	if value, ok := wclu.mutation.OutIn(); ok {
		_spec.SetField(wincoinlog.FieldOutIn, field.TypeInt8, value)
	}
	if value, ok := wclu.mutation.AddedOutIn(); ok {
		_spec.AddField(wincoinlog.FieldOutIn, field.TypeInt8, value)
	}
	if value, ok := wclu.mutation.GameID(); ok {
		_spec.SetField(wincoinlog.FieldGameID, field.TypeInt32, value)
	}
	if value, ok := wclu.mutation.AddedGameID(); ok {
		_spec.AddField(wincoinlog.FieldGameID, field.TypeInt32, value)
	}
	if value, ok := wclu.mutation.CoinBefore(); ok {
		_spec.SetField(wincoinlog.FieldCoinBefore, field.TypeFloat64, value)
	}
	if value, ok := wclu.mutation.AddedCoinBefore(); ok {
		_spec.AddField(wincoinlog.FieldCoinBefore, field.TypeFloat64, value)
	}
	if value, ok := wclu.mutation.CoinAfter(); ok {
		_spec.SetField(wincoinlog.FieldCoinAfter, field.TypeFloat64, value)
	}
	if value, ok := wclu.mutation.AddedCoinAfter(); ok {
		_spec.AddField(wincoinlog.FieldCoinAfter, field.TypeFloat64, value)
	}
	if value, ok := wclu.mutation.Status(); ok {
		_spec.SetField(wincoinlog.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := wclu.mutation.AddedStatus(); ok {
		_spec.AddField(wincoinlog.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := wclu.mutation.CreatedAt(); ok {
		_spec.SetField(wincoinlog.FieldCreatedAt, field.TypeInt32, value)
	}
	if value, ok := wclu.mutation.AddedCreatedAt(); ok {
		_spec.AddField(wincoinlog.FieldCreatedAt, field.TypeInt32, value)
	}
	if value, ok := wclu.mutation.UpdatedAt(); ok {
		_spec.SetField(wincoinlog.FieldUpdatedAt, field.TypeInt32, value)
	}
	if value, ok := wclu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(wincoinlog.FieldUpdatedAt, field.TypeInt32, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wclu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{wincoinlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wclu.mutation.done = true
	return n, nil
}

// WinCoinLogUpdateOne is the builder for updating a single WinCoinLog entity.
type WinCoinLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WinCoinLogMutation
}

// SetUID sets the "uid" field.
func (wcluo *WinCoinLogUpdateOne) SetUID(i int32) *WinCoinLogUpdateOne {
	wcluo.mutation.ResetUID()
	wcluo.mutation.SetUID(i)
	return wcluo
}

// AddUID adds i to the "uid" field.
func (wcluo *WinCoinLogUpdateOne) AddUID(i int32) *WinCoinLogUpdateOne {
	wcluo.mutation.AddUID(i)
	return wcluo
}

// SetUsername sets the "username" field.
func (wcluo *WinCoinLogUpdateOne) SetUsername(s string) *WinCoinLogUpdateOne {
	wcluo.mutation.SetUsername(s)
	return wcluo
}

// SetCategory sets the "category" field.
func (wcluo *WinCoinLogUpdateOne) SetCategory(i int8) *WinCoinLogUpdateOne {
	wcluo.mutation.ResetCategory()
	wcluo.mutation.SetCategory(i)
	return wcluo
}

// AddCategory adds i to the "category" field.
func (wcluo *WinCoinLogUpdateOne) AddCategory(i int8) *WinCoinLogUpdateOne {
	wcluo.mutation.AddCategory(i)
	return wcluo
}

// SetReferID sets the "refer_id" field.
func (wcluo *WinCoinLogUpdateOne) SetReferID(i int) *WinCoinLogUpdateOne {
	wcluo.mutation.ResetReferID()
	wcluo.mutation.SetReferID(i)
	return wcluo
}

// SetNillableReferID sets the "refer_id" field if the given value is not nil.
func (wcluo *WinCoinLogUpdateOne) SetNillableReferID(i *int) *WinCoinLogUpdateOne {
	if i != nil {
		wcluo.SetReferID(*i)
	}
	return wcluo
}

// AddReferID adds i to the "refer_id" field.
func (wcluo *WinCoinLogUpdateOne) AddReferID(i int) *WinCoinLogUpdateOne {
	wcluo.mutation.AddReferID(i)
	return wcluo
}

// ClearReferID clears the value of the "refer_id" field.
func (wcluo *WinCoinLogUpdateOne) ClearReferID() *WinCoinLogUpdateOne {
	wcluo.mutation.ClearReferID()
	return wcluo
}

// SetCoin sets the "coin" field.
func (wcluo *WinCoinLogUpdateOne) SetCoin(f float64) *WinCoinLogUpdateOne {
	wcluo.mutation.ResetCoin()
	wcluo.mutation.SetCoin(f)
	return wcluo
}

// AddCoin adds f to the "coin" field.
func (wcluo *WinCoinLogUpdateOne) AddCoin(f float64) *WinCoinLogUpdateOne {
	wcluo.mutation.AddCoin(f)
	return wcluo
}

// SetCoinReal sets the "coin_real" field.
func (wcluo *WinCoinLogUpdateOne) SetCoinReal(f float64) *WinCoinLogUpdateOne {
	wcluo.mutation.ResetCoinReal()
	wcluo.mutation.SetCoinReal(f)
	return wcluo
}

// AddCoinReal adds f to the "coin_real" field.
func (wcluo *WinCoinLogUpdateOne) AddCoinReal(f float64) *WinCoinLogUpdateOne {
	wcluo.mutation.AddCoinReal(f)
	return wcluo
}

// SetPlatID sets the "plat_id" field.
func (wcluo *WinCoinLogUpdateOne) SetPlatID(i int32) *WinCoinLogUpdateOne {
	wcluo.mutation.ResetPlatID()
	wcluo.mutation.SetPlatID(i)
	return wcluo
}

// AddPlatID adds i to the "plat_id" field.
func (wcluo *WinCoinLogUpdateOne) AddPlatID(i int32) *WinCoinLogUpdateOne {
	wcluo.mutation.AddPlatID(i)
	return wcluo
}

// SetOutIn sets the "out_in" field.
func (wcluo *WinCoinLogUpdateOne) SetOutIn(i int8) *WinCoinLogUpdateOne {
	wcluo.mutation.ResetOutIn()
	wcluo.mutation.SetOutIn(i)
	return wcluo
}

// AddOutIn adds i to the "out_in" field.
func (wcluo *WinCoinLogUpdateOne) AddOutIn(i int8) *WinCoinLogUpdateOne {
	wcluo.mutation.AddOutIn(i)
	return wcluo
}

// SetGameID sets the "game_id" field.
func (wcluo *WinCoinLogUpdateOne) SetGameID(i int32) *WinCoinLogUpdateOne {
	wcluo.mutation.ResetGameID()
	wcluo.mutation.SetGameID(i)
	return wcluo
}

// AddGameID adds i to the "game_id" field.
func (wcluo *WinCoinLogUpdateOne) AddGameID(i int32) *WinCoinLogUpdateOne {
	wcluo.mutation.AddGameID(i)
	return wcluo
}

// SetCoinBefore sets the "coin_before" field.
func (wcluo *WinCoinLogUpdateOne) SetCoinBefore(f float64) *WinCoinLogUpdateOne {
	wcluo.mutation.ResetCoinBefore()
	wcluo.mutation.SetCoinBefore(f)
	return wcluo
}

// AddCoinBefore adds f to the "coin_before" field.
func (wcluo *WinCoinLogUpdateOne) AddCoinBefore(f float64) *WinCoinLogUpdateOne {
	wcluo.mutation.AddCoinBefore(f)
	return wcluo
}

// SetCoinAfter sets the "coin_after" field.
func (wcluo *WinCoinLogUpdateOne) SetCoinAfter(f float64) *WinCoinLogUpdateOne {
	wcluo.mutation.ResetCoinAfter()
	wcluo.mutation.SetCoinAfter(f)
	return wcluo
}

// AddCoinAfter adds f to the "coin_after" field.
func (wcluo *WinCoinLogUpdateOne) AddCoinAfter(f float64) *WinCoinLogUpdateOne {
	wcluo.mutation.AddCoinAfter(f)
	return wcluo
}

// SetStatus sets the "status" field.
func (wcluo *WinCoinLogUpdateOne) SetStatus(i int8) *WinCoinLogUpdateOne {
	wcluo.mutation.ResetStatus()
	wcluo.mutation.SetStatus(i)
	return wcluo
}

// AddStatus adds i to the "status" field.
func (wcluo *WinCoinLogUpdateOne) AddStatus(i int8) *WinCoinLogUpdateOne {
	wcluo.mutation.AddStatus(i)
	return wcluo
}

// SetCreatedAt sets the "created_at" field.
func (wcluo *WinCoinLogUpdateOne) SetCreatedAt(i int32) *WinCoinLogUpdateOne {
	wcluo.mutation.ResetCreatedAt()
	wcluo.mutation.SetCreatedAt(i)
	return wcluo
}

// AddCreatedAt adds i to the "created_at" field.
func (wcluo *WinCoinLogUpdateOne) AddCreatedAt(i int32) *WinCoinLogUpdateOne {
	wcluo.mutation.AddCreatedAt(i)
	return wcluo
}

// SetUpdatedAt sets the "updated_at" field.
func (wcluo *WinCoinLogUpdateOne) SetUpdatedAt(i int32) *WinCoinLogUpdateOne {
	wcluo.mutation.ResetUpdatedAt()
	wcluo.mutation.SetUpdatedAt(i)
	return wcluo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (wcluo *WinCoinLogUpdateOne) AddUpdatedAt(i int32) *WinCoinLogUpdateOne {
	wcluo.mutation.AddUpdatedAt(i)
	return wcluo
}

// Mutation returns the WinCoinLogMutation object of the builder.
func (wcluo *WinCoinLogUpdateOne) Mutation() *WinCoinLogMutation {
	return wcluo.mutation
}

// Where appends a list predicates to the WinCoinLogUpdate builder.
func (wcluo *WinCoinLogUpdateOne) Where(ps ...predicate.WinCoinLog) *WinCoinLogUpdateOne {
	wcluo.mutation.Where(ps...)
	return wcluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wcluo *WinCoinLogUpdateOne) Select(field string, fields ...string) *WinCoinLogUpdateOne {
	wcluo.fields = append([]string{field}, fields...)
	return wcluo
}

// Save executes the query and returns the updated WinCoinLog entity.
func (wcluo *WinCoinLogUpdateOne) Save(ctx context.Context) (*WinCoinLog, error) {
	return withHooks(ctx, wcluo.sqlSave, wcluo.mutation, wcluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wcluo *WinCoinLogUpdateOne) SaveX(ctx context.Context) *WinCoinLog {
	node, err := wcluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wcluo *WinCoinLogUpdateOne) Exec(ctx context.Context) error {
	_, err := wcluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wcluo *WinCoinLogUpdateOne) ExecX(ctx context.Context) {
	if err := wcluo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wcluo *WinCoinLogUpdateOne) sqlSave(ctx context.Context) (_node *WinCoinLog, err error) {
	_spec := sqlgraph.NewUpdateSpec(wincoinlog.Table, wincoinlog.Columns, sqlgraph.NewFieldSpec(wincoinlog.FieldID, field.TypeInt))
	id, ok := wcluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WinCoinLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wcluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, wincoinlog.FieldID)
		for _, f := range fields {
			if !wincoinlog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != wincoinlog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wcluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wcluo.mutation.UID(); ok {
		_spec.SetField(wincoinlog.FieldUID, field.TypeInt32, value)
	}
	if value, ok := wcluo.mutation.AddedUID(); ok {
		_spec.AddField(wincoinlog.FieldUID, field.TypeInt32, value)
	}
	if value, ok := wcluo.mutation.Username(); ok {
		_spec.SetField(wincoinlog.FieldUsername, field.TypeString, value)
	}
	if value, ok := wcluo.mutation.Category(); ok {
		_spec.SetField(wincoinlog.FieldCategory, field.TypeInt8, value)
	}
	if value, ok := wcluo.mutation.AddedCategory(); ok {
		_spec.AddField(wincoinlog.FieldCategory, field.TypeInt8, value)
	}
	if value, ok := wcluo.mutation.ReferID(); ok {
		_spec.SetField(wincoinlog.FieldReferID, field.TypeInt, value)
	}
	if value, ok := wcluo.mutation.AddedReferID(); ok {
		_spec.AddField(wincoinlog.FieldReferID, field.TypeInt, value)
	}
	if wcluo.mutation.ReferIDCleared() {
		_spec.ClearField(wincoinlog.FieldReferID, field.TypeInt)
	}
	if value, ok := wcluo.mutation.Coin(); ok {
		_spec.SetField(wincoinlog.FieldCoin, field.TypeFloat64, value)
	}
	if value, ok := wcluo.mutation.AddedCoin(); ok {
		_spec.AddField(wincoinlog.FieldCoin, field.TypeFloat64, value)
	}
	if value, ok := wcluo.mutation.CoinReal(); ok {
		_spec.SetField(wincoinlog.FieldCoinReal, field.TypeFloat64, value)
	}
	if value, ok := wcluo.mutation.AddedCoinReal(); ok {
		_spec.AddField(wincoinlog.FieldCoinReal, field.TypeFloat64, value)
	}
	if value, ok := wcluo.mutation.PlatID(); ok {
		_spec.SetField(wincoinlog.FieldPlatID, field.TypeInt32, value)
	}
	if value, ok := wcluo.mutation.AddedPlatID(); ok {
		_spec.AddField(wincoinlog.FieldPlatID, field.TypeInt32, value)
	}
	if value, ok := wcluo.mutation.OutIn(); ok {
		_spec.SetField(wincoinlog.FieldOutIn, field.TypeInt8, value)
	}
	if value, ok := wcluo.mutation.AddedOutIn(); ok {
		_spec.AddField(wincoinlog.FieldOutIn, field.TypeInt8, value)
	}
	if value, ok := wcluo.mutation.GameID(); ok {
		_spec.SetField(wincoinlog.FieldGameID, field.TypeInt32, value)
	}
	if value, ok := wcluo.mutation.AddedGameID(); ok {
		_spec.AddField(wincoinlog.FieldGameID, field.TypeInt32, value)
	}
	if value, ok := wcluo.mutation.CoinBefore(); ok {
		_spec.SetField(wincoinlog.FieldCoinBefore, field.TypeFloat64, value)
	}
	if value, ok := wcluo.mutation.AddedCoinBefore(); ok {
		_spec.AddField(wincoinlog.FieldCoinBefore, field.TypeFloat64, value)
	}
	if value, ok := wcluo.mutation.CoinAfter(); ok {
		_spec.SetField(wincoinlog.FieldCoinAfter, field.TypeFloat64, value)
	}
	if value, ok := wcluo.mutation.AddedCoinAfter(); ok {
		_spec.AddField(wincoinlog.FieldCoinAfter, field.TypeFloat64, value)
	}
	if value, ok := wcluo.mutation.Status(); ok {
		_spec.SetField(wincoinlog.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := wcluo.mutation.AddedStatus(); ok {
		_spec.AddField(wincoinlog.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := wcluo.mutation.CreatedAt(); ok {
		_spec.SetField(wincoinlog.FieldCreatedAt, field.TypeInt32, value)
	}
	if value, ok := wcluo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(wincoinlog.FieldCreatedAt, field.TypeInt32, value)
	}
	if value, ok := wcluo.mutation.UpdatedAt(); ok {
		_spec.SetField(wincoinlog.FieldUpdatedAt, field.TypeInt32, value)
	}
	if value, ok := wcluo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(wincoinlog.FieldUpdatedAt, field.TypeInt32, value)
	}
	_node = &WinCoinLog{config: wcluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wcluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{wincoinlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wcluo.mutation.done = true
	return _node, nil
}
