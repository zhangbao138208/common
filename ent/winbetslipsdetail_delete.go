// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.skig.tech/zero-core/common/ent/predicate"
	"gitlab.skig.tech/zero-core/common/ent/winbetslipsdetail"
)

// WinBetslipsDetailDelete is the builder for deleting a WinBetslipsDetail entity.
type WinBetslipsDetailDelete struct {
	config
	hooks    []Hook
	mutation *WinBetslipsDetailMutation
}

// Where appends a list predicates to the WinBetslipsDetailDelete builder.
func (wbdd *WinBetslipsDetailDelete) Where(ps ...predicate.WinBetslipsDetail) *WinBetslipsDetailDelete {
	wbdd.mutation.Where(ps...)
	return wbdd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (wbdd *WinBetslipsDetailDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, wbdd.sqlExec, wbdd.mutation, wbdd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (wbdd *WinBetslipsDetailDelete) ExecX(ctx context.Context) int {
	n, err := wbdd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (wbdd *WinBetslipsDetailDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(winbetslipsdetail.Table, sqlgraph.NewFieldSpec(winbetslipsdetail.FieldID, field.TypeInt))
	if ps := wbdd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, wbdd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	wbdd.mutation.done = true
	return affected, err
}

// WinBetslipsDetailDeleteOne is the builder for deleting a single WinBetslipsDetail entity.
type WinBetslipsDetailDeleteOne struct {
	wbdd *WinBetslipsDetailDelete
}

// Where appends a list predicates to the WinBetslipsDetailDelete builder.
func (wbddo *WinBetslipsDetailDeleteOne) Where(ps ...predicate.WinBetslipsDetail) *WinBetslipsDetailDeleteOne {
	wbddo.wbdd.mutation.Where(ps...)
	return wbddo
}

// Exec executes the deletion query.
func (wbddo *WinBetslipsDetailDeleteOne) Exec(ctx context.Context) error {
	n, err := wbddo.wbdd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{winbetslipsdetail.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (wbddo *WinBetslipsDetailDeleteOne) ExecX(ctx context.Context) {
	if err := wbddo.Exec(ctx); err != nil {
		panic(err)
	}
}
