// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.skig.tech/zero-core/common/ent/predicate"
	"gitlab.skig.tech/zero-core/common/ent/windictitem"
)

// WinDictItemUpdate is the builder for updating WinDictItem entities.
type WinDictItemUpdate struct {
	config
	hooks    []Hook
	mutation *WinDictItemMutation
}

// Where appends a list predicates to the WinDictItemUpdate builder.
func (wdiu *WinDictItemUpdate) Where(ps ...predicate.WinDictItem) *WinDictItemUpdate {
	wdiu.mutation.Where(ps...)
	return wdiu
}

// SetCode sets the "code" field.
func (wdiu *WinDictItemUpdate) SetCode(s string) *WinDictItemUpdate {
	wdiu.mutation.SetCode(s)
	return wdiu
}

// SetTitle sets the "title" field.
func (wdiu *WinDictItemUpdate) SetTitle(s string) *WinDictItemUpdate {
	wdiu.mutation.SetTitle(s)
	return wdiu
}

// SetRemark sets the "remark" field.
func (wdiu *WinDictItemUpdate) SetRemark(s string) *WinDictItemUpdate {
	wdiu.mutation.SetRemark(s)
	return wdiu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (wdiu *WinDictItemUpdate) SetNillableRemark(s *string) *WinDictItemUpdate {
	if s != nil {
		wdiu.SetRemark(*s)
	}
	return wdiu
}

// ClearRemark clears the value of the "remark" field.
func (wdiu *WinDictItemUpdate) ClearRemark() *WinDictItemUpdate {
	wdiu.mutation.ClearRemark()
	return wdiu
}

// SetSort sets the "sort" field.
func (wdiu *WinDictItemUpdate) SetSort(i int32) *WinDictItemUpdate {
	wdiu.mutation.ResetSort()
	wdiu.mutation.SetSort(i)
	return wdiu
}

// AddSort adds i to the "sort" field.
func (wdiu *WinDictItemUpdate) AddSort(i int32) *WinDictItemUpdate {
	wdiu.mutation.AddSort(i)
	return wdiu
}

// SetReferID sets the "refer_id" field.
func (wdiu *WinDictItemUpdate) SetReferID(i int32) *WinDictItemUpdate {
	wdiu.mutation.ResetReferID()
	wdiu.mutation.SetReferID(i)
	return wdiu
}

// AddReferID adds i to the "refer_id" field.
func (wdiu *WinDictItemUpdate) AddReferID(i int32) *WinDictItemUpdate {
	wdiu.mutation.AddReferID(i)
	return wdiu
}

// SetStatus sets the "status" field.
func (wdiu *WinDictItemUpdate) SetStatus(b bool) *WinDictItemUpdate {
	wdiu.mutation.SetStatus(b)
	return wdiu
}

// SetIsShow sets the "is_show" field.
func (wdiu *WinDictItemUpdate) SetIsShow(i int8) *WinDictItemUpdate {
	wdiu.mutation.ResetIsShow()
	wdiu.mutation.SetIsShow(i)
	return wdiu
}

// AddIsShow adds i to the "is_show" field.
func (wdiu *WinDictItemUpdate) AddIsShow(i int8) *WinDictItemUpdate {
	wdiu.mutation.AddIsShow(i)
	return wdiu
}

// SetCreatedAt sets the "created_at" field.
func (wdiu *WinDictItemUpdate) SetCreatedAt(i int32) *WinDictItemUpdate {
	wdiu.mutation.ResetCreatedAt()
	wdiu.mutation.SetCreatedAt(i)
	return wdiu
}

// AddCreatedAt adds i to the "created_at" field.
func (wdiu *WinDictItemUpdate) AddCreatedAt(i int32) *WinDictItemUpdate {
	wdiu.mutation.AddCreatedAt(i)
	return wdiu
}

// SetUpdatedAt sets the "updated_at" field.
func (wdiu *WinDictItemUpdate) SetUpdatedAt(i int32) *WinDictItemUpdate {
	wdiu.mutation.ResetUpdatedAt()
	wdiu.mutation.SetUpdatedAt(i)
	return wdiu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (wdiu *WinDictItemUpdate) AddUpdatedAt(i int32) *WinDictItemUpdate {
	wdiu.mutation.AddUpdatedAt(i)
	return wdiu
}

// Mutation returns the WinDictItemMutation object of the builder.
func (wdiu *WinDictItemUpdate) Mutation() *WinDictItemMutation {
	return wdiu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wdiu *WinDictItemUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, wdiu.sqlSave, wdiu.mutation, wdiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wdiu *WinDictItemUpdate) SaveX(ctx context.Context) int {
	affected, err := wdiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wdiu *WinDictItemUpdate) Exec(ctx context.Context) error {
	_, err := wdiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wdiu *WinDictItemUpdate) ExecX(ctx context.Context) {
	if err := wdiu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wdiu *WinDictItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(windictitem.Table, windictitem.Columns, sqlgraph.NewFieldSpec(windictitem.FieldID, field.TypeInt32))
	if ps := wdiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wdiu.mutation.Code(); ok {
		_spec.SetField(windictitem.FieldCode, field.TypeString, value)
	}
	if value, ok := wdiu.mutation.Title(); ok {
		_spec.SetField(windictitem.FieldTitle, field.TypeString, value)
	}
	if value, ok := wdiu.mutation.Remark(); ok {
		_spec.SetField(windictitem.FieldRemark, field.TypeString, value)
	}
	if wdiu.mutation.RemarkCleared() {
		_spec.ClearField(windictitem.FieldRemark, field.TypeString)
	}
	if value, ok := wdiu.mutation.Sort(); ok {
		_spec.SetField(windictitem.FieldSort, field.TypeInt32, value)
	}
	if value, ok := wdiu.mutation.AddedSort(); ok {
		_spec.AddField(windictitem.FieldSort, field.TypeInt32, value)
	}
	if value, ok := wdiu.mutation.ReferID(); ok {
		_spec.SetField(windictitem.FieldReferID, field.TypeInt32, value)
	}
	if value, ok := wdiu.mutation.AddedReferID(); ok {
		_spec.AddField(windictitem.FieldReferID, field.TypeInt32, value)
	}
	if value, ok := wdiu.mutation.Status(); ok {
		_spec.SetField(windictitem.FieldStatus, field.TypeBool, value)
	}
	if value, ok := wdiu.mutation.IsShow(); ok {
		_spec.SetField(windictitem.FieldIsShow, field.TypeInt8, value)
	}
	if value, ok := wdiu.mutation.AddedIsShow(); ok {
		_spec.AddField(windictitem.FieldIsShow, field.TypeInt8, value)
	}
	if value, ok := wdiu.mutation.CreatedAt(); ok {
		_spec.SetField(windictitem.FieldCreatedAt, field.TypeInt32, value)
	}
	if value, ok := wdiu.mutation.AddedCreatedAt(); ok {
		_spec.AddField(windictitem.FieldCreatedAt, field.TypeInt32, value)
	}
	if value, ok := wdiu.mutation.UpdatedAt(); ok {
		_spec.SetField(windictitem.FieldUpdatedAt, field.TypeInt32, value)
	}
	if value, ok := wdiu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(windictitem.FieldUpdatedAt, field.TypeInt32, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wdiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{windictitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wdiu.mutation.done = true
	return n, nil
}

// WinDictItemUpdateOne is the builder for updating a single WinDictItem entity.
type WinDictItemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WinDictItemMutation
}

// SetCode sets the "code" field.
func (wdiuo *WinDictItemUpdateOne) SetCode(s string) *WinDictItemUpdateOne {
	wdiuo.mutation.SetCode(s)
	return wdiuo
}

// SetTitle sets the "title" field.
func (wdiuo *WinDictItemUpdateOne) SetTitle(s string) *WinDictItemUpdateOne {
	wdiuo.mutation.SetTitle(s)
	return wdiuo
}

// SetRemark sets the "remark" field.
func (wdiuo *WinDictItemUpdateOne) SetRemark(s string) *WinDictItemUpdateOne {
	wdiuo.mutation.SetRemark(s)
	return wdiuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (wdiuo *WinDictItemUpdateOne) SetNillableRemark(s *string) *WinDictItemUpdateOne {
	if s != nil {
		wdiuo.SetRemark(*s)
	}
	return wdiuo
}

// ClearRemark clears the value of the "remark" field.
func (wdiuo *WinDictItemUpdateOne) ClearRemark() *WinDictItemUpdateOne {
	wdiuo.mutation.ClearRemark()
	return wdiuo
}

// SetSort sets the "sort" field.
func (wdiuo *WinDictItemUpdateOne) SetSort(i int32) *WinDictItemUpdateOne {
	wdiuo.mutation.ResetSort()
	wdiuo.mutation.SetSort(i)
	return wdiuo
}

// AddSort adds i to the "sort" field.
func (wdiuo *WinDictItemUpdateOne) AddSort(i int32) *WinDictItemUpdateOne {
	wdiuo.mutation.AddSort(i)
	return wdiuo
}

// SetReferID sets the "refer_id" field.
func (wdiuo *WinDictItemUpdateOne) SetReferID(i int32) *WinDictItemUpdateOne {
	wdiuo.mutation.ResetReferID()
	wdiuo.mutation.SetReferID(i)
	return wdiuo
}

// AddReferID adds i to the "refer_id" field.
func (wdiuo *WinDictItemUpdateOne) AddReferID(i int32) *WinDictItemUpdateOne {
	wdiuo.mutation.AddReferID(i)
	return wdiuo
}

// SetStatus sets the "status" field.
func (wdiuo *WinDictItemUpdateOne) SetStatus(b bool) *WinDictItemUpdateOne {
	wdiuo.mutation.SetStatus(b)
	return wdiuo
}

// SetIsShow sets the "is_show" field.
func (wdiuo *WinDictItemUpdateOne) SetIsShow(i int8) *WinDictItemUpdateOne {
	wdiuo.mutation.ResetIsShow()
	wdiuo.mutation.SetIsShow(i)
	return wdiuo
}

// AddIsShow adds i to the "is_show" field.
func (wdiuo *WinDictItemUpdateOne) AddIsShow(i int8) *WinDictItemUpdateOne {
	wdiuo.mutation.AddIsShow(i)
	return wdiuo
}

// SetCreatedAt sets the "created_at" field.
func (wdiuo *WinDictItemUpdateOne) SetCreatedAt(i int32) *WinDictItemUpdateOne {
	wdiuo.mutation.ResetCreatedAt()
	wdiuo.mutation.SetCreatedAt(i)
	return wdiuo
}

// AddCreatedAt adds i to the "created_at" field.
func (wdiuo *WinDictItemUpdateOne) AddCreatedAt(i int32) *WinDictItemUpdateOne {
	wdiuo.mutation.AddCreatedAt(i)
	return wdiuo
}

// SetUpdatedAt sets the "updated_at" field.
func (wdiuo *WinDictItemUpdateOne) SetUpdatedAt(i int32) *WinDictItemUpdateOne {
	wdiuo.mutation.ResetUpdatedAt()
	wdiuo.mutation.SetUpdatedAt(i)
	return wdiuo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (wdiuo *WinDictItemUpdateOne) AddUpdatedAt(i int32) *WinDictItemUpdateOne {
	wdiuo.mutation.AddUpdatedAt(i)
	return wdiuo
}

// Mutation returns the WinDictItemMutation object of the builder.
func (wdiuo *WinDictItemUpdateOne) Mutation() *WinDictItemMutation {
	return wdiuo.mutation
}

// Where appends a list predicates to the WinDictItemUpdate builder.
func (wdiuo *WinDictItemUpdateOne) Where(ps ...predicate.WinDictItem) *WinDictItemUpdateOne {
	wdiuo.mutation.Where(ps...)
	return wdiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wdiuo *WinDictItemUpdateOne) Select(field string, fields ...string) *WinDictItemUpdateOne {
	wdiuo.fields = append([]string{field}, fields...)
	return wdiuo
}

// Save executes the query and returns the updated WinDictItem entity.
func (wdiuo *WinDictItemUpdateOne) Save(ctx context.Context) (*WinDictItem, error) {
	return withHooks(ctx, wdiuo.sqlSave, wdiuo.mutation, wdiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wdiuo *WinDictItemUpdateOne) SaveX(ctx context.Context) *WinDictItem {
	node, err := wdiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wdiuo *WinDictItemUpdateOne) Exec(ctx context.Context) error {
	_, err := wdiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wdiuo *WinDictItemUpdateOne) ExecX(ctx context.Context) {
	if err := wdiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wdiuo *WinDictItemUpdateOne) sqlSave(ctx context.Context) (_node *WinDictItem, err error) {
	_spec := sqlgraph.NewUpdateSpec(windictitem.Table, windictitem.Columns, sqlgraph.NewFieldSpec(windictitem.FieldID, field.TypeInt32))
	id, ok := wdiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WinDictItem.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wdiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, windictitem.FieldID)
		for _, f := range fields {
			if !windictitem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != windictitem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wdiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wdiuo.mutation.Code(); ok {
		_spec.SetField(windictitem.FieldCode, field.TypeString, value)
	}
	if value, ok := wdiuo.mutation.Title(); ok {
		_spec.SetField(windictitem.FieldTitle, field.TypeString, value)
	}
	if value, ok := wdiuo.mutation.Remark(); ok {
		_spec.SetField(windictitem.FieldRemark, field.TypeString, value)
	}
	if wdiuo.mutation.RemarkCleared() {
		_spec.ClearField(windictitem.FieldRemark, field.TypeString)
	}
	if value, ok := wdiuo.mutation.Sort(); ok {
		_spec.SetField(windictitem.FieldSort, field.TypeInt32, value)
	}
	if value, ok := wdiuo.mutation.AddedSort(); ok {
		_spec.AddField(windictitem.FieldSort, field.TypeInt32, value)
	}
	if value, ok := wdiuo.mutation.ReferID(); ok {
		_spec.SetField(windictitem.FieldReferID, field.TypeInt32, value)
	}
	if value, ok := wdiuo.mutation.AddedReferID(); ok {
		_spec.AddField(windictitem.FieldReferID, field.TypeInt32, value)
	}
	if value, ok := wdiuo.mutation.Status(); ok {
		_spec.SetField(windictitem.FieldStatus, field.TypeBool, value)
	}
	if value, ok := wdiuo.mutation.IsShow(); ok {
		_spec.SetField(windictitem.FieldIsShow, field.TypeInt8, value)
	}
	if value, ok := wdiuo.mutation.AddedIsShow(); ok {
		_spec.AddField(windictitem.FieldIsShow, field.TypeInt8, value)
	}
	if value, ok := wdiuo.mutation.CreatedAt(); ok {
		_spec.SetField(windictitem.FieldCreatedAt, field.TypeInt32, value)
	}
	if value, ok := wdiuo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(windictitem.FieldCreatedAt, field.TypeInt32, value)
	}
	if value, ok := wdiuo.mutation.UpdatedAt(); ok {
		_spec.SetField(windictitem.FieldUpdatedAt, field.TypeInt32, value)
	}
	if value, ok := wdiuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(windictitem.FieldUpdatedAt, field.TypeInt32, value)
	}
	_node = &WinDictItem{config: wdiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wdiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{windictitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wdiuo.mutation.done = true
	return _node, nil
}
