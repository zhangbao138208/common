// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.skig.tech/zero-core/common/ent/predicate"
	"gitlab.skig.tech/zero-core/common/ent/winuserwallet"
)

// WinUserWalletUpdate is the builder for updating WinUserWallet entities.
type WinUserWalletUpdate struct {
	config
	hooks    []Hook
	mutation *WinUserWalletMutation
}

// Where appends a list predicates to the WinUserWalletUpdate builder.
func (wuwu *WinUserWalletUpdate) Where(ps ...predicate.WinUserWallet) *WinUserWalletUpdate {
	wuwu.mutation.Where(ps...)
	return wuwu
}

// SetUsername sets the "username" field.
func (wuwu *WinUserWalletUpdate) SetUsername(s string) *WinUserWalletUpdate {
	wuwu.mutation.SetUsername(s)
	return wuwu
}

// SetCoin sets the "coin" field.
func (wuwu *WinUserWalletUpdate) SetCoin(f float64) *WinUserWalletUpdate {
	wuwu.mutation.ResetCoin()
	wuwu.mutation.SetCoin(f)
	return wuwu
}

// AddCoin adds f to the "coin" field.
func (wuwu *WinUserWalletUpdate) AddCoin(f float64) *WinUserWalletUpdate {
	wuwu.mutation.AddCoin(f)
	return wuwu
}

// SetVersion sets the "version" field.
func (wuwu *WinUserWalletUpdate) SetVersion(i int) *WinUserWalletUpdate {
	wuwu.mutation.ResetVersion()
	wuwu.mutation.SetVersion(i)
	return wuwu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (wuwu *WinUserWalletUpdate) SetNillableVersion(i *int) *WinUserWalletUpdate {
	if i != nil {
		wuwu.SetVersion(*i)
	}
	return wuwu
}

// AddVersion adds i to the "version" field.
func (wuwu *WinUserWalletUpdate) AddVersion(i int) *WinUserWalletUpdate {
	wuwu.mutation.AddVersion(i)
	return wuwu
}

// ClearVersion clears the value of the "version" field.
func (wuwu *WinUserWalletUpdate) ClearVersion() *WinUserWalletUpdate {
	wuwu.mutation.ClearVersion()
	return wuwu
}

// SetModifyAt sets the "modify_at" field.
func (wuwu *WinUserWalletUpdate) SetModifyAt(i int) *WinUserWalletUpdate {
	wuwu.mutation.ResetModifyAt()
	wuwu.mutation.SetModifyAt(i)
	return wuwu
}

// AddModifyAt adds i to the "modify_at" field.
func (wuwu *WinUserWalletUpdate) AddModifyAt(i int) *WinUserWalletUpdate {
	wuwu.mutation.AddModifyAt(i)
	return wuwu
}

// SetCreatedAt sets the "created_at" field.
func (wuwu *WinUserWalletUpdate) SetCreatedAt(i int32) *WinUserWalletUpdate {
	wuwu.mutation.ResetCreatedAt()
	wuwu.mutation.SetCreatedAt(i)
	return wuwu
}

// AddCreatedAt adds i to the "created_at" field.
func (wuwu *WinUserWalletUpdate) AddCreatedAt(i int32) *WinUserWalletUpdate {
	wuwu.mutation.AddCreatedAt(i)
	return wuwu
}

// SetUpdatedAt sets the "updated_at" field.
func (wuwu *WinUserWalletUpdate) SetUpdatedAt(i int32) *WinUserWalletUpdate {
	wuwu.mutation.ResetUpdatedAt()
	wuwu.mutation.SetUpdatedAt(i)
	return wuwu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (wuwu *WinUserWalletUpdate) AddUpdatedAt(i int32) *WinUserWalletUpdate {
	wuwu.mutation.AddUpdatedAt(i)
	return wuwu
}

// Mutation returns the WinUserWalletMutation object of the builder.
func (wuwu *WinUserWalletUpdate) Mutation() *WinUserWalletMutation {
	return wuwu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wuwu *WinUserWalletUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, wuwu.sqlSave, wuwu.mutation, wuwu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wuwu *WinUserWalletUpdate) SaveX(ctx context.Context) int {
	affected, err := wuwu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wuwu *WinUserWalletUpdate) Exec(ctx context.Context) error {
	_, err := wuwu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wuwu *WinUserWalletUpdate) ExecX(ctx context.Context) {
	if err := wuwu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wuwu *WinUserWalletUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(winuserwallet.Table, winuserwallet.Columns, sqlgraph.NewFieldSpec(winuserwallet.FieldID, field.TypeInt32))
	if ps := wuwu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wuwu.mutation.Username(); ok {
		_spec.SetField(winuserwallet.FieldUsername, field.TypeString, value)
	}
	if value, ok := wuwu.mutation.Coin(); ok {
		_spec.SetField(winuserwallet.FieldCoin, field.TypeFloat64, value)
	}
	if value, ok := wuwu.mutation.AddedCoin(); ok {
		_spec.AddField(winuserwallet.FieldCoin, field.TypeFloat64, value)
	}
	if value, ok := wuwu.mutation.Version(); ok {
		_spec.SetField(winuserwallet.FieldVersion, field.TypeInt, value)
	}
	if value, ok := wuwu.mutation.AddedVersion(); ok {
		_spec.AddField(winuserwallet.FieldVersion, field.TypeInt, value)
	}
	if wuwu.mutation.VersionCleared() {
		_spec.ClearField(winuserwallet.FieldVersion, field.TypeInt)
	}
	if value, ok := wuwu.mutation.ModifyAt(); ok {
		_spec.SetField(winuserwallet.FieldModifyAt, field.TypeInt, value)
	}
	if value, ok := wuwu.mutation.AddedModifyAt(); ok {
		_spec.AddField(winuserwallet.FieldModifyAt, field.TypeInt, value)
	}
	if value, ok := wuwu.mutation.CreatedAt(); ok {
		_spec.SetField(winuserwallet.FieldCreatedAt, field.TypeInt32, value)
	}
	if value, ok := wuwu.mutation.AddedCreatedAt(); ok {
		_spec.AddField(winuserwallet.FieldCreatedAt, field.TypeInt32, value)
	}
	if value, ok := wuwu.mutation.UpdatedAt(); ok {
		_spec.SetField(winuserwallet.FieldUpdatedAt, field.TypeInt32, value)
	}
	if value, ok := wuwu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(winuserwallet.FieldUpdatedAt, field.TypeInt32, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wuwu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{winuserwallet.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wuwu.mutation.done = true
	return n, nil
}

// WinUserWalletUpdateOne is the builder for updating a single WinUserWallet entity.
type WinUserWalletUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WinUserWalletMutation
}

// SetUsername sets the "username" field.
func (wuwuo *WinUserWalletUpdateOne) SetUsername(s string) *WinUserWalletUpdateOne {
	wuwuo.mutation.SetUsername(s)
	return wuwuo
}

// SetCoin sets the "coin" field.
func (wuwuo *WinUserWalletUpdateOne) SetCoin(f float64) *WinUserWalletUpdateOne {
	wuwuo.mutation.ResetCoin()
	wuwuo.mutation.SetCoin(f)
	return wuwuo
}

// AddCoin adds f to the "coin" field.
func (wuwuo *WinUserWalletUpdateOne) AddCoin(f float64) *WinUserWalletUpdateOne {
	wuwuo.mutation.AddCoin(f)
	return wuwuo
}

// SetVersion sets the "version" field.
func (wuwuo *WinUserWalletUpdateOne) SetVersion(i int) *WinUserWalletUpdateOne {
	wuwuo.mutation.ResetVersion()
	wuwuo.mutation.SetVersion(i)
	return wuwuo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (wuwuo *WinUserWalletUpdateOne) SetNillableVersion(i *int) *WinUserWalletUpdateOne {
	if i != nil {
		wuwuo.SetVersion(*i)
	}
	return wuwuo
}

// AddVersion adds i to the "version" field.
func (wuwuo *WinUserWalletUpdateOne) AddVersion(i int) *WinUserWalletUpdateOne {
	wuwuo.mutation.AddVersion(i)
	return wuwuo
}

// ClearVersion clears the value of the "version" field.
func (wuwuo *WinUserWalletUpdateOne) ClearVersion() *WinUserWalletUpdateOne {
	wuwuo.mutation.ClearVersion()
	return wuwuo
}

// SetModifyAt sets the "modify_at" field.
func (wuwuo *WinUserWalletUpdateOne) SetModifyAt(i int) *WinUserWalletUpdateOne {
	wuwuo.mutation.ResetModifyAt()
	wuwuo.mutation.SetModifyAt(i)
	return wuwuo
}

// AddModifyAt adds i to the "modify_at" field.
func (wuwuo *WinUserWalletUpdateOne) AddModifyAt(i int) *WinUserWalletUpdateOne {
	wuwuo.mutation.AddModifyAt(i)
	return wuwuo
}

// SetCreatedAt sets the "created_at" field.
func (wuwuo *WinUserWalletUpdateOne) SetCreatedAt(i int32) *WinUserWalletUpdateOne {
	wuwuo.mutation.ResetCreatedAt()
	wuwuo.mutation.SetCreatedAt(i)
	return wuwuo
}

// AddCreatedAt adds i to the "created_at" field.
func (wuwuo *WinUserWalletUpdateOne) AddCreatedAt(i int32) *WinUserWalletUpdateOne {
	wuwuo.mutation.AddCreatedAt(i)
	return wuwuo
}

// SetUpdatedAt sets the "updated_at" field.
func (wuwuo *WinUserWalletUpdateOne) SetUpdatedAt(i int32) *WinUserWalletUpdateOne {
	wuwuo.mutation.ResetUpdatedAt()
	wuwuo.mutation.SetUpdatedAt(i)
	return wuwuo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (wuwuo *WinUserWalletUpdateOne) AddUpdatedAt(i int32) *WinUserWalletUpdateOne {
	wuwuo.mutation.AddUpdatedAt(i)
	return wuwuo
}

// Mutation returns the WinUserWalletMutation object of the builder.
func (wuwuo *WinUserWalletUpdateOne) Mutation() *WinUserWalletMutation {
	return wuwuo.mutation
}

// Where appends a list predicates to the WinUserWalletUpdate builder.
func (wuwuo *WinUserWalletUpdateOne) Where(ps ...predicate.WinUserWallet) *WinUserWalletUpdateOne {
	wuwuo.mutation.Where(ps...)
	return wuwuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wuwuo *WinUserWalletUpdateOne) Select(field string, fields ...string) *WinUserWalletUpdateOne {
	wuwuo.fields = append([]string{field}, fields...)
	return wuwuo
}

// Save executes the query and returns the updated WinUserWallet entity.
func (wuwuo *WinUserWalletUpdateOne) Save(ctx context.Context) (*WinUserWallet, error) {
	return withHooks(ctx, wuwuo.sqlSave, wuwuo.mutation, wuwuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wuwuo *WinUserWalletUpdateOne) SaveX(ctx context.Context) *WinUserWallet {
	node, err := wuwuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wuwuo *WinUserWalletUpdateOne) Exec(ctx context.Context) error {
	_, err := wuwuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wuwuo *WinUserWalletUpdateOne) ExecX(ctx context.Context) {
	if err := wuwuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wuwuo *WinUserWalletUpdateOne) sqlSave(ctx context.Context) (_node *WinUserWallet, err error) {
	_spec := sqlgraph.NewUpdateSpec(winuserwallet.Table, winuserwallet.Columns, sqlgraph.NewFieldSpec(winuserwallet.FieldID, field.TypeInt32))
	id, ok := wuwuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WinUserWallet.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wuwuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, winuserwallet.FieldID)
		for _, f := range fields {
			if !winuserwallet.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != winuserwallet.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wuwuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wuwuo.mutation.Username(); ok {
		_spec.SetField(winuserwallet.FieldUsername, field.TypeString, value)
	}
	if value, ok := wuwuo.mutation.Coin(); ok {
		_spec.SetField(winuserwallet.FieldCoin, field.TypeFloat64, value)
	}
	if value, ok := wuwuo.mutation.AddedCoin(); ok {
		_spec.AddField(winuserwallet.FieldCoin, field.TypeFloat64, value)
	}
	if value, ok := wuwuo.mutation.Version(); ok {
		_spec.SetField(winuserwallet.FieldVersion, field.TypeInt, value)
	}
	if value, ok := wuwuo.mutation.AddedVersion(); ok {
		_spec.AddField(winuserwallet.FieldVersion, field.TypeInt, value)
	}
	if wuwuo.mutation.VersionCleared() {
		_spec.ClearField(winuserwallet.FieldVersion, field.TypeInt)
	}
	if value, ok := wuwuo.mutation.ModifyAt(); ok {
		_spec.SetField(winuserwallet.FieldModifyAt, field.TypeInt, value)
	}
	if value, ok := wuwuo.mutation.AddedModifyAt(); ok {
		_spec.AddField(winuserwallet.FieldModifyAt, field.TypeInt, value)
	}
	if value, ok := wuwuo.mutation.CreatedAt(); ok {
		_spec.SetField(winuserwallet.FieldCreatedAt, field.TypeInt32, value)
	}
	if value, ok := wuwuo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(winuserwallet.FieldCreatedAt, field.TypeInt32, value)
	}
	if value, ok := wuwuo.mutation.UpdatedAt(); ok {
		_spec.SetField(winuserwallet.FieldUpdatedAt, field.TypeInt32, value)
	}
	if value, ok := wuwuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(winuserwallet.FieldUpdatedAt, field.TypeInt32, value)
	}
	_node = &WinUserWallet{config: wuwuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wuwuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{winuserwallet.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wuwuo.mutation.done = true
	return _node, nil
}
