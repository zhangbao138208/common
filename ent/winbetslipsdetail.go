// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"gitlab.skig.tech/zero-core/common/ent/winbetslipsdetail"
)

// WinBetslipsDetail is the model entity for the WinBetslipsDetail schema.
type WinBetslipsDetail struct {
	config `json:"-"`
	// ID of the ent.
	// 主键-同注单表一致
	ID int `json:"id,omitempty"`
	// 对应user表id
	XbUID uint32 `json:"xb_uid,omitempty"`
	// 对应user表username
	XbUsername string `json:"xb_username,omitempty"`
	// 投注原始json
	BetJSON string `json:"bet_json,omitempty"`
	// 开彩原始json
	RewardJSON string `json:"reward_json,omitempty"`
	// 退款原始json
	RefundJSON   string `json:"refund_json,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WinBetslipsDetail) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case winbetslipsdetail.FieldID, winbetslipsdetail.FieldXbUID:
			values[i] = new(sql.NullInt64)
		case winbetslipsdetail.FieldXbUsername, winbetslipsdetail.FieldBetJSON, winbetslipsdetail.FieldRewardJSON, winbetslipsdetail.FieldRefundJSON:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WinBetslipsDetail fields.
func (wbd *WinBetslipsDetail) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case winbetslipsdetail.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			wbd.ID = int(value.Int64)
		case winbetslipsdetail.FieldXbUID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field xb_uid", values[i])
			} else if value.Valid {
				wbd.XbUID = uint32(value.Int64)
			}
		case winbetslipsdetail.FieldXbUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field xb_username", values[i])
			} else if value.Valid {
				wbd.XbUsername = value.String
			}
		case winbetslipsdetail.FieldBetJSON:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bet_json", values[i])
			} else if value.Valid {
				wbd.BetJSON = value.String
			}
		case winbetslipsdetail.FieldRewardJSON:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reward_json", values[i])
			} else if value.Valid {
				wbd.RewardJSON = value.String
			}
		case winbetslipsdetail.FieldRefundJSON:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field refund_json", values[i])
			} else if value.Valid {
				wbd.RefundJSON = value.String
			}
		default:
			wbd.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the WinBetslipsDetail.
// This includes values selected through modifiers, order, etc.
func (wbd *WinBetslipsDetail) Value(name string) (ent.Value, error) {
	return wbd.selectValues.Get(name)
}

// Update returns a builder for updating this WinBetslipsDetail.
// Note that you need to call WinBetslipsDetail.Unwrap() before calling this method if this WinBetslipsDetail
// was returned from a transaction, and the transaction was committed or rolled back.
func (wbd *WinBetslipsDetail) Update() *WinBetslipsDetailUpdateOne {
	return NewWinBetslipsDetailClient(wbd.config).UpdateOne(wbd)
}

// Unwrap unwraps the WinBetslipsDetail entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (wbd *WinBetslipsDetail) Unwrap() *WinBetslipsDetail {
	_tx, ok := wbd.config.driver.(*txDriver)
	if !ok {
		panic("ent: WinBetslipsDetail is not a transactional entity")
	}
	wbd.config.driver = _tx.drv
	return wbd
}

// String implements the fmt.Stringer.
func (wbd *WinBetslipsDetail) String() string {
	var builder strings.Builder
	builder.WriteString("WinBetslipsDetail(")
	builder.WriteString(fmt.Sprintf("id=%v, ", wbd.ID))
	builder.WriteString("xb_uid=")
	builder.WriteString(fmt.Sprintf("%v", wbd.XbUID))
	builder.WriteString(", ")
	builder.WriteString("xb_username=")
	builder.WriteString(wbd.XbUsername)
	builder.WriteString(", ")
	builder.WriteString("bet_json=")
	builder.WriteString(wbd.BetJSON)
	builder.WriteString(", ")
	builder.WriteString("reward_json=")
	builder.WriteString(wbd.RewardJSON)
	builder.WriteString(", ")
	builder.WriteString("refund_json=")
	builder.WriteString(wbd.RefundJSON)
	builder.WriteByte(')')
	return builder.String()
}

// WinBetslipsDetails is a parsable slice of WinBetslipsDetail.
type WinBetslipsDetails []*WinBetslipsDetail
