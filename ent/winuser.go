// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"gitlab.skig.tech/zero-core/common/ent/winuser"
)

// WinUser is the model entity for the WinUser schema.
type WinUser struct {
	config `json:"-"`
	// ID of the ent.
	ID int32 `json:"id,omitempty"`
	// 用户名
	Username string `json:"username,omitempty"`
	// 头像
	Avatar string `json:"avatar,omitempty"`
	// 冻结金额
	Fcoin float64 `json:"fcoin,omitempty"`
	// 佣金可提现金额
	CoinCommission float64 `json:"coin_commission,omitempty"`
	// 会员等级
	LevelID int8 `json:"level_id,omitempty"`
	// 角色:0-会员 1-代理 2-总代理 4-测试
	Role int8 `json:"role,omitempty"`
	// 是否推广:0-不是 1-是
	IsPromoter bool `json:"is_promoter,omitempty"`
	// 会员旗
	Flag uint32 `json:"flag,omitempty"`
	// 真实姓名
	RealName string `json:"real_name,omitempty"`
	// 个性签名
	Signature string `json:"signature,omitempty"`
	// 生日
	Birthday string `json:"birthday,omitempty"`
	// 区号
	AreaCode string `json:"area_code,omitempty"`
	// 手机号码
	Mobile string `json:"mobile,omitempty"`
	// 邮箱
	Email string `json:"email,omitempty"`
	// 性别:1-男 0-女 2-未知
	Sex bool `json:"sex,omitempty"`
	// 是否绑定银行卡:1-已绑定 0-未绑定
	BindBank bool `json:"bind_bank,omitempty"`
	// 家庭地址
	Address string `json:"address,omitempty"`
	// 积分
	Score uint32 `json:"score,omitempty"`
	// 推广码
	PromoCode string `json:"promo_code,omitempty"`
	// 上1级代理
	SupUID1 uint32 `json:"sup_uid_1,omitempty"`
	// 上1级代理
	SupUsername1 string `json:"sup_username_1,omitempty"`
	// 上2级代理
	SupUID2 uint32 `json:"sup_uid_2,omitempty"`
	// 上3级代理
	SupUID3 uint32 `json:"sup_uid_3,omitempty"`
	// 上4级代理
	SupUID4 uint32 `json:"sup_uid_4,omitempty"`
	// 上5级代理
	SupUID5 uint32 `json:"sup_uid_5,omitempty"`
	// 上6级代理
	SupUID6 uint32 `json:"sup_uid_6,omitempty"`
	// 顶级推广用户名
	SupUIDTop int32 `json:"sup_uid_top,omitempty"`
	// 顶级推广用户名
	SupUsernameTop string `json:"sup_username_top,omitempty"`
	// 顶级推广层级
	SupLevelTop int32 `json:"sup_level_top,omitempty"`
	// 登录密码
	PasswordHash string `json:"password_hash,omitempty"`
	// 取款密码
	PasswordCoin string `json:"password_coin,omitempty"`
	// IP地址
	IP string `json:"ip,omitempty"`
	// IP归属地
	IPRegion string `json:"ip_region,omitempty"`
	// 三方登陆类型
	ThirdLoginType string `json:"third_login_type,omitempty"`
	// FreezeCause holds the value of the "freeze_cause" field.
	FreezeCause string `json:"freeze_cause,omitempty"`
	// 冻结时间
	FreezeAt int32 `json:"freeze_at,omitempty"`
	// 操作人姓名
	OperatorName string `json:"operator_name,omitempty"`
	// 创建人
	CreatedName string `json:"created_name,omitempty"`
	// 状态:10-正常 9-冻结 8-删除
	Status int8 `json:"status,omitempty"`
	// 最后登陆ip
	LastLoginIP string `json:"last_login_ip,omitempty"`
	// 最后登录IP归属地
	LastLoginIPRegion string `json:"last_login_ip_region,omitempty"`
	// 最后登陆时间
	LastLoginTime int32 `json:"last_login_time,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt int32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt    int32 `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WinUser) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case winuser.FieldIsPromoter, winuser.FieldSex, winuser.FieldBindBank:
			values[i] = new(sql.NullBool)
		case winuser.FieldFcoin, winuser.FieldCoinCommission:
			values[i] = new(sql.NullFloat64)
		case winuser.FieldID, winuser.FieldLevelID, winuser.FieldRole, winuser.FieldFlag, winuser.FieldScore, winuser.FieldSupUID1, winuser.FieldSupUID2, winuser.FieldSupUID3, winuser.FieldSupUID4, winuser.FieldSupUID5, winuser.FieldSupUID6, winuser.FieldSupUIDTop, winuser.FieldSupLevelTop, winuser.FieldFreezeAt, winuser.FieldStatus, winuser.FieldLastLoginTime, winuser.FieldCreatedAt, winuser.FieldUpdatedAt:
			values[i] = new(sql.NullInt64)
		case winuser.FieldUsername, winuser.FieldAvatar, winuser.FieldRealName, winuser.FieldSignature, winuser.FieldBirthday, winuser.FieldAreaCode, winuser.FieldMobile, winuser.FieldEmail, winuser.FieldAddress, winuser.FieldPromoCode, winuser.FieldSupUsername1, winuser.FieldSupUsernameTop, winuser.FieldPasswordHash, winuser.FieldPasswordCoin, winuser.FieldIP, winuser.FieldIPRegion, winuser.FieldThirdLoginType, winuser.FieldFreezeCause, winuser.FieldOperatorName, winuser.FieldCreatedName, winuser.FieldLastLoginIP, winuser.FieldLastLoginIPRegion:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WinUser fields.
func (wu *WinUser) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case winuser.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			wu.ID = int32(value.Int64)
		case winuser.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				wu.Username = value.String
			}
		case winuser.FieldAvatar:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field avatar", values[i])
			} else if value.Valid {
				wu.Avatar = value.String
			}
		case winuser.FieldFcoin:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field fcoin", values[i])
			} else if value.Valid {
				wu.Fcoin = value.Float64
			}
		case winuser.FieldCoinCommission:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field coin_commission", values[i])
			} else if value.Valid {
				wu.CoinCommission = value.Float64
			}
		case winuser.FieldLevelID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field level_id", values[i])
			} else if value.Valid {
				wu.LevelID = int8(value.Int64)
			}
		case winuser.FieldRole:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field role", values[i])
			} else if value.Valid {
				wu.Role = int8(value.Int64)
			}
		case winuser.FieldIsPromoter:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_promoter", values[i])
			} else if value.Valid {
				wu.IsPromoter = value.Bool
			}
		case winuser.FieldFlag:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field flag", values[i])
			} else if value.Valid {
				wu.Flag = uint32(value.Int64)
			}
		case winuser.FieldRealName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field real_name", values[i])
			} else if value.Valid {
				wu.RealName = value.String
			}
		case winuser.FieldSignature:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field signature", values[i])
			} else if value.Valid {
				wu.Signature = value.String
			}
		case winuser.FieldBirthday:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field birthday", values[i])
			} else if value.Valid {
				wu.Birthday = value.String
			}
		case winuser.FieldAreaCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field area_code", values[i])
			} else if value.Valid {
				wu.AreaCode = value.String
			}
		case winuser.FieldMobile:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mobile", values[i])
			} else if value.Valid {
				wu.Mobile = value.String
			}
		case winuser.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				wu.Email = value.String
			}
		case winuser.FieldSex:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field sex", values[i])
			} else if value.Valid {
				wu.Sex = value.Bool
			}
		case winuser.FieldBindBank:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field bind_bank", values[i])
			} else if value.Valid {
				wu.BindBank = value.Bool
			}
		case winuser.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				wu.Address = value.String
			}
		case winuser.FieldScore:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field score", values[i])
			} else if value.Valid {
				wu.Score = uint32(value.Int64)
			}
		case winuser.FieldPromoCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field promo_code", values[i])
			} else if value.Valid {
				wu.PromoCode = value.String
			}
		case winuser.FieldSupUID1:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sup_uid_1", values[i])
			} else if value.Valid {
				wu.SupUID1 = uint32(value.Int64)
			}
		case winuser.FieldSupUsername1:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sup_username_1", values[i])
			} else if value.Valid {
				wu.SupUsername1 = value.String
			}
		case winuser.FieldSupUID2:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sup_uid_2", values[i])
			} else if value.Valid {
				wu.SupUID2 = uint32(value.Int64)
			}
		case winuser.FieldSupUID3:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sup_uid_3", values[i])
			} else if value.Valid {
				wu.SupUID3 = uint32(value.Int64)
			}
		case winuser.FieldSupUID4:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sup_uid_4", values[i])
			} else if value.Valid {
				wu.SupUID4 = uint32(value.Int64)
			}
		case winuser.FieldSupUID5:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sup_uid_5", values[i])
			} else if value.Valid {
				wu.SupUID5 = uint32(value.Int64)
			}
		case winuser.FieldSupUID6:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sup_uid_6", values[i])
			} else if value.Valid {
				wu.SupUID6 = uint32(value.Int64)
			}
		case winuser.FieldSupUIDTop:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sup_uid_top", values[i])
			} else if value.Valid {
				wu.SupUIDTop = int32(value.Int64)
			}
		case winuser.FieldSupUsernameTop:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sup_username_top", values[i])
			} else if value.Valid {
				wu.SupUsernameTop = value.String
			}
		case winuser.FieldSupLevelTop:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sup_level_top", values[i])
			} else if value.Valid {
				wu.SupLevelTop = int32(value.Int64)
			}
		case winuser.FieldPasswordHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password_hash", values[i])
			} else if value.Valid {
				wu.PasswordHash = value.String
			}
		case winuser.FieldPasswordCoin:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password_coin", values[i])
			} else if value.Valid {
				wu.PasswordCoin = value.String
			}
		case winuser.FieldIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip", values[i])
			} else if value.Valid {
				wu.IP = value.String
			}
		case winuser.FieldIPRegion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip_region", values[i])
			} else if value.Valid {
				wu.IPRegion = value.String
			}
		case winuser.FieldThirdLoginType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field third_login_type", values[i])
			} else if value.Valid {
				wu.ThirdLoginType = value.String
			}
		case winuser.FieldFreezeCause:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field freeze_cause", values[i])
			} else if value.Valid {
				wu.FreezeCause = value.String
			}
		case winuser.FieldFreezeAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field freeze_at", values[i])
			} else if value.Valid {
				wu.FreezeAt = int32(value.Int64)
			}
		case winuser.FieldOperatorName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field operator_name", values[i])
			} else if value.Valid {
				wu.OperatorName = value.String
			}
		case winuser.FieldCreatedName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_name", values[i])
			} else if value.Valid {
				wu.CreatedName = value.String
			}
		case winuser.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				wu.Status = int8(value.Int64)
			}
		case winuser.FieldLastLoginIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_login_ip", values[i])
			} else if value.Valid {
				wu.LastLoginIP = value.String
			}
		case winuser.FieldLastLoginIPRegion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_login_ip_region", values[i])
			} else if value.Valid {
				wu.LastLoginIPRegion = value.String
			}
		case winuser.FieldLastLoginTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field last_login_time", values[i])
			} else if value.Valid {
				wu.LastLoginTime = int32(value.Int64)
			}
		case winuser.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				wu.CreatedAt = int32(value.Int64)
			}
		case winuser.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				wu.UpdatedAt = int32(value.Int64)
			}
		default:
			wu.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the WinUser.
// This includes values selected through modifiers, order, etc.
func (wu *WinUser) Value(name string) (ent.Value, error) {
	return wu.selectValues.Get(name)
}

// Update returns a builder for updating this WinUser.
// Note that you need to call WinUser.Unwrap() before calling this method if this WinUser
// was returned from a transaction, and the transaction was committed or rolled back.
func (wu *WinUser) Update() *WinUserUpdateOne {
	return NewWinUserClient(wu.config).UpdateOne(wu)
}

// Unwrap unwraps the WinUser entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (wu *WinUser) Unwrap() *WinUser {
	_tx, ok := wu.config.driver.(*txDriver)
	if !ok {
		panic("ent: WinUser is not a transactional entity")
	}
	wu.config.driver = _tx.drv
	return wu
}

// String implements the fmt.Stringer.
func (wu *WinUser) String() string {
	var builder strings.Builder
	builder.WriteString("WinUser(")
	builder.WriteString(fmt.Sprintf("id=%v, ", wu.ID))
	builder.WriteString("username=")
	builder.WriteString(wu.Username)
	builder.WriteString(", ")
	builder.WriteString("avatar=")
	builder.WriteString(wu.Avatar)
	builder.WriteString(", ")
	builder.WriteString("fcoin=")
	builder.WriteString(fmt.Sprintf("%v", wu.Fcoin))
	builder.WriteString(", ")
	builder.WriteString("coin_commission=")
	builder.WriteString(fmt.Sprintf("%v", wu.CoinCommission))
	builder.WriteString(", ")
	builder.WriteString("level_id=")
	builder.WriteString(fmt.Sprintf("%v", wu.LevelID))
	builder.WriteString(", ")
	builder.WriteString("role=")
	builder.WriteString(fmt.Sprintf("%v", wu.Role))
	builder.WriteString(", ")
	builder.WriteString("is_promoter=")
	builder.WriteString(fmt.Sprintf("%v", wu.IsPromoter))
	builder.WriteString(", ")
	builder.WriteString("flag=")
	builder.WriteString(fmt.Sprintf("%v", wu.Flag))
	builder.WriteString(", ")
	builder.WriteString("real_name=")
	builder.WriteString(wu.RealName)
	builder.WriteString(", ")
	builder.WriteString("signature=")
	builder.WriteString(wu.Signature)
	builder.WriteString(", ")
	builder.WriteString("birthday=")
	builder.WriteString(wu.Birthday)
	builder.WriteString(", ")
	builder.WriteString("area_code=")
	builder.WriteString(wu.AreaCode)
	builder.WriteString(", ")
	builder.WriteString("mobile=")
	builder.WriteString(wu.Mobile)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(wu.Email)
	builder.WriteString(", ")
	builder.WriteString("sex=")
	builder.WriteString(fmt.Sprintf("%v", wu.Sex))
	builder.WriteString(", ")
	builder.WriteString("bind_bank=")
	builder.WriteString(fmt.Sprintf("%v", wu.BindBank))
	builder.WriteString(", ")
	builder.WriteString("address=")
	builder.WriteString(wu.Address)
	builder.WriteString(", ")
	builder.WriteString("score=")
	builder.WriteString(fmt.Sprintf("%v", wu.Score))
	builder.WriteString(", ")
	builder.WriteString("promo_code=")
	builder.WriteString(wu.PromoCode)
	builder.WriteString(", ")
	builder.WriteString("sup_uid_1=")
	builder.WriteString(fmt.Sprintf("%v", wu.SupUID1))
	builder.WriteString(", ")
	builder.WriteString("sup_username_1=")
	builder.WriteString(wu.SupUsername1)
	builder.WriteString(", ")
	builder.WriteString("sup_uid_2=")
	builder.WriteString(fmt.Sprintf("%v", wu.SupUID2))
	builder.WriteString(", ")
	builder.WriteString("sup_uid_3=")
	builder.WriteString(fmt.Sprintf("%v", wu.SupUID3))
	builder.WriteString(", ")
	builder.WriteString("sup_uid_4=")
	builder.WriteString(fmt.Sprintf("%v", wu.SupUID4))
	builder.WriteString(", ")
	builder.WriteString("sup_uid_5=")
	builder.WriteString(fmt.Sprintf("%v", wu.SupUID5))
	builder.WriteString(", ")
	builder.WriteString("sup_uid_6=")
	builder.WriteString(fmt.Sprintf("%v", wu.SupUID6))
	builder.WriteString(", ")
	builder.WriteString("sup_uid_top=")
	builder.WriteString(fmt.Sprintf("%v", wu.SupUIDTop))
	builder.WriteString(", ")
	builder.WriteString("sup_username_top=")
	builder.WriteString(wu.SupUsernameTop)
	builder.WriteString(", ")
	builder.WriteString("sup_level_top=")
	builder.WriteString(fmt.Sprintf("%v", wu.SupLevelTop))
	builder.WriteString(", ")
	builder.WriteString("password_hash=")
	builder.WriteString(wu.PasswordHash)
	builder.WriteString(", ")
	builder.WriteString("password_coin=")
	builder.WriteString(wu.PasswordCoin)
	builder.WriteString(", ")
	builder.WriteString("ip=")
	builder.WriteString(wu.IP)
	builder.WriteString(", ")
	builder.WriteString("ip_region=")
	builder.WriteString(wu.IPRegion)
	builder.WriteString(", ")
	builder.WriteString("third_login_type=")
	builder.WriteString(wu.ThirdLoginType)
	builder.WriteString(", ")
	builder.WriteString("freeze_cause=")
	builder.WriteString(wu.FreezeCause)
	builder.WriteString(", ")
	builder.WriteString("freeze_at=")
	builder.WriteString(fmt.Sprintf("%v", wu.FreezeAt))
	builder.WriteString(", ")
	builder.WriteString("operator_name=")
	builder.WriteString(wu.OperatorName)
	builder.WriteString(", ")
	builder.WriteString("created_name=")
	builder.WriteString(wu.CreatedName)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", wu.Status))
	builder.WriteString(", ")
	builder.WriteString("last_login_ip=")
	builder.WriteString(wu.LastLoginIP)
	builder.WriteString(", ")
	builder.WriteString("last_login_ip_region=")
	builder.WriteString(wu.LastLoginIPRegion)
	builder.WriteString(", ")
	builder.WriteString("last_login_time=")
	builder.WriteString(fmt.Sprintf("%v", wu.LastLoginTime))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", wu.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", wu.UpdatedAt))
	builder.WriteByte(')')
	return builder.String()
}

// WinUsers is a parsable slice of WinUser.
type WinUsers []*WinUser
