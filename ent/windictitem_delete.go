// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.skig.tech/zero-core/common/ent/predicate"
	"gitlab.skig.tech/zero-core/common/ent/windictitem"
)

// WinDictItemDelete is the builder for deleting a WinDictItem entity.
type WinDictItemDelete struct {
	config
	hooks    []Hook
	mutation *WinDictItemMutation
}

// Where appends a list predicates to the WinDictItemDelete builder.
func (wdid *WinDictItemDelete) Where(ps ...predicate.WinDictItem) *WinDictItemDelete {
	wdid.mutation.Where(ps...)
	return wdid
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (wdid *WinDictItemDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, wdid.sqlExec, wdid.mutation, wdid.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (wdid *WinDictItemDelete) ExecX(ctx context.Context) int {
	n, err := wdid.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (wdid *WinDictItemDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(windictitem.Table, sqlgraph.NewFieldSpec(windictitem.FieldID, field.TypeInt32))
	if ps := wdid.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, wdid.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	wdid.mutation.done = true
	return affected, err
}

// WinDictItemDeleteOne is the builder for deleting a single WinDictItem entity.
type WinDictItemDeleteOne struct {
	wdid *WinDictItemDelete
}

// Where appends a list predicates to the WinDictItemDelete builder.
func (wdido *WinDictItemDeleteOne) Where(ps ...predicate.WinDictItem) *WinDictItemDeleteOne {
	wdido.wdid.mutation.Where(ps...)
	return wdido
}

// Exec executes the deletion query.
func (wdido *WinDictItemDeleteOne) Exec(ctx context.Context) error {
	n, err := wdido.wdid.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{windictitem.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (wdido *WinDictItemDeleteOne) ExecX(ctx context.Context) {
	if err := wdido.Exec(ctx); err != nil {
		panic(err)
	}
}
