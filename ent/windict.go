// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"gitlab.skig.tech/zero-core/common/ent/windict"
)

// WinDict is the model entity for the WinDict schema.
type WinDict struct {
	config `json:"-"`
	// ID of the ent.
	ID int32 `json:"id,omitempty"`
	// 名称
	Title string `json:"title,omitempty"`
	// 种类
	Category string `json:"category,omitempty"`
	// 状态:1-启用 0-禁用
	Status bool `json:"status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt int32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt    int32 `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WinDict) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case windict.FieldStatus:
			values[i] = new(sql.NullBool)
		case windict.FieldID, windict.FieldCreatedAt, windict.FieldUpdatedAt:
			values[i] = new(sql.NullInt64)
		case windict.FieldTitle, windict.FieldCategory:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WinDict fields.
func (wd *WinDict) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case windict.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			wd.ID = int32(value.Int64)
		case windict.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				wd.Title = value.String
			}
		case windict.FieldCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value.Valid {
				wd.Category = value.String
			}
		case windict.FieldStatus:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				wd.Status = value.Bool
			}
		case windict.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				wd.CreatedAt = int32(value.Int64)
			}
		case windict.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				wd.UpdatedAt = int32(value.Int64)
			}
		default:
			wd.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the WinDict.
// This includes values selected through modifiers, order, etc.
func (wd *WinDict) Value(name string) (ent.Value, error) {
	return wd.selectValues.Get(name)
}

// Update returns a builder for updating this WinDict.
// Note that you need to call WinDict.Unwrap() before calling this method if this WinDict
// was returned from a transaction, and the transaction was committed or rolled back.
func (wd *WinDict) Update() *WinDictUpdateOne {
	return NewWinDictClient(wd.config).UpdateOne(wd)
}

// Unwrap unwraps the WinDict entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (wd *WinDict) Unwrap() *WinDict {
	_tx, ok := wd.config.driver.(*txDriver)
	if !ok {
		panic("ent: WinDict is not a transactional entity")
	}
	wd.config.driver = _tx.drv
	return wd
}

// String implements the fmt.Stringer.
func (wd *WinDict) String() string {
	var builder strings.Builder
	builder.WriteString("WinDict(")
	builder.WriteString(fmt.Sprintf("id=%v, ", wd.ID))
	builder.WriteString("title=")
	builder.WriteString(wd.Title)
	builder.WriteString(", ")
	builder.WriteString("category=")
	builder.WriteString(wd.Category)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", wd.Status))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", wd.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", wd.UpdatedAt))
	builder.WriteByte(')')
	return builder.String()
}

// WinDicts is a parsable slice of WinDict.
type WinDicts []*WinDict
