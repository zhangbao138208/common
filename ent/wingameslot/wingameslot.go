// Code generated by ent, DO NOT EDIT.

package wingameslot

import (
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the wingameslot type in the database.
	Label = "win_game_slot"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldGameID holds the string denoting the game_id field in the database.
	FieldGameID = "game_id"
	// FieldGameGroupID holds the string denoting the game_group_id field in the database.
	FieldGameGroupID = "game_group_id"
	// FieldPlatID holds the string denoting the plat_id field in the database.
	FieldPlatID = "plat_id"
	// FieldProvider holds the string denoting the provider field in the database.
	FieldProvider = "provider"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldNameZh holds the string denoting the name_zh field in the database.
	FieldNameZh = "name_zh"
	// FieldImg holds the string denoting the img field in the database.
	FieldImg = "img"
	// FieldImgNew holds the string denoting the img_new field in the database.
	FieldImgNew = "img_new"
	// FieldIsNew holds the string denoting the is_new field in the database.
	FieldIsNew = "is_new"
	// FieldIsCasino holds the string denoting the is_casino field in the database.
	FieldIsCasino = "is_casino"
	// FieldGameTypeID holds the string denoting the game_type_id field in the database.
	FieldGameTypeID = "game_type_id"
	// FieldGameTypeName holds the string denoting the game_type_name field in the database.
	FieldGameTypeName = "game_type_name"
	// FieldFavoriteStar holds the string denoting the favorite_star field in the database.
	FieldFavoriteStar = "favorite_star"
	// FieldHotStar holds the string denoting the hot_star field in the database.
	FieldHotStar = "hot_star"
	// FieldSort holds the string denoting the sort field in the database.
	FieldSort = "sort"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldDevice holds the string denoting the device field in the database.
	FieldDevice = "device"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldUpdatedUser holds the string denoting the updated_user field in the database.
	FieldUpdatedUser = "updated_user"
	// FieldMaintenance holds the string denoting the maintenance field in the database.
	FieldMaintenance = "maintenance"
	// FieldOperatorName holds the string denoting the operator_name field in the database.
	FieldOperatorName = "operator_name"
	// Table holds the table name of the wingameslot in the database.
	Table = "win_game_slot"
)

// Columns holds all SQL columns for wingameslot fields.
var Columns = []string{
	FieldID,
	FieldGameID,
	FieldGameGroupID,
	FieldPlatID,
	FieldProvider,
	FieldName,
	FieldNameZh,
	FieldImg,
	FieldImgNew,
	FieldIsNew,
	FieldIsCasino,
	FieldGameTypeID,
	FieldGameTypeName,
	FieldFavoriteStar,
	FieldHotStar,
	FieldSort,
	FieldStatus,
	FieldDevice,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldUpdatedUser,
	FieldMaintenance,
	FieldOperatorName,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "gitlab.skig.tech/zero-core/common/ent/runtime"
var (
	Interceptors [1]ent.Interceptor
)

// OrderOption defines the ordering options for the WinGameSlot queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByGameID orders the results by the game_id field.
func ByGameID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGameID, opts...).ToFunc()
}

// ByGameGroupID orders the results by the game_group_id field.
func ByGameGroupID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGameGroupID, opts...).ToFunc()
}

// ByPlatID orders the results by the plat_id field.
func ByPlatID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPlatID, opts...).ToFunc()
}

// ByProvider orders the results by the provider field.
func ByProvider(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProvider, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByNameZh orders the results by the name_zh field.
func ByNameZh(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNameZh, opts...).ToFunc()
}

// ByImg orders the results by the img field.
func ByImg(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImg, opts...).ToFunc()
}

// ByImgNew orders the results by the img_new field.
func ByImgNew(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImgNew, opts...).ToFunc()
}

// ByIsNew orders the results by the is_new field.
func ByIsNew(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsNew, opts...).ToFunc()
}

// ByIsCasino orders the results by the is_casino field.
func ByIsCasino(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsCasino, opts...).ToFunc()
}

// ByGameTypeID orders the results by the game_type_id field.
func ByGameTypeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGameTypeID, opts...).ToFunc()
}

// ByGameTypeName orders the results by the game_type_name field.
func ByGameTypeName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGameTypeName, opts...).ToFunc()
}

// ByFavoriteStar orders the results by the favorite_star field.
func ByFavoriteStar(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFavoriteStar, opts...).ToFunc()
}

// ByHotStar orders the results by the hot_star field.
func ByHotStar(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHotStar, opts...).ToFunc()
}

// BySort orders the results by the sort field.
func BySort(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSort, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByDevice orders the results by the device field.
func ByDevice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDevice, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByUpdatedUser orders the results by the updated_user field.
func ByUpdatedUser(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedUser, opts...).ToFunc()
}

// ByMaintenance orders the results by the maintenance field.
func ByMaintenance(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMaintenance, opts...).ToFunc()
}

// ByOperatorName orders the results by the operator_name field.
func ByOperatorName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOperatorName, opts...).ToFunc()
}
