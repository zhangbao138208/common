// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.skig.tech/zero-core/common/ent/predicate"
	"gitlab.skig.tech/zero-core/common/ent/winbetslipsdetail"
)

// WinBetslipsDetailUpdate is the builder for updating WinBetslipsDetail entities.
type WinBetslipsDetailUpdate struct {
	config
	hooks    []Hook
	mutation *WinBetslipsDetailMutation
}

// Where appends a list predicates to the WinBetslipsDetailUpdate builder.
func (wbdu *WinBetslipsDetailUpdate) Where(ps ...predicate.WinBetslipsDetail) *WinBetslipsDetailUpdate {
	wbdu.mutation.Where(ps...)
	return wbdu
}

// SetXbUID sets the "xb_uid" field.
func (wbdu *WinBetslipsDetailUpdate) SetXbUID(u uint32) *WinBetslipsDetailUpdate {
	wbdu.mutation.ResetXbUID()
	wbdu.mutation.SetXbUID(u)
	return wbdu
}

// AddXbUID adds u to the "xb_uid" field.
func (wbdu *WinBetslipsDetailUpdate) AddXbUID(u int32) *WinBetslipsDetailUpdate {
	wbdu.mutation.AddXbUID(u)
	return wbdu
}

// SetXbUsername sets the "xb_username" field.
func (wbdu *WinBetslipsDetailUpdate) SetXbUsername(s string) *WinBetslipsDetailUpdate {
	wbdu.mutation.SetXbUsername(s)
	return wbdu
}

// SetBetJSON sets the "bet_json" field.
func (wbdu *WinBetslipsDetailUpdate) SetBetJSON(s string) *WinBetslipsDetailUpdate {
	wbdu.mutation.SetBetJSON(s)
	return wbdu
}

// SetNillableBetJSON sets the "bet_json" field if the given value is not nil.
func (wbdu *WinBetslipsDetailUpdate) SetNillableBetJSON(s *string) *WinBetslipsDetailUpdate {
	if s != nil {
		wbdu.SetBetJSON(*s)
	}
	return wbdu
}

// ClearBetJSON clears the value of the "bet_json" field.
func (wbdu *WinBetslipsDetailUpdate) ClearBetJSON() *WinBetslipsDetailUpdate {
	wbdu.mutation.ClearBetJSON()
	return wbdu
}

// SetRewardJSON sets the "reward_json" field.
func (wbdu *WinBetslipsDetailUpdate) SetRewardJSON(s string) *WinBetslipsDetailUpdate {
	wbdu.mutation.SetRewardJSON(s)
	return wbdu
}

// SetNillableRewardJSON sets the "reward_json" field if the given value is not nil.
func (wbdu *WinBetslipsDetailUpdate) SetNillableRewardJSON(s *string) *WinBetslipsDetailUpdate {
	if s != nil {
		wbdu.SetRewardJSON(*s)
	}
	return wbdu
}

// ClearRewardJSON clears the value of the "reward_json" field.
func (wbdu *WinBetslipsDetailUpdate) ClearRewardJSON() *WinBetslipsDetailUpdate {
	wbdu.mutation.ClearRewardJSON()
	return wbdu
}

// SetRefundJSON sets the "refund_json" field.
func (wbdu *WinBetslipsDetailUpdate) SetRefundJSON(s string) *WinBetslipsDetailUpdate {
	wbdu.mutation.SetRefundJSON(s)
	return wbdu
}

// SetNillableRefundJSON sets the "refund_json" field if the given value is not nil.
func (wbdu *WinBetslipsDetailUpdate) SetNillableRefundJSON(s *string) *WinBetslipsDetailUpdate {
	if s != nil {
		wbdu.SetRefundJSON(*s)
	}
	return wbdu
}

// ClearRefundJSON clears the value of the "refund_json" field.
func (wbdu *WinBetslipsDetailUpdate) ClearRefundJSON() *WinBetslipsDetailUpdate {
	wbdu.mutation.ClearRefundJSON()
	return wbdu
}

// Mutation returns the WinBetslipsDetailMutation object of the builder.
func (wbdu *WinBetslipsDetailUpdate) Mutation() *WinBetslipsDetailMutation {
	return wbdu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wbdu *WinBetslipsDetailUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, wbdu.sqlSave, wbdu.mutation, wbdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wbdu *WinBetslipsDetailUpdate) SaveX(ctx context.Context) int {
	affected, err := wbdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wbdu *WinBetslipsDetailUpdate) Exec(ctx context.Context) error {
	_, err := wbdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wbdu *WinBetslipsDetailUpdate) ExecX(ctx context.Context) {
	if err := wbdu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wbdu *WinBetslipsDetailUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(winbetslipsdetail.Table, winbetslipsdetail.Columns, sqlgraph.NewFieldSpec(winbetslipsdetail.FieldID, field.TypeInt))
	if ps := wbdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wbdu.mutation.XbUID(); ok {
		_spec.SetField(winbetslipsdetail.FieldXbUID, field.TypeUint32, value)
	}
	if value, ok := wbdu.mutation.AddedXbUID(); ok {
		_spec.AddField(winbetslipsdetail.FieldXbUID, field.TypeUint32, value)
	}
	if value, ok := wbdu.mutation.XbUsername(); ok {
		_spec.SetField(winbetslipsdetail.FieldXbUsername, field.TypeString, value)
	}
	if value, ok := wbdu.mutation.BetJSON(); ok {
		_spec.SetField(winbetslipsdetail.FieldBetJSON, field.TypeString, value)
	}
	if wbdu.mutation.BetJSONCleared() {
		_spec.ClearField(winbetslipsdetail.FieldBetJSON, field.TypeString)
	}
	if value, ok := wbdu.mutation.RewardJSON(); ok {
		_spec.SetField(winbetslipsdetail.FieldRewardJSON, field.TypeString, value)
	}
	if wbdu.mutation.RewardJSONCleared() {
		_spec.ClearField(winbetslipsdetail.FieldRewardJSON, field.TypeString)
	}
	if value, ok := wbdu.mutation.RefundJSON(); ok {
		_spec.SetField(winbetslipsdetail.FieldRefundJSON, field.TypeString, value)
	}
	if wbdu.mutation.RefundJSONCleared() {
		_spec.ClearField(winbetslipsdetail.FieldRefundJSON, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wbdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{winbetslipsdetail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wbdu.mutation.done = true
	return n, nil
}

// WinBetslipsDetailUpdateOne is the builder for updating a single WinBetslipsDetail entity.
type WinBetslipsDetailUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WinBetslipsDetailMutation
}

// SetXbUID sets the "xb_uid" field.
func (wbduo *WinBetslipsDetailUpdateOne) SetXbUID(u uint32) *WinBetslipsDetailUpdateOne {
	wbduo.mutation.ResetXbUID()
	wbduo.mutation.SetXbUID(u)
	return wbduo
}

// AddXbUID adds u to the "xb_uid" field.
func (wbduo *WinBetslipsDetailUpdateOne) AddXbUID(u int32) *WinBetslipsDetailUpdateOne {
	wbduo.mutation.AddXbUID(u)
	return wbduo
}

// SetXbUsername sets the "xb_username" field.
func (wbduo *WinBetslipsDetailUpdateOne) SetXbUsername(s string) *WinBetslipsDetailUpdateOne {
	wbduo.mutation.SetXbUsername(s)
	return wbduo
}

// SetBetJSON sets the "bet_json" field.
func (wbduo *WinBetslipsDetailUpdateOne) SetBetJSON(s string) *WinBetslipsDetailUpdateOne {
	wbduo.mutation.SetBetJSON(s)
	return wbduo
}

// SetNillableBetJSON sets the "bet_json" field if the given value is not nil.
func (wbduo *WinBetslipsDetailUpdateOne) SetNillableBetJSON(s *string) *WinBetslipsDetailUpdateOne {
	if s != nil {
		wbduo.SetBetJSON(*s)
	}
	return wbduo
}

// ClearBetJSON clears the value of the "bet_json" field.
func (wbduo *WinBetslipsDetailUpdateOne) ClearBetJSON() *WinBetslipsDetailUpdateOne {
	wbduo.mutation.ClearBetJSON()
	return wbduo
}

// SetRewardJSON sets the "reward_json" field.
func (wbduo *WinBetslipsDetailUpdateOne) SetRewardJSON(s string) *WinBetslipsDetailUpdateOne {
	wbduo.mutation.SetRewardJSON(s)
	return wbduo
}

// SetNillableRewardJSON sets the "reward_json" field if the given value is not nil.
func (wbduo *WinBetslipsDetailUpdateOne) SetNillableRewardJSON(s *string) *WinBetslipsDetailUpdateOne {
	if s != nil {
		wbduo.SetRewardJSON(*s)
	}
	return wbduo
}

// ClearRewardJSON clears the value of the "reward_json" field.
func (wbduo *WinBetslipsDetailUpdateOne) ClearRewardJSON() *WinBetslipsDetailUpdateOne {
	wbduo.mutation.ClearRewardJSON()
	return wbduo
}

// SetRefundJSON sets the "refund_json" field.
func (wbduo *WinBetslipsDetailUpdateOne) SetRefundJSON(s string) *WinBetslipsDetailUpdateOne {
	wbduo.mutation.SetRefundJSON(s)
	return wbduo
}

// SetNillableRefundJSON sets the "refund_json" field if the given value is not nil.
func (wbduo *WinBetslipsDetailUpdateOne) SetNillableRefundJSON(s *string) *WinBetslipsDetailUpdateOne {
	if s != nil {
		wbduo.SetRefundJSON(*s)
	}
	return wbduo
}

// ClearRefundJSON clears the value of the "refund_json" field.
func (wbduo *WinBetslipsDetailUpdateOne) ClearRefundJSON() *WinBetslipsDetailUpdateOne {
	wbduo.mutation.ClearRefundJSON()
	return wbduo
}

// Mutation returns the WinBetslipsDetailMutation object of the builder.
func (wbduo *WinBetslipsDetailUpdateOne) Mutation() *WinBetslipsDetailMutation {
	return wbduo.mutation
}

// Where appends a list predicates to the WinBetslipsDetailUpdate builder.
func (wbduo *WinBetslipsDetailUpdateOne) Where(ps ...predicate.WinBetslipsDetail) *WinBetslipsDetailUpdateOne {
	wbduo.mutation.Where(ps...)
	return wbduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wbduo *WinBetslipsDetailUpdateOne) Select(field string, fields ...string) *WinBetslipsDetailUpdateOne {
	wbduo.fields = append([]string{field}, fields...)
	return wbduo
}

// Save executes the query and returns the updated WinBetslipsDetail entity.
func (wbduo *WinBetslipsDetailUpdateOne) Save(ctx context.Context) (*WinBetslipsDetail, error) {
	return withHooks(ctx, wbduo.sqlSave, wbduo.mutation, wbduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wbduo *WinBetslipsDetailUpdateOne) SaveX(ctx context.Context) *WinBetslipsDetail {
	node, err := wbduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wbduo *WinBetslipsDetailUpdateOne) Exec(ctx context.Context) error {
	_, err := wbduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wbduo *WinBetslipsDetailUpdateOne) ExecX(ctx context.Context) {
	if err := wbduo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wbduo *WinBetslipsDetailUpdateOne) sqlSave(ctx context.Context) (_node *WinBetslipsDetail, err error) {
	_spec := sqlgraph.NewUpdateSpec(winbetslipsdetail.Table, winbetslipsdetail.Columns, sqlgraph.NewFieldSpec(winbetslipsdetail.FieldID, field.TypeInt))
	id, ok := wbduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WinBetslipsDetail.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wbduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, winbetslipsdetail.FieldID)
		for _, f := range fields {
			if !winbetslipsdetail.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != winbetslipsdetail.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wbduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wbduo.mutation.XbUID(); ok {
		_spec.SetField(winbetslipsdetail.FieldXbUID, field.TypeUint32, value)
	}
	if value, ok := wbduo.mutation.AddedXbUID(); ok {
		_spec.AddField(winbetslipsdetail.FieldXbUID, field.TypeUint32, value)
	}
	if value, ok := wbduo.mutation.XbUsername(); ok {
		_spec.SetField(winbetslipsdetail.FieldXbUsername, field.TypeString, value)
	}
	if value, ok := wbduo.mutation.BetJSON(); ok {
		_spec.SetField(winbetslipsdetail.FieldBetJSON, field.TypeString, value)
	}
	if wbduo.mutation.BetJSONCleared() {
		_spec.ClearField(winbetslipsdetail.FieldBetJSON, field.TypeString)
	}
	if value, ok := wbduo.mutation.RewardJSON(); ok {
		_spec.SetField(winbetslipsdetail.FieldRewardJSON, field.TypeString, value)
	}
	if wbduo.mutation.RewardJSONCleared() {
		_spec.ClearField(winbetslipsdetail.FieldRewardJSON, field.TypeString)
	}
	if value, ok := wbduo.mutation.RefundJSON(); ok {
		_spec.SetField(winbetslipsdetail.FieldRefundJSON, field.TypeString, value)
	}
	if wbduo.mutation.RefundJSONCleared() {
		_spec.ClearField(winbetslipsdetail.FieldRefundJSON, field.TypeString)
	}
	_node = &WinBetslipsDetail{config: wbduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wbduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{winbetslipsdetail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wbduo.mutation.done = true
	return _node, nil
}
