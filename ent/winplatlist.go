// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"gitlab.skig.tech/zero-core/common/ent/winplatlist"
)

// WinPlatList is the model entity for the WinPlatList schema.
type WinPlatList struct {
	config `json:"-"`
	// ID of the ent.
	ID int32 `json:"id,omitempty"`
	// 平台编码
	Code string `json:"code,omitempty"`
	// 平台名称
	Name string `json:"name,omitempty"`
	// 配置信息
	Config string `json:"config,omitempty"`
	// 费率
	Rate string `json:"rate,omitempty"`
	// 排序(从高到底、ID降序)
	Sort int8 `json:"sort,omitempty"`
	// 状态: 1-启用 0-停用
	Status int8 `json:"status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt int32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt    int32 `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WinPlatList) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case winplatlist.FieldID, winplatlist.FieldSort, winplatlist.FieldStatus, winplatlist.FieldCreatedAt, winplatlist.FieldUpdatedAt:
			values[i] = new(sql.NullInt64)
		case winplatlist.FieldCode, winplatlist.FieldName, winplatlist.FieldConfig, winplatlist.FieldRate:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WinPlatList fields.
func (wpl *WinPlatList) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case winplatlist.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			wpl.ID = int32(value.Int64)
		case winplatlist.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				wpl.Code = value.String
			}
		case winplatlist.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				wpl.Name = value.String
			}
		case winplatlist.FieldConfig:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field config", values[i])
			} else if value.Valid {
				wpl.Config = value.String
			}
		case winplatlist.FieldRate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field rate", values[i])
			} else if value.Valid {
				wpl.Rate = value.String
			}
		case winplatlist.FieldSort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sort", values[i])
			} else if value.Valid {
				wpl.Sort = int8(value.Int64)
			}
		case winplatlist.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				wpl.Status = int8(value.Int64)
			}
		case winplatlist.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				wpl.CreatedAt = int32(value.Int64)
			}
		case winplatlist.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				wpl.UpdatedAt = int32(value.Int64)
			}
		default:
			wpl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the WinPlatList.
// This includes values selected through modifiers, order, etc.
func (wpl *WinPlatList) Value(name string) (ent.Value, error) {
	return wpl.selectValues.Get(name)
}

// Update returns a builder for updating this WinPlatList.
// Note that you need to call WinPlatList.Unwrap() before calling this method if this WinPlatList
// was returned from a transaction, and the transaction was committed or rolled back.
func (wpl *WinPlatList) Update() *WinPlatListUpdateOne {
	return NewWinPlatListClient(wpl.config).UpdateOne(wpl)
}

// Unwrap unwraps the WinPlatList entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (wpl *WinPlatList) Unwrap() *WinPlatList {
	_tx, ok := wpl.config.driver.(*txDriver)
	if !ok {
		panic("ent: WinPlatList is not a transactional entity")
	}
	wpl.config.driver = _tx.drv
	return wpl
}

// String implements the fmt.Stringer.
func (wpl *WinPlatList) String() string {
	var builder strings.Builder
	builder.WriteString("WinPlatList(")
	builder.WriteString(fmt.Sprintf("id=%v, ", wpl.ID))
	builder.WriteString("code=")
	builder.WriteString(wpl.Code)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(wpl.Name)
	builder.WriteString(", ")
	builder.WriteString("config=")
	builder.WriteString(wpl.Config)
	builder.WriteString(", ")
	builder.WriteString("rate=")
	builder.WriteString(wpl.Rate)
	builder.WriteString(", ")
	builder.WriteString("sort=")
	builder.WriteString(fmt.Sprintf("%v", wpl.Sort))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", wpl.Status))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", wpl.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", wpl.UpdatedAt))
	builder.WriteByte(')')
	return builder.String()
}

// WinPlatLists is a parsable slice of WinPlatList.
type WinPlatLists []*WinPlatList
