// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"gitlab.skig.tech/zero-core/common/ent/windictitem"
)

// WinDictItem is the model entity for the WinDictItem schema.
type WinDictItem struct {
	config `json:"-"`
	// ID of the ent.
	ID int32 `json:"id,omitempty"`
	// 字典码
	Code string `json:"code,omitempty"`
	// 字典名称
	Title string `json:"title,omitempty"`
	// 备注
	Remark string `json:"remark,omitempty"`
	// 排序:从高到低
	Sort int32 `json:"sort,omitempty"`
	// 字典表ID
	ReferID int32 `json:"refer_id,omitempty"`
	// 状态:1-启用 0-禁用
	Status bool `json:"status,omitempty"`
	// 类型:0-全部 1-前端 2-后台
	IsShow int8 `json:"is_show,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt int32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt    int32 `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WinDictItem) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case windictitem.FieldStatus:
			values[i] = new(sql.NullBool)
		case windictitem.FieldID, windictitem.FieldSort, windictitem.FieldReferID, windictitem.FieldIsShow, windictitem.FieldCreatedAt, windictitem.FieldUpdatedAt:
			values[i] = new(sql.NullInt64)
		case windictitem.FieldCode, windictitem.FieldTitle, windictitem.FieldRemark:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WinDictItem fields.
func (wdi *WinDictItem) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case windictitem.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			wdi.ID = int32(value.Int64)
		case windictitem.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				wdi.Code = value.String
			}
		case windictitem.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				wdi.Title = value.String
			}
		case windictitem.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				wdi.Remark = value.String
			}
		case windictitem.FieldSort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sort", values[i])
			} else if value.Valid {
				wdi.Sort = int32(value.Int64)
			}
		case windictitem.FieldReferID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field refer_id", values[i])
			} else if value.Valid {
				wdi.ReferID = int32(value.Int64)
			}
		case windictitem.FieldStatus:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				wdi.Status = value.Bool
			}
		case windictitem.FieldIsShow:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_show", values[i])
			} else if value.Valid {
				wdi.IsShow = int8(value.Int64)
			}
		case windictitem.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				wdi.CreatedAt = int32(value.Int64)
			}
		case windictitem.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				wdi.UpdatedAt = int32(value.Int64)
			}
		default:
			wdi.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the WinDictItem.
// This includes values selected through modifiers, order, etc.
func (wdi *WinDictItem) Value(name string) (ent.Value, error) {
	return wdi.selectValues.Get(name)
}

// Update returns a builder for updating this WinDictItem.
// Note that you need to call WinDictItem.Unwrap() before calling this method if this WinDictItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (wdi *WinDictItem) Update() *WinDictItemUpdateOne {
	return NewWinDictItemClient(wdi.config).UpdateOne(wdi)
}

// Unwrap unwraps the WinDictItem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (wdi *WinDictItem) Unwrap() *WinDictItem {
	_tx, ok := wdi.config.driver.(*txDriver)
	if !ok {
		panic("ent: WinDictItem is not a transactional entity")
	}
	wdi.config.driver = _tx.drv
	return wdi
}

// String implements the fmt.Stringer.
func (wdi *WinDictItem) String() string {
	var builder strings.Builder
	builder.WriteString("WinDictItem(")
	builder.WriteString(fmt.Sprintf("id=%v, ", wdi.ID))
	builder.WriteString("code=")
	builder.WriteString(wdi.Code)
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(wdi.Title)
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(wdi.Remark)
	builder.WriteString(", ")
	builder.WriteString("sort=")
	builder.WriteString(fmt.Sprintf("%v", wdi.Sort))
	builder.WriteString(", ")
	builder.WriteString("refer_id=")
	builder.WriteString(fmt.Sprintf("%v", wdi.ReferID))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", wdi.Status))
	builder.WriteString(", ")
	builder.WriteString("is_show=")
	builder.WriteString(fmt.Sprintf("%v", wdi.IsShow))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", wdi.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", wdi.UpdatedAt))
	builder.WriteByte(')')
	return builder.String()
}

// WinDictItems is a parsable slice of WinDictItem.
type WinDictItems []*WinDictItem
