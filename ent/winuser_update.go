// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.skig.tech/zero-core/common/ent/predicate"
	"gitlab.skig.tech/zero-core/common/ent/winuser"
)

// WinUserUpdate is the builder for updating WinUser entities.
type WinUserUpdate struct {
	config
	hooks    []Hook
	mutation *WinUserMutation
}

// Where appends a list predicates to the WinUserUpdate builder.
func (wuu *WinUserUpdate) Where(ps ...predicate.WinUser) *WinUserUpdate {
	wuu.mutation.Where(ps...)
	return wuu
}

// SetUsername sets the "username" field.
func (wuu *WinUserUpdate) SetUsername(s string) *WinUserUpdate {
	wuu.mutation.SetUsername(s)
	return wuu
}

// SetAvatar sets the "avatar" field.
func (wuu *WinUserUpdate) SetAvatar(s string) *WinUserUpdate {
	wuu.mutation.SetAvatar(s)
	return wuu
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (wuu *WinUserUpdate) SetNillableAvatar(s *string) *WinUserUpdate {
	if s != nil {
		wuu.SetAvatar(*s)
	}
	return wuu
}

// ClearAvatar clears the value of the "avatar" field.
func (wuu *WinUserUpdate) ClearAvatar() *WinUserUpdate {
	wuu.mutation.ClearAvatar()
	return wuu
}

// SetFcoin sets the "fcoin" field.
func (wuu *WinUserUpdate) SetFcoin(f float64) *WinUserUpdate {
	wuu.mutation.ResetFcoin()
	wuu.mutation.SetFcoin(f)
	return wuu
}

// AddFcoin adds f to the "fcoin" field.
func (wuu *WinUserUpdate) AddFcoin(f float64) *WinUserUpdate {
	wuu.mutation.AddFcoin(f)
	return wuu
}

// SetCoinCommission sets the "coin_commission" field.
func (wuu *WinUserUpdate) SetCoinCommission(f float64) *WinUserUpdate {
	wuu.mutation.ResetCoinCommission()
	wuu.mutation.SetCoinCommission(f)
	return wuu
}

// AddCoinCommission adds f to the "coin_commission" field.
func (wuu *WinUserUpdate) AddCoinCommission(f float64) *WinUserUpdate {
	wuu.mutation.AddCoinCommission(f)
	return wuu
}

// SetLevelID sets the "level_id" field.
func (wuu *WinUserUpdate) SetLevelID(i int8) *WinUserUpdate {
	wuu.mutation.ResetLevelID()
	wuu.mutation.SetLevelID(i)
	return wuu
}

// AddLevelID adds i to the "level_id" field.
func (wuu *WinUserUpdate) AddLevelID(i int8) *WinUserUpdate {
	wuu.mutation.AddLevelID(i)
	return wuu
}

// SetRole sets the "role" field.
func (wuu *WinUserUpdate) SetRole(i int8) *WinUserUpdate {
	wuu.mutation.ResetRole()
	wuu.mutation.SetRole(i)
	return wuu
}

// AddRole adds i to the "role" field.
func (wuu *WinUserUpdate) AddRole(i int8) *WinUserUpdate {
	wuu.mutation.AddRole(i)
	return wuu
}

// SetIsPromoter sets the "is_promoter" field.
func (wuu *WinUserUpdate) SetIsPromoter(b bool) *WinUserUpdate {
	wuu.mutation.SetIsPromoter(b)
	return wuu
}

// SetFlag sets the "flag" field.
func (wuu *WinUserUpdate) SetFlag(u uint32) *WinUserUpdate {
	wuu.mutation.ResetFlag()
	wuu.mutation.SetFlag(u)
	return wuu
}

// AddFlag adds u to the "flag" field.
func (wuu *WinUserUpdate) AddFlag(u int32) *WinUserUpdate {
	wuu.mutation.AddFlag(u)
	return wuu
}

// SetRealName sets the "real_name" field.
func (wuu *WinUserUpdate) SetRealName(s string) *WinUserUpdate {
	wuu.mutation.SetRealName(s)
	return wuu
}

// SetSignature sets the "signature" field.
func (wuu *WinUserUpdate) SetSignature(s string) *WinUserUpdate {
	wuu.mutation.SetSignature(s)
	return wuu
}

// SetBirthday sets the "birthday" field.
func (wuu *WinUserUpdate) SetBirthday(s string) *WinUserUpdate {
	wuu.mutation.SetBirthday(s)
	return wuu
}

// SetNillableBirthday sets the "birthday" field if the given value is not nil.
func (wuu *WinUserUpdate) SetNillableBirthday(s *string) *WinUserUpdate {
	if s != nil {
		wuu.SetBirthday(*s)
	}
	return wuu
}

// ClearBirthday clears the value of the "birthday" field.
func (wuu *WinUserUpdate) ClearBirthday() *WinUserUpdate {
	wuu.mutation.ClearBirthday()
	return wuu
}

// SetAreaCode sets the "area_code" field.
func (wuu *WinUserUpdate) SetAreaCode(s string) *WinUserUpdate {
	wuu.mutation.SetAreaCode(s)
	return wuu
}

// SetMobile sets the "mobile" field.
func (wuu *WinUserUpdate) SetMobile(s string) *WinUserUpdate {
	wuu.mutation.SetMobile(s)
	return wuu
}

// SetEmail sets the "email" field.
func (wuu *WinUserUpdate) SetEmail(s string) *WinUserUpdate {
	wuu.mutation.SetEmail(s)
	return wuu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (wuu *WinUserUpdate) SetNillableEmail(s *string) *WinUserUpdate {
	if s != nil {
		wuu.SetEmail(*s)
	}
	return wuu
}

// ClearEmail clears the value of the "email" field.
func (wuu *WinUserUpdate) ClearEmail() *WinUserUpdate {
	wuu.mutation.ClearEmail()
	return wuu
}

// SetSex sets the "sex" field.
func (wuu *WinUserUpdate) SetSex(b bool) *WinUserUpdate {
	wuu.mutation.SetSex(b)
	return wuu
}

// SetBindBank sets the "bind_bank" field.
func (wuu *WinUserUpdate) SetBindBank(b bool) *WinUserUpdate {
	wuu.mutation.SetBindBank(b)
	return wuu
}

// SetAddress sets the "address" field.
func (wuu *WinUserUpdate) SetAddress(s string) *WinUserUpdate {
	wuu.mutation.SetAddress(s)
	return wuu
}

// SetScore sets the "score" field.
func (wuu *WinUserUpdate) SetScore(u uint32) *WinUserUpdate {
	wuu.mutation.ResetScore()
	wuu.mutation.SetScore(u)
	return wuu
}

// AddScore adds u to the "score" field.
func (wuu *WinUserUpdate) AddScore(u int32) *WinUserUpdate {
	wuu.mutation.AddScore(u)
	return wuu
}

// SetPromoCode sets the "promo_code" field.
func (wuu *WinUserUpdate) SetPromoCode(s string) *WinUserUpdate {
	wuu.mutation.SetPromoCode(s)
	return wuu
}

// SetSupUID1 sets the "sup_uid_1" field.
func (wuu *WinUserUpdate) SetSupUID1(u uint32) *WinUserUpdate {
	wuu.mutation.ResetSupUID1()
	wuu.mutation.SetSupUID1(u)
	return wuu
}

// AddSupUID1 adds u to the "sup_uid_1" field.
func (wuu *WinUserUpdate) AddSupUID1(u int32) *WinUserUpdate {
	wuu.mutation.AddSupUID1(u)
	return wuu
}

// SetSupUsername1 sets the "sup_username_1" field.
func (wuu *WinUserUpdate) SetSupUsername1(s string) *WinUserUpdate {
	wuu.mutation.SetSupUsername1(s)
	return wuu
}

// SetSupUID2 sets the "sup_uid_2" field.
func (wuu *WinUserUpdate) SetSupUID2(u uint32) *WinUserUpdate {
	wuu.mutation.ResetSupUID2()
	wuu.mutation.SetSupUID2(u)
	return wuu
}

// AddSupUID2 adds u to the "sup_uid_2" field.
func (wuu *WinUserUpdate) AddSupUID2(u int32) *WinUserUpdate {
	wuu.mutation.AddSupUID2(u)
	return wuu
}

// SetSupUID3 sets the "sup_uid_3" field.
func (wuu *WinUserUpdate) SetSupUID3(u uint32) *WinUserUpdate {
	wuu.mutation.ResetSupUID3()
	wuu.mutation.SetSupUID3(u)
	return wuu
}

// AddSupUID3 adds u to the "sup_uid_3" field.
func (wuu *WinUserUpdate) AddSupUID3(u int32) *WinUserUpdate {
	wuu.mutation.AddSupUID3(u)
	return wuu
}

// SetSupUID4 sets the "sup_uid_4" field.
func (wuu *WinUserUpdate) SetSupUID4(u uint32) *WinUserUpdate {
	wuu.mutation.ResetSupUID4()
	wuu.mutation.SetSupUID4(u)
	return wuu
}

// AddSupUID4 adds u to the "sup_uid_4" field.
func (wuu *WinUserUpdate) AddSupUID4(u int32) *WinUserUpdate {
	wuu.mutation.AddSupUID4(u)
	return wuu
}

// SetSupUID5 sets the "sup_uid_5" field.
func (wuu *WinUserUpdate) SetSupUID5(u uint32) *WinUserUpdate {
	wuu.mutation.ResetSupUID5()
	wuu.mutation.SetSupUID5(u)
	return wuu
}

// AddSupUID5 adds u to the "sup_uid_5" field.
func (wuu *WinUserUpdate) AddSupUID5(u int32) *WinUserUpdate {
	wuu.mutation.AddSupUID5(u)
	return wuu
}

// SetSupUID6 sets the "sup_uid_6" field.
func (wuu *WinUserUpdate) SetSupUID6(u uint32) *WinUserUpdate {
	wuu.mutation.ResetSupUID6()
	wuu.mutation.SetSupUID6(u)
	return wuu
}

// AddSupUID6 adds u to the "sup_uid_6" field.
func (wuu *WinUserUpdate) AddSupUID6(u int32) *WinUserUpdate {
	wuu.mutation.AddSupUID6(u)
	return wuu
}

// SetSupUIDTop sets the "sup_uid_top" field.
func (wuu *WinUserUpdate) SetSupUIDTop(i int32) *WinUserUpdate {
	wuu.mutation.ResetSupUIDTop()
	wuu.mutation.SetSupUIDTop(i)
	return wuu
}

// AddSupUIDTop adds i to the "sup_uid_top" field.
func (wuu *WinUserUpdate) AddSupUIDTop(i int32) *WinUserUpdate {
	wuu.mutation.AddSupUIDTop(i)
	return wuu
}

// SetSupUsernameTop sets the "sup_username_top" field.
func (wuu *WinUserUpdate) SetSupUsernameTop(s string) *WinUserUpdate {
	wuu.mutation.SetSupUsernameTop(s)
	return wuu
}

// SetSupLevelTop sets the "sup_level_top" field.
func (wuu *WinUserUpdate) SetSupLevelTop(i int32) *WinUserUpdate {
	wuu.mutation.ResetSupLevelTop()
	wuu.mutation.SetSupLevelTop(i)
	return wuu
}

// AddSupLevelTop adds i to the "sup_level_top" field.
func (wuu *WinUserUpdate) AddSupLevelTop(i int32) *WinUserUpdate {
	wuu.mutation.AddSupLevelTop(i)
	return wuu
}

// SetPasswordHash sets the "password_hash" field.
func (wuu *WinUserUpdate) SetPasswordHash(s string) *WinUserUpdate {
	wuu.mutation.SetPasswordHash(s)
	return wuu
}

// SetPasswordCoin sets the "password_coin" field.
func (wuu *WinUserUpdate) SetPasswordCoin(s string) *WinUserUpdate {
	wuu.mutation.SetPasswordCoin(s)
	return wuu
}

// SetIP sets the "ip" field.
func (wuu *WinUserUpdate) SetIP(s string) *WinUserUpdate {
	wuu.mutation.SetIP(s)
	return wuu
}

// SetIPRegion sets the "ip_region" field.
func (wuu *WinUserUpdate) SetIPRegion(s string) *WinUserUpdate {
	wuu.mutation.SetIPRegion(s)
	return wuu
}

// SetNillableIPRegion sets the "ip_region" field if the given value is not nil.
func (wuu *WinUserUpdate) SetNillableIPRegion(s *string) *WinUserUpdate {
	if s != nil {
		wuu.SetIPRegion(*s)
	}
	return wuu
}

// ClearIPRegion clears the value of the "ip_region" field.
func (wuu *WinUserUpdate) ClearIPRegion() *WinUserUpdate {
	wuu.mutation.ClearIPRegion()
	return wuu
}

// SetThirdLoginType sets the "third_login_type" field.
func (wuu *WinUserUpdate) SetThirdLoginType(s string) *WinUserUpdate {
	wuu.mutation.SetThirdLoginType(s)
	return wuu
}

// SetFreezeCause sets the "freeze_cause" field.
func (wuu *WinUserUpdate) SetFreezeCause(s string) *WinUserUpdate {
	wuu.mutation.SetFreezeCause(s)
	return wuu
}

// SetNillableFreezeCause sets the "freeze_cause" field if the given value is not nil.
func (wuu *WinUserUpdate) SetNillableFreezeCause(s *string) *WinUserUpdate {
	if s != nil {
		wuu.SetFreezeCause(*s)
	}
	return wuu
}

// ClearFreezeCause clears the value of the "freeze_cause" field.
func (wuu *WinUserUpdate) ClearFreezeCause() *WinUserUpdate {
	wuu.mutation.ClearFreezeCause()
	return wuu
}

// SetFreezeAt sets the "freeze_at" field.
func (wuu *WinUserUpdate) SetFreezeAt(i int32) *WinUserUpdate {
	wuu.mutation.ResetFreezeAt()
	wuu.mutation.SetFreezeAt(i)
	return wuu
}

// SetNillableFreezeAt sets the "freeze_at" field if the given value is not nil.
func (wuu *WinUserUpdate) SetNillableFreezeAt(i *int32) *WinUserUpdate {
	if i != nil {
		wuu.SetFreezeAt(*i)
	}
	return wuu
}

// AddFreezeAt adds i to the "freeze_at" field.
func (wuu *WinUserUpdate) AddFreezeAt(i int32) *WinUserUpdate {
	wuu.mutation.AddFreezeAt(i)
	return wuu
}

// ClearFreezeAt clears the value of the "freeze_at" field.
func (wuu *WinUserUpdate) ClearFreezeAt() *WinUserUpdate {
	wuu.mutation.ClearFreezeAt()
	return wuu
}

// SetOperatorName sets the "operator_name" field.
func (wuu *WinUserUpdate) SetOperatorName(s string) *WinUserUpdate {
	wuu.mutation.SetOperatorName(s)
	return wuu
}

// SetNillableOperatorName sets the "operator_name" field if the given value is not nil.
func (wuu *WinUserUpdate) SetNillableOperatorName(s *string) *WinUserUpdate {
	if s != nil {
		wuu.SetOperatorName(*s)
	}
	return wuu
}

// ClearOperatorName clears the value of the "operator_name" field.
func (wuu *WinUserUpdate) ClearOperatorName() *WinUserUpdate {
	wuu.mutation.ClearOperatorName()
	return wuu
}

// SetCreatedName sets the "created_name" field.
func (wuu *WinUserUpdate) SetCreatedName(s string) *WinUserUpdate {
	wuu.mutation.SetCreatedName(s)
	return wuu
}

// SetNillableCreatedName sets the "created_name" field if the given value is not nil.
func (wuu *WinUserUpdate) SetNillableCreatedName(s *string) *WinUserUpdate {
	if s != nil {
		wuu.SetCreatedName(*s)
	}
	return wuu
}

// ClearCreatedName clears the value of the "created_name" field.
func (wuu *WinUserUpdate) ClearCreatedName() *WinUserUpdate {
	wuu.mutation.ClearCreatedName()
	return wuu
}

// SetStatus sets the "status" field.
func (wuu *WinUserUpdate) SetStatus(i int8) *WinUserUpdate {
	wuu.mutation.ResetStatus()
	wuu.mutation.SetStatus(i)
	return wuu
}

// AddStatus adds i to the "status" field.
func (wuu *WinUserUpdate) AddStatus(i int8) *WinUserUpdate {
	wuu.mutation.AddStatus(i)
	return wuu
}

// SetLastLoginIP sets the "last_login_ip" field.
func (wuu *WinUserUpdate) SetLastLoginIP(s string) *WinUserUpdate {
	wuu.mutation.SetLastLoginIP(s)
	return wuu
}

// SetNillableLastLoginIP sets the "last_login_ip" field if the given value is not nil.
func (wuu *WinUserUpdate) SetNillableLastLoginIP(s *string) *WinUserUpdate {
	if s != nil {
		wuu.SetLastLoginIP(*s)
	}
	return wuu
}

// ClearLastLoginIP clears the value of the "last_login_ip" field.
func (wuu *WinUserUpdate) ClearLastLoginIP() *WinUserUpdate {
	wuu.mutation.ClearLastLoginIP()
	return wuu
}

// SetLastLoginIPRegion sets the "last_login_ip_region" field.
func (wuu *WinUserUpdate) SetLastLoginIPRegion(s string) *WinUserUpdate {
	wuu.mutation.SetLastLoginIPRegion(s)
	return wuu
}

// SetNillableLastLoginIPRegion sets the "last_login_ip_region" field if the given value is not nil.
func (wuu *WinUserUpdate) SetNillableLastLoginIPRegion(s *string) *WinUserUpdate {
	if s != nil {
		wuu.SetLastLoginIPRegion(*s)
	}
	return wuu
}

// ClearLastLoginIPRegion clears the value of the "last_login_ip_region" field.
func (wuu *WinUserUpdate) ClearLastLoginIPRegion() *WinUserUpdate {
	wuu.mutation.ClearLastLoginIPRegion()
	return wuu
}

// SetLastLoginTime sets the "last_login_time" field.
func (wuu *WinUserUpdate) SetLastLoginTime(i int32) *WinUserUpdate {
	wuu.mutation.ResetLastLoginTime()
	wuu.mutation.SetLastLoginTime(i)
	return wuu
}

// SetNillableLastLoginTime sets the "last_login_time" field if the given value is not nil.
func (wuu *WinUserUpdate) SetNillableLastLoginTime(i *int32) *WinUserUpdate {
	if i != nil {
		wuu.SetLastLoginTime(*i)
	}
	return wuu
}

// AddLastLoginTime adds i to the "last_login_time" field.
func (wuu *WinUserUpdate) AddLastLoginTime(i int32) *WinUserUpdate {
	wuu.mutation.AddLastLoginTime(i)
	return wuu
}

// ClearLastLoginTime clears the value of the "last_login_time" field.
func (wuu *WinUserUpdate) ClearLastLoginTime() *WinUserUpdate {
	wuu.mutation.ClearLastLoginTime()
	return wuu
}

// SetCreatedAt sets the "created_at" field.
func (wuu *WinUserUpdate) SetCreatedAt(i int32) *WinUserUpdate {
	wuu.mutation.ResetCreatedAt()
	wuu.mutation.SetCreatedAt(i)
	return wuu
}

// AddCreatedAt adds i to the "created_at" field.
func (wuu *WinUserUpdate) AddCreatedAt(i int32) *WinUserUpdate {
	wuu.mutation.AddCreatedAt(i)
	return wuu
}

// SetUpdatedAt sets the "updated_at" field.
func (wuu *WinUserUpdate) SetUpdatedAt(i int32) *WinUserUpdate {
	wuu.mutation.ResetUpdatedAt()
	wuu.mutation.SetUpdatedAt(i)
	return wuu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (wuu *WinUserUpdate) AddUpdatedAt(i int32) *WinUserUpdate {
	wuu.mutation.AddUpdatedAt(i)
	return wuu
}

// Mutation returns the WinUserMutation object of the builder.
func (wuu *WinUserUpdate) Mutation() *WinUserMutation {
	return wuu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wuu *WinUserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, wuu.sqlSave, wuu.mutation, wuu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wuu *WinUserUpdate) SaveX(ctx context.Context) int {
	affected, err := wuu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wuu *WinUserUpdate) Exec(ctx context.Context) error {
	_, err := wuu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wuu *WinUserUpdate) ExecX(ctx context.Context) {
	if err := wuu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wuu *WinUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(winuser.Table, winuser.Columns, sqlgraph.NewFieldSpec(winuser.FieldID, field.TypeInt32))
	if ps := wuu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wuu.mutation.Username(); ok {
		_spec.SetField(winuser.FieldUsername, field.TypeString, value)
	}
	if value, ok := wuu.mutation.Avatar(); ok {
		_spec.SetField(winuser.FieldAvatar, field.TypeString, value)
	}
	if wuu.mutation.AvatarCleared() {
		_spec.ClearField(winuser.FieldAvatar, field.TypeString)
	}
	if value, ok := wuu.mutation.Fcoin(); ok {
		_spec.SetField(winuser.FieldFcoin, field.TypeFloat64, value)
	}
	if value, ok := wuu.mutation.AddedFcoin(); ok {
		_spec.AddField(winuser.FieldFcoin, field.TypeFloat64, value)
	}
	if value, ok := wuu.mutation.CoinCommission(); ok {
		_spec.SetField(winuser.FieldCoinCommission, field.TypeFloat64, value)
	}
	if value, ok := wuu.mutation.AddedCoinCommission(); ok {
		_spec.AddField(winuser.FieldCoinCommission, field.TypeFloat64, value)
	}
	if value, ok := wuu.mutation.LevelID(); ok {
		_spec.SetField(winuser.FieldLevelID, field.TypeInt8, value)
	}
	if value, ok := wuu.mutation.AddedLevelID(); ok {
		_spec.AddField(winuser.FieldLevelID, field.TypeInt8, value)
	}
	if value, ok := wuu.mutation.Role(); ok {
		_spec.SetField(winuser.FieldRole, field.TypeInt8, value)
	}
	if value, ok := wuu.mutation.AddedRole(); ok {
		_spec.AddField(winuser.FieldRole, field.TypeInt8, value)
	}
	if value, ok := wuu.mutation.IsPromoter(); ok {
		_spec.SetField(winuser.FieldIsPromoter, field.TypeBool, value)
	}
	if value, ok := wuu.mutation.Flag(); ok {
		_spec.SetField(winuser.FieldFlag, field.TypeUint32, value)
	}
	if value, ok := wuu.mutation.AddedFlag(); ok {
		_spec.AddField(winuser.FieldFlag, field.TypeUint32, value)
	}
	if value, ok := wuu.mutation.RealName(); ok {
		_spec.SetField(winuser.FieldRealName, field.TypeString, value)
	}
	if value, ok := wuu.mutation.Signature(); ok {
		_spec.SetField(winuser.FieldSignature, field.TypeString, value)
	}
	if value, ok := wuu.mutation.Birthday(); ok {
		_spec.SetField(winuser.FieldBirthday, field.TypeString, value)
	}
	if wuu.mutation.BirthdayCleared() {
		_spec.ClearField(winuser.FieldBirthday, field.TypeString)
	}
	if value, ok := wuu.mutation.AreaCode(); ok {
		_spec.SetField(winuser.FieldAreaCode, field.TypeString, value)
	}
	if value, ok := wuu.mutation.Mobile(); ok {
		_spec.SetField(winuser.FieldMobile, field.TypeString, value)
	}
	if value, ok := wuu.mutation.Email(); ok {
		_spec.SetField(winuser.FieldEmail, field.TypeString, value)
	}
	if wuu.mutation.EmailCleared() {
		_spec.ClearField(winuser.FieldEmail, field.TypeString)
	}
	if value, ok := wuu.mutation.Sex(); ok {
		_spec.SetField(winuser.FieldSex, field.TypeBool, value)
	}
	if value, ok := wuu.mutation.BindBank(); ok {
		_spec.SetField(winuser.FieldBindBank, field.TypeBool, value)
	}
	if value, ok := wuu.mutation.Address(); ok {
		_spec.SetField(winuser.FieldAddress, field.TypeString, value)
	}
	if value, ok := wuu.mutation.Score(); ok {
		_spec.SetField(winuser.FieldScore, field.TypeUint32, value)
	}
	if value, ok := wuu.mutation.AddedScore(); ok {
		_spec.AddField(winuser.FieldScore, field.TypeUint32, value)
	}
	if value, ok := wuu.mutation.PromoCode(); ok {
		_spec.SetField(winuser.FieldPromoCode, field.TypeString, value)
	}
	if value, ok := wuu.mutation.SupUID1(); ok {
		_spec.SetField(winuser.FieldSupUID1, field.TypeUint32, value)
	}
	if value, ok := wuu.mutation.AddedSupUID1(); ok {
		_spec.AddField(winuser.FieldSupUID1, field.TypeUint32, value)
	}
	if value, ok := wuu.mutation.SupUsername1(); ok {
		_spec.SetField(winuser.FieldSupUsername1, field.TypeString, value)
	}
	if value, ok := wuu.mutation.SupUID2(); ok {
		_spec.SetField(winuser.FieldSupUID2, field.TypeUint32, value)
	}
	if value, ok := wuu.mutation.AddedSupUID2(); ok {
		_spec.AddField(winuser.FieldSupUID2, field.TypeUint32, value)
	}
	if value, ok := wuu.mutation.SupUID3(); ok {
		_spec.SetField(winuser.FieldSupUID3, field.TypeUint32, value)
	}
	if value, ok := wuu.mutation.AddedSupUID3(); ok {
		_spec.AddField(winuser.FieldSupUID3, field.TypeUint32, value)
	}
	if value, ok := wuu.mutation.SupUID4(); ok {
		_spec.SetField(winuser.FieldSupUID4, field.TypeUint32, value)
	}
	if value, ok := wuu.mutation.AddedSupUID4(); ok {
		_spec.AddField(winuser.FieldSupUID4, field.TypeUint32, value)
	}
	if value, ok := wuu.mutation.SupUID5(); ok {
		_spec.SetField(winuser.FieldSupUID5, field.TypeUint32, value)
	}
	if value, ok := wuu.mutation.AddedSupUID5(); ok {
		_spec.AddField(winuser.FieldSupUID5, field.TypeUint32, value)
	}
	if value, ok := wuu.mutation.SupUID6(); ok {
		_spec.SetField(winuser.FieldSupUID6, field.TypeUint32, value)
	}
	if value, ok := wuu.mutation.AddedSupUID6(); ok {
		_spec.AddField(winuser.FieldSupUID6, field.TypeUint32, value)
	}
	if value, ok := wuu.mutation.SupUIDTop(); ok {
		_spec.SetField(winuser.FieldSupUIDTop, field.TypeInt32, value)
	}
	if value, ok := wuu.mutation.AddedSupUIDTop(); ok {
		_spec.AddField(winuser.FieldSupUIDTop, field.TypeInt32, value)
	}
	if value, ok := wuu.mutation.SupUsernameTop(); ok {
		_spec.SetField(winuser.FieldSupUsernameTop, field.TypeString, value)
	}
	if value, ok := wuu.mutation.SupLevelTop(); ok {
		_spec.SetField(winuser.FieldSupLevelTop, field.TypeInt32, value)
	}
	if value, ok := wuu.mutation.AddedSupLevelTop(); ok {
		_spec.AddField(winuser.FieldSupLevelTop, field.TypeInt32, value)
	}
	if value, ok := wuu.mutation.PasswordHash(); ok {
		_spec.SetField(winuser.FieldPasswordHash, field.TypeString, value)
	}
	if value, ok := wuu.mutation.PasswordCoin(); ok {
		_spec.SetField(winuser.FieldPasswordCoin, field.TypeString, value)
	}
	if value, ok := wuu.mutation.IP(); ok {
		_spec.SetField(winuser.FieldIP, field.TypeString, value)
	}
	if value, ok := wuu.mutation.IPRegion(); ok {
		_spec.SetField(winuser.FieldIPRegion, field.TypeString, value)
	}
	if wuu.mutation.IPRegionCleared() {
		_spec.ClearField(winuser.FieldIPRegion, field.TypeString)
	}
	if value, ok := wuu.mutation.ThirdLoginType(); ok {
		_spec.SetField(winuser.FieldThirdLoginType, field.TypeString, value)
	}
	if value, ok := wuu.mutation.FreezeCause(); ok {
		_spec.SetField(winuser.FieldFreezeCause, field.TypeString, value)
	}
	if wuu.mutation.FreezeCauseCleared() {
		_spec.ClearField(winuser.FieldFreezeCause, field.TypeString)
	}
	if value, ok := wuu.mutation.FreezeAt(); ok {
		_spec.SetField(winuser.FieldFreezeAt, field.TypeInt32, value)
	}
	if value, ok := wuu.mutation.AddedFreezeAt(); ok {
		_spec.AddField(winuser.FieldFreezeAt, field.TypeInt32, value)
	}
	if wuu.mutation.FreezeAtCleared() {
		_spec.ClearField(winuser.FieldFreezeAt, field.TypeInt32)
	}
	if value, ok := wuu.mutation.OperatorName(); ok {
		_spec.SetField(winuser.FieldOperatorName, field.TypeString, value)
	}
	if wuu.mutation.OperatorNameCleared() {
		_spec.ClearField(winuser.FieldOperatorName, field.TypeString)
	}
	if value, ok := wuu.mutation.CreatedName(); ok {
		_spec.SetField(winuser.FieldCreatedName, field.TypeString, value)
	}
	if wuu.mutation.CreatedNameCleared() {
		_spec.ClearField(winuser.FieldCreatedName, field.TypeString)
	}
	if value, ok := wuu.mutation.Status(); ok {
		_spec.SetField(winuser.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := wuu.mutation.AddedStatus(); ok {
		_spec.AddField(winuser.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := wuu.mutation.LastLoginIP(); ok {
		_spec.SetField(winuser.FieldLastLoginIP, field.TypeString, value)
	}
	if wuu.mutation.LastLoginIPCleared() {
		_spec.ClearField(winuser.FieldLastLoginIP, field.TypeString)
	}
	if value, ok := wuu.mutation.LastLoginIPRegion(); ok {
		_spec.SetField(winuser.FieldLastLoginIPRegion, field.TypeString, value)
	}
	if wuu.mutation.LastLoginIPRegionCleared() {
		_spec.ClearField(winuser.FieldLastLoginIPRegion, field.TypeString)
	}
	if value, ok := wuu.mutation.LastLoginTime(); ok {
		_spec.SetField(winuser.FieldLastLoginTime, field.TypeInt32, value)
	}
	if value, ok := wuu.mutation.AddedLastLoginTime(); ok {
		_spec.AddField(winuser.FieldLastLoginTime, field.TypeInt32, value)
	}
	if wuu.mutation.LastLoginTimeCleared() {
		_spec.ClearField(winuser.FieldLastLoginTime, field.TypeInt32)
	}
	if value, ok := wuu.mutation.CreatedAt(); ok {
		_spec.SetField(winuser.FieldCreatedAt, field.TypeInt32, value)
	}
	if value, ok := wuu.mutation.AddedCreatedAt(); ok {
		_spec.AddField(winuser.FieldCreatedAt, field.TypeInt32, value)
	}
	if value, ok := wuu.mutation.UpdatedAt(); ok {
		_spec.SetField(winuser.FieldUpdatedAt, field.TypeInt32, value)
	}
	if value, ok := wuu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(winuser.FieldUpdatedAt, field.TypeInt32, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wuu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{winuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wuu.mutation.done = true
	return n, nil
}

// WinUserUpdateOne is the builder for updating a single WinUser entity.
type WinUserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WinUserMutation
}

// SetUsername sets the "username" field.
func (wuuo *WinUserUpdateOne) SetUsername(s string) *WinUserUpdateOne {
	wuuo.mutation.SetUsername(s)
	return wuuo
}

// SetAvatar sets the "avatar" field.
func (wuuo *WinUserUpdateOne) SetAvatar(s string) *WinUserUpdateOne {
	wuuo.mutation.SetAvatar(s)
	return wuuo
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (wuuo *WinUserUpdateOne) SetNillableAvatar(s *string) *WinUserUpdateOne {
	if s != nil {
		wuuo.SetAvatar(*s)
	}
	return wuuo
}

// ClearAvatar clears the value of the "avatar" field.
func (wuuo *WinUserUpdateOne) ClearAvatar() *WinUserUpdateOne {
	wuuo.mutation.ClearAvatar()
	return wuuo
}

// SetFcoin sets the "fcoin" field.
func (wuuo *WinUserUpdateOne) SetFcoin(f float64) *WinUserUpdateOne {
	wuuo.mutation.ResetFcoin()
	wuuo.mutation.SetFcoin(f)
	return wuuo
}

// AddFcoin adds f to the "fcoin" field.
func (wuuo *WinUserUpdateOne) AddFcoin(f float64) *WinUserUpdateOne {
	wuuo.mutation.AddFcoin(f)
	return wuuo
}

// SetCoinCommission sets the "coin_commission" field.
func (wuuo *WinUserUpdateOne) SetCoinCommission(f float64) *WinUserUpdateOne {
	wuuo.mutation.ResetCoinCommission()
	wuuo.mutation.SetCoinCommission(f)
	return wuuo
}

// AddCoinCommission adds f to the "coin_commission" field.
func (wuuo *WinUserUpdateOne) AddCoinCommission(f float64) *WinUserUpdateOne {
	wuuo.mutation.AddCoinCommission(f)
	return wuuo
}

// SetLevelID sets the "level_id" field.
func (wuuo *WinUserUpdateOne) SetLevelID(i int8) *WinUserUpdateOne {
	wuuo.mutation.ResetLevelID()
	wuuo.mutation.SetLevelID(i)
	return wuuo
}

// AddLevelID adds i to the "level_id" field.
func (wuuo *WinUserUpdateOne) AddLevelID(i int8) *WinUserUpdateOne {
	wuuo.mutation.AddLevelID(i)
	return wuuo
}

// SetRole sets the "role" field.
func (wuuo *WinUserUpdateOne) SetRole(i int8) *WinUserUpdateOne {
	wuuo.mutation.ResetRole()
	wuuo.mutation.SetRole(i)
	return wuuo
}

// AddRole adds i to the "role" field.
func (wuuo *WinUserUpdateOne) AddRole(i int8) *WinUserUpdateOne {
	wuuo.mutation.AddRole(i)
	return wuuo
}

// SetIsPromoter sets the "is_promoter" field.
func (wuuo *WinUserUpdateOne) SetIsPromoter(b bool) *WinUserUpdateOne {
	wuuo.mutation.SetIsPromoter(b)
	return wuuo
}

// SetFlag sets the "flag" field.
func (wuuo *WinUserUpdateOne) SetFlag(u uint32) *WinUserUpdateOne {
	wuuo.mutation.ResetFlag()
	wuuo.mutation.SetFlag(u)
	return wuuo
}

// AddFlag adds u to the "flag" field.
func (wuuo *WinUserUpdateOne) AddFlag(u int32) *WinUserUpdateOne {
	wuuo.mutation.AddFlag(u)
	return wuuo
}

// SetRealName sets the "real_name" field.
func (wuuo *WinUserUpdateOne) SetRealName(s string) *WinUserUpdateOne {
	wuuo.mutation.SetRealName(s)
	return wuuo
}

// SetSignature sets the "signature" field.
func (wuuo *WinUserUpdateOne) SetSignature(s string) *WinUserUpdateOne {
	wuuo.mutation.SetSignature(s)
	return wuuo
}

// SetBirthday sets the "birthday" field.
func (wuuo *WinUserUpdateOne) SetBirthday(s string) *WinUserUpdateOne {
	wuuo.mutation.SetBirthday(s)
	return wuuo
}

// SetNillableBirthday sets the "birthday" field if the given value is not nil.
func (wuuo *WinUserUpdateOne) SetNillableBirthday(s *string) *WinUserUpdateOne {
	if s != nil {
		wuuo.SetBirthday(*s)
	}
	return wuuo
}

// ClearBirthday clears the value of the "birthday" field.
func (wuuo *WinUserUpdateOne) ClearBirthday() *WinUserUpdateOne {
	wuuo.mutation.ClearBirthday()
	return wuuo
}

// SetAreaCode sets the "area_code" field.
func (wuuo *WinUserUpdateOne) SetAreaCode(s string) *WinUserUpdateOne {
	wuuo.mutation.SetAreaCode(s)
	return wuuo
}

// SetMobile sets the "mobile" field.
func (wuuo *WinUserUpdateOne) SetMobile(s string) *WinUserUpdateOne {
	wuuo.mutation.SetMobile(s)
	return wuuo
}

// SetEmail sets the "email" field.
func (wuuo *WinUserUpdateOne) SetEmail(s string) *WinUserUpdateOne {
	wuuo.mutation.SetEmail(s)
	return wuuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (wuuo *WinUserUpdateOne) SetNillableEmail(s *string) *WinUserUpdateOne {
	if s != nil {
		wuuo.SetEmail(*s)
	}
	return wuuo
}

// ClearEmail clears the value of the "email" field.
func (wuuo *WinUserUpdateOne) ClearEmail() *WinUserUpdateOne {
	wuuo.mutation.ClearEmail()
	return wuuo
}

// SetSex sets the "sex" field.
func (wuuo *WinUserUpdateOne) SetSex(b bool) *WinUserUpdateOne {
	wuuo.mutation.SetSex(b)
	return wuuo
}

// SetBindBank sets the "bind_bank" field.
func (wuuo *WinUserUpdateOne) SetBindBank(b bool) *WinUserUpdateOne {
	wuuo.mutation.SetBindBank(b)
	return wuuo
}

// SetAddress sets the "address" field.
func (wuuo *WinUserUpdateOne) SetAddress(s string) *WinUserUpdateOne {
	wuuo.mutation.SetAddress(s)
	return wuuo
}

// SetScore sets the "score" field.
func (wuuo *WinUserUpdateOne) SetScore(u uint32) *WinUserUpdateOne {
	wuuo.mutation.ResetScore()
	wuuo.mutation.SetScore(u)
	return wuuo
}

// AddScore adds u to the "score" field.
func (wuuo *WinUserUpdateOne) AddScore(u int32) *WinUserUpdateOne {
	wuuo.mutation.AddScore(u)
	return wuuo
}

// SetPromoCode sets the "promo_code" field.
func (wuuo *WinUserUpdateOne) SetPromoCode(s string) *WinUserUpdateOne {
	wuuo.mutation.SetPromoCode(s)
	return wuuo
}

// SetSupUID1 sets the "sup_uid_1" field.
func (wuuo *WinUserUpdateOne) SetSupUID1(u uint32) *WinUserUpdateOne {
	wuuo.mutation.ResetSupUID1()
	wuuo.mutation.SetSupUID1(u)
	return wuuo
}

// AddSupUID1 adds u to the "sup_uid_1" field.
func (wuuo *WinUserUpdateOne) AddSupUID1(u int32) *WinUserUpdateOne {
	wuuo.mutation.AddSupUID1(u)
	return wuuo
}

// SetSupUsername1 sets the "sup_username_1" field.
func (wuuo *WinUserUpdateOne) SetSupUsername1(s string) *WinUserUpdateOne {
	wuuo.mutation.SetSupUsername1(s)
	return wuuo
}

// SetSupUID2 sets the "sup_uid_2" field.
func (wuuo *WinUserUpdateOne) SetSupUID2(u uint32) *WinUserUpdateOne {
	wuuo.mutation.ResetSupUID2()
	wuuo.mutation.SetSupUID2(u)
	return wuuo
}

// AddSupUID2 adds u to the "sup_uid_2" field.
func (wuuo *WinUserUpdateOne) AddSupUID2(u int32) *WinUserUpdateOne {
	wuuo.mutation.AddSupUID2(u)
	return wuuo
}

// SetSupUID3 sets the "sup_uid_3" field.
func (wuuo *WinUserUpdateOne) SetSupUID3(u uint32) *WinUserUpdateOne {
	wuuo.mutation.ResetSupUID3()
	wuuo.mutation.SetSupUID3(u)
	return wuuo
}

// AddSupUID3 adds u to the "sup_uid_3" field.
func (wuuo *WinUserUpdateOne) AddSupUID3(u int32) *WinUserUpdateOne {
	wuuo.mutation.AddSupUID3(u)
	return wuuo
}

// SetSupUID4 sets the "sup_uid_4" field.
func (wuuo *WinUserUpdateOne) SetSupUID4(u uint32) *WinUserUpdateOne {
	wuuo.mutation.ResetSupUID4()
	wuuo.mutation.SetSupUID4(u)
	return wuuo
}

// AddSupUID4 adds u to the "sup_uid_4" field.
func (wuuo *WinUserUpdateOne) AddSupUID4(u int32) *WinUserUpdateOne {
	wuuo.mutation.AddSupUID4(u)
	return wuuo
}

// SetSupUID5 sets the "sup_uid_5" field.
func (wuuo *WinUserUpdateOne) SetSupUID5(u uint32) *WinUserUpdateOne {
	wuuo.mutation.ResetSupUID5()
	wuuo.mutation.SetSupUID5(u)
	return wuuo
}

// AddSupUID5 adds u to the "sup_uid_5" field.
func (wuuo *WinUserUpdateOne) AddSupUID5(u int32) *WinUserUpdateOne {
	wuuo.mutation.AddSupUID5(u)
	return wuuo
}

// SetSupUID6 sets the "sup_uid_6" field.
func (wuuo *WinUserUpdateOne) SetSupUID6(u uint32) *WinUserUpdateOne {
	wuuo.mutation.ResetSupUID6()
	wuuo.mutation.SetSupUID6(u)
	return wuuo
}

// AddSupUID6 adds u to the "sup_uid_6" field.
func (wuuo *WinUserUpdateOne) AddSupUID6(u int32) *WinUserUpdateOne {
	wuuo.mutation.AddSupUID6(u)
	return wuuo
}

// SetSupUIDTop sets the "sup_uid_top" field.
func (wuuo *WinUserUpdateOne) SetSupUIDTop(i int32) *WinUserUpdateOne {
	wuuo.mutation.ResetSupUIDTop()
	wuuo.mutation.SetSupUIDTop(i)
	return wuuo
}

// AddSupUIDTop adds i to the "sup_uid_top" field.
func (wuuo *WinUserUpdateOne) AddSupUIDTop(i int32) *WinUserUpdateOne {
	wuuo.mutation.AddSupUIDTop(i)
	return wuuo
}

// SetSupUsernameTop sets the "sup_username_top" field.
func (wuuo *WinUserUpdateOne) SetSupUsernameTop(s string) *WinUserUpdateOne {
	wuuo.mutation.SetSupUsernameTop(s)
	return wuuo
}

// SetSupLevelTop sets the "sup_level_top" field.
func (wuuo *WinUserUpdateOne) SetSupLevelTop(i int32) *WinUserUpdateOne {
	wuuo.mutation.ResetSupLevelTop()
	wuuo.mutation.SetSupLevelTop(i)
	return wuuo
}

// AddSupLevelTop adds i to the "sup_level_top" field.
func (wuuo *WinUserUpdateOne) AddSupLevelTop(i int32) *WinUserUpdateOne {
	wuuo.mutation.AddSupLevelTop(i)
	return wuuo
}

// SetPasswordHash sets the "password_hash" field.
func (wuuo *WinUserUpdateOne) SetPasswordHash(s string) *WinUserUpdateOne {
	wuuo.mutation.SetPasswordHash(s)
	return wuuo
}

// SetPasswordCoin sets the "password_coin" field.
func (wuuo *WinUserUpdateOne) SetPasswordCoin(s string) *WinUserUpdateOne {
	wuuo.mutation.SetPasswordCoin(s)
	return wuuo
}

// SetIP sets the "ip" field.
func (wuuo *WinUserUpdateOne) SetIP(s string) *WinUserUpdateOne {
	wuuo.mutation.SetIP(s)
	return wuuo
}

// SetIPRegion sets the "ip_region" field.
func (wuuo *WinUserUpdateOne) SetIPRegion(s string) *WinUserUpdateOne {
	wuuo.mutation.SetIPRegion(s)
	return wuuo
}

// SetNillableIPRegion sets the "ip_region" field if the given value is not nil.
func (wuuo *WinUserUpdateOne) SetNillableIPRegion(s *string) *WinUserUpdateOne {
	if s != nil {
		wuuo.SetIPRegion(*s)
	}
	return wuuo
}

// ClearIPRegion clears the value of the "ip_region" field.
func (wuuo *WinUserUpdateOne) ClearIPRegion() *WinUserUpdateOne {
	wuuo.mutation.ClearIPRegion()
	return wuuo
}

// SetThirdLoginType sets the "third_login_type" field.
func (wuuo *WinUserUpdateOne) SetThirdLoginType(s string) *WinUserUpdateOne {
	wuuo.mutation.SetThirdLoginType(s)
	return wuuo
}

// SetFreezeCause sets the "freeze_cause" field.
func (wuuo *WinUserUpdateOne) SetFreezeCause(s string) *WinUserUpdateOne {
	wuuo.mutation.SetFreezeCause(s)
	return wuuo
}

// SetNillableFreezeCause sets the "freeze_cause" field if the given value is not nil.
func (wuuo *WinUserUpdateOne) SetNillableFreezeCause(s *string) *WinUserUpdateOne {
	if s != nil {
		wuuo.SetFreezeCause(*s)
	}
	return wuuo
}

// ClearFreezeCause clears the value of the "freeze_cause" field.
func (wuuo *WinUserUpdateOne) ClearFreezeCause() *WinUserUpdateOne {
	wuuo.mutation.ClearFreezeCause()
	return wuuo
}

// SetFreezeAt sets the "freeze_at" field.
func (wuuo *WinUserUpdateOne) SetFreezeAt(i int32) *WinUserUpdateOne {
	wuuo.mutation.ResetFreezeAt()
	wuuo.mutation.SetFreezeAt(i)
	return wuuo
}

// SetNillableFreezeAt sets the "freeze_at" field if the given value is not nil.
func (wuuo *WinUserUpdateOne) SetNillableFreezeAt(i *int32) *WinUserUpdateOne {
	if i != nil {
		wuuo.SetFreezeAt(*i)
	}
	return wuuo
}

// AddFreezeAt adds i to the "freeze_at" field.
func (wuuo *WinUserUpdateOne) AddFreezeAt(i int32) *WinUserUpdateOne {
	wuuo.mutation.AddFreezeAt(i)
	return wuuo
}

// ClearFreezeAt clears the value of the "freeze_at" field.
func (wuuo *WinUserUpdateOne) ClearFreezeAt() *WinUserUpdateOne {
	wuuo.mutation.ClearFreezeAt()
	return wuuo
}

// SetOperatorName sets the "operator_name" field.
func (wuuo *WinUserUpdateOne) SetOperatorName(s string) *WinUserUpdateOne {
	wuuo.mutation.SetOperatorName(s)
	return wuuo
}

// SetNillableOperatorName sets the "operator_name" field if the given value is not nil.
func (wuuo *WinUserUpdateOne) SetNillableOperatorName(s *string) *WinUserUpdateOne {
	if s != nil {
		wuuo.SetOperatorName(*s)
	}
	return wuuo
}

// ClearOperatorName clears the value of the "operator_name" field.
func (wuuo *WinUserUpdateOne) ClearOperatorName() *WinUserUpdateOne {
	wuuo.mutation.ClearOperatorName()
	return wuuo
}

// SetCreatedName sets the "created_name" field.
func (wuuo *WinUserUpdateOne) SetCreatedName(s string) *WinUserUpdateOne {
	wuuo.mutation.SetCreatedName(s)
	return wuuo
}

// SetNillableCreatedName sets the "created_name" field if the given value is not nil.
func (wuuo *WinUserUpdateOne) SetNillableCreatedName(s *string) *WinUserUpdateOne {
	if s != nil {
		wuuo.SetCreatedName(*s)
	}
	return wuuo
}

// ClearCreatedName clears the value of the "created_name" field.
func (wuuo *WinUserUpdateOne) ClearCreatedName() *WinUserUpdateOne {
	wuuo.mutation.ClearCreatedName()
	return wuuo
}

// SetStatus sets the "status" field.
func (wuuo *WinUserUpdateOne) SetStatus(i int8) *WinUserUpdateOne {
	wuuo.mutation.ResetStatus()
	wuuo.mutation.SetStatus(i)
	return wuuo
}

// AddStatus adds i to the "status" field.
func (wuuo *WinUserUpdateOne) AddStatus(i int8) *WinUserUpdateOne {
	wuuo.mutation.AddStatus(i)
	return wuuo
}

// SetLastLoginIP sets the "last_login_ip" field.
func (wuuo *WinUserUpdateOne) SetLastLoginIP(s string) *WinUserUpdateOne {
	wuuo.mutation.SetLastLoginIP(s)
	return wuuo
}

// SetNillableLastLoginIP sets the "last_login_ip" field if the given value is not nil.
func (wuuo *WinUserUpdateOne) SetNillableLastLoginIP(s *string) *WinUserUpdateOne {
	if s != nil {
		wuuo.SetLastLoginIP(*s)
	}
	return wuuo
}

// ClearLastLoginIP clears the value of the "last_login_ip" field.
func (wuuo *WinUserUpdateOne) ClearLastLoginIP() *WinUserUpdateOne {
	wuuo.mutation.ClearLastLoginIP()
	return wuuo
}

// SetLastLoginIPRegion sets the "last_login_ip_region" field.
func (wuuo *WinUserUpdateOne) SetLastLoginIPRegion(s string) *WinUserUpdateOne {
	wuuo.mutation.SetLastLoginIPRegion(s)
	return wuuo
}

// SetNillableLastLoginIPRegion sets the "last_login_ip_region" field if the given value is not nil.
func (wuuo *WinUserUpdateOne) SetNillableLastLoginIPRegion(s *string) *WinUserUpdateOne {
	if s != nil {
		wuuo.SetLastLoginIPRegion(*s)
	}
	return wuuo
}

// ClearLastLoginIPRegion clears the value of the "last_login_ip_region" field.
func (wuuo *WinUserUpdateOne) ClearLastLoginIPRegion() *WinUserUpdateOne {
	wuuo.mutation.ClearLastLoginIPRegion()
	return wuuo
}

// SetLastLoginTime sets the "last_login_time" field.
func (wuuo *WinUserUpdateOne) SetLastLoginTime(i int32) *WinUserUpdateOne {
	wuuo.mutation.ResetLastLoginTime()
	wuuo.mutation.SetLastLoginTime(i)
	return wuuo
}

// SetNillableLastLoginTime sets the "last_login_time" field if the given value is not nil.
func (wuuo *WinUserUpdateOne) SetNillableLastLoginTime(i *int32) *WinUserUpdateOne {
	if i != nil {
		wuuo.SetLastLoginTime(*i)
	}
	return wuuo
}

// AddLastLoginTime adds i to the "last_login_time" field.
func (wuuo *WinUserUpdateOne) AddLastLoginTime(i int32) *WinUserUpdateOne {
	wuuo.mutation.AddLastLoginTime(i)
	return wuuo
}

// ClearLastLoginTime clears the value of the "last_login_time" field.
func (wuuo *WinUserUpdateOne) ClearLastLoginTime() *WinUserUpdateOne {
	wuuo.mutation.ClearLastLoginTime()
	return wuuo
}

// SetCreatedAt sets the "created_at" field.
func (wuuo *WinUserUpdateOne) SetCreatedAt(i int32) *WinUserUpdateOne {
	wuuo.mutation.ResetCreatedAt()
	wuuo.mutation.SetCreatedAt(i)
	return wuuo
}

// AddCreatedAt adds i to the "created_at" field.
func (wuuo *WinUserUpdateOne) AddCreatedAt(i int32) *WinUserUpdateOne {
	wuuo.mutation.AddCreatedAt(i)
	return wuuo
}

// SetUpdatedAt sets the "updated_at" field.
func (wuuo *WinUserUpdateOne) SetUpdatedAt(i int32) *WinUserUpdateOne {
	wuuo.mutation.ResetUpdatedAt()
	wuuo.mutation.SetUpdatedAt(i)
	return wuuo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (wuuo *WinUserUpdateOne) AddUpdatedAt(i int32) *WinUserUpdateOne {
	wuuo.mutation.AddUpdatedAt(i)
	return wuuo
}

// Mutation returns the WinUserMutation object of the builder.
func (wuuo *WinUserUpdateOne) Mutation() *WinUserMutation {
	return wuuo.mutation
}

// Where appends a list predicates to the WinUserUpdate builder.
func (wuuo *WinUserUpdateOne) Where(ps ...predicate.WinUser) *WinUserUpdateOne {
	wuuo.mutation.Where(ps...)
	return wuuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wuuo *WinUserUpdateOne) Select(field string, fields ...string) *WinUserUpdateOne {
	wuuo.fields = append([]string{field}, fields...)
	return wuuo
}

// Save executes the query and returns the updated WinUser entity.
func (wuuo *WinUserUpdateOne) Save(ctx context.Context) (*WinUser, error) {
	return withHooks(ctx, wuuo.sqlSave, wuuo.mutation, wuuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wuuo *WinUserUpdateOne) SaveX(ctx context.Context) *WinUser {
	node, err := wuuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wuuo *WinUserUpdateOne) Exec(ctx context.Context) error {
	_, err := wuuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wuuo *WinUserUpdateOne) ExecX(ctx context.Context) {
	if err := wuuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wuuo *WinUserUpdateOne) sqlSave(ctx context.Context) (_node *WinUser, err error) {
	_spec := sqlgraph.NewUpdateSpec(winuser.Table, winuser.Columns, sqlgraph.NewFieldSpec(winuser.FieldID, field.TypeInt32))
	id, ok := wuuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WinUser.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wuuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, winuser.FieldID)
		for _, f := range fields {
			if !winuser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != winuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wuuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wuuo.mutation.Username(); ok {
		_spec.SetField(winuser.FieldUsername, field.TypeString, value)
	}
	if value, ok := wuuo.mutation.Avatar(); ok {
		_spec.SetField(winuser.FieldAvatar, field.TypeString, value)
	}
	if wuuo.mutation.AvatarCleared() {
		_spec.ClearField(winuser.FieldAvatar, field.TypeString)
	}
	if value, ok := wuuo.mutation.Fcoin(); ok {
		_spec.SetField(winuser.FieldFcoin, field.TypeFloat64, value)
	}
	if value, ok := wuuo.mutation.AddedFcoin(); ok {
		_spec.AddField(winuser.FieldFcoin, field.TypeFloat64, value)
	}
	if value, ok := wuuo.mutation.CoinCommission(); ok {
		_spec.SetField(winuser.FieldCoinCommission, field.TypeFloat64, value)
	}
	if value, ok := wuuo.mutation.AddedCoinCommission(); ok {
		_spec.AddField(winuser.FieldCoinCommission, field.TypeFloat64, value)
	}
	if value, ok := wuuo.mutation.LevelID(); ok {
		_spec.SetField(winuser.FieldLevelID, field.TypeInt8, value)
	}
	if value, ok := wuuo.mutation.AddedLevelID(); ok {
		_spec.AddField(winuser.FieldLevelID, field.TypeInt8, value)
	}
	if value, ok := wuuo.mutation.Role(); ok {
		_spec.SetField(winuser.FieldRole, field.TypeInt8, value)
	}
	if value, ok := wuuo.mutation.AddedRole(); ok {
		_spec.AddField(winuser.FieldRole, field.TypeInt8, value)
	}
	if value, ok := wuuo.mutation.IsPromoter(); ok {
		_spec.SetField(winuser.FieldIsPromoter, field.TypeBool, value)
	}
	if value, ok := wuuo.mutation.Flag(); ok {
		_spec.SetField(winuser.FieldFlag, field.TypeUint32, value)
	}
	if value, ok := wuuo.mutation.AddedFlag(); ok {
		_spec.AddField(winuser.FieldFlag, field.TypeUint32, value)
	}
	if value, ok := wuuo.mutation.RealName(); ok {
		_spec.SetField(winuser.FieldRealName, field.TypeString, value)
	}
	if value, ok := wuuo.mutation.Signature(); ok {
		_spec.SetField(winuser.FieldSignature, field.TypeString, value)
	}
	if value, ok := wuuo.mutation.Birthday(); ok {
		_spec.SetField(winuser.FieldBirthday, field.TypeString, value)
	}
	if wuuo.mutation.BirthdayCleared() {
		_spec.ClearField(winuser.FieldBirthday, field.TypeString)
	}
	if value, ok := wuuo.mutation.AreaCode(); ok {
		_spec.SetField(winuser.FieldAreaCode, field.TypeString, value)
	}
	if value, ok := wuuo.mutation.Mobile(); ok {
		_spec.SetField(winuser.FieldMobile, field.TypeString, value)
	}
	if value, ok := wuuo.mutation.Email(); ok {
		_spec.SetField(winuser.FieldEmail, field.TypeString, value)
	}
	if wuuo.mutation.EmailCleared() {
		_spec.ClearField(winuser.FieldEmail, field.TypeString)
	}
	if value, ok := wuuo.mutation.Sex(); ok {
		_spec.SetField(winuser.FieldSex, field.TypeBool, value)
	}
	if value, ok := wuuo.mutation.BindBank(); ok {
		_spec.SetField(winuser.FieldBindBank, field.TypeBool, value)
	}
	if value, ok := wuuo.mutation.Address(); ok {
		_spec.SetField(winuser.FieldAddress, field.TypeString, value)
	}
	if value, ok := wuuo.mutation.Score(); ok {
		_spec.SetField(winuser.FieldScore, field.TypeUint32, value)
	}
	if value, ok := wuuo.mutation.AddedScore(); ok {
		_spec.AddField(winuser.FieldScore, field.TypeUint32, value)
	}
	if value, ok := wuuo.mutation.PromoCode(); ok {
		_spec.SetField(winuser.FieldPromoCode, field.TypeString, value)
	}
	if value, ok := wuuo.mutation.SupUID1(); ok {
		_spec.SetField(winuser.FieldSupUID1, field.TypeUint32, value)
	}
	if value, ok := wuuo.mutation.AddedSupUID1(); ok {
		_spec.AddField(winuser.FieldSupUID1, field.TypeUint32, value)
	}
	if value, ok := wuuo.mutation.SupUsername1(); ok {
		_spec.SetField(winuser.FieldSupUsername1, field.TypeString, value)
	}
	if value, ok := wuuo.mutation.SupUID2(); ok {
		_spec.SetField(winuser.FieldSupUID2, field.TypeUint32, value)
	}
	if value, ok := wuuo.mutation.AddedSupUID2(); ok {
		_spec.AddField(winuser.FieldSupUID2, field.TypeUint32, value)
	}
	if value, ok := wuuo.mutation.SupUID3(); ok {
		_spec.SetField(winuser.FieldSupUID3, field.TypeUint32, value)
	}
	if value, ok := wuuo.mutation.AddedSupUID3(); ok {
		_spec.AddField(winuser.FieldSupUID3, field.TypeUint32, value)
	}
	if value, ok := wuuo.mutation.SupUID4(); ok {
		_spec.SetField(winuser.FieldSupUID4, field.TypeUint32, value)
	}
	if value, ok := wuuo.mutation.AddedSupUID4(); ok {
		_spec.AddField(winuser.FieldSupUID4, field.TypeUint32, value)
	}
	if value, ok := wuuo.mutation.SupUID5(); ok {
		_spec.SetField(winuser.FieldSupUID5, field.TypeUint32, value)
	}
	if value, ok := wuuo.mutation.AddedSupUID5(); ok {
		_spec.AddField(winuser.FieldSupUID5, field.TypeUint32, value)
	}
	if value, ok := wuuo.mutation.SupUID6(); ok {
		_spec.SetField(winuser.FieldSupUID6, field.TypeUint32, value)
	}
	if value, ok := wuuo.mutation.AddedSupUID6(); ok {
		_spec.AddField(winuser.FieldSupUID6, field.TypeUint32, value)
	}
	if value, ok := wuuo.mutation.SupUIDTop(); ok {
		_spec.SetField(winuser.FieldSupUIDTop, field.TypeInt32, value)
	}
	if value, ok := wuuo.mutation.AddedSupUIDTop(); ok {
		_spec.AddField(winuser.FieldSupUIDTop, field.TypeInt32, value)
	}
	if value, ok := wuuo.mutation.SupUsernameTop(); ok {
		_spec.SetField(winuser.FieldSupUsernameTop, field.TypeString, value)
	}
	if value, ok := wuuo.mutation.SupLevelTop(); ok {
		_spec.SetField(winuser.FieldSupLevelTop, field.TypeInt32, value)
	}
	if value, ok := wuuo.mutation.AddedSupLevelTop(); ok {
		_spec.AddField(winuser.FieldSupLevelTop, field.TypeInt32, value)
	}
	if value, ok := wuuo.mutation.PasswordHash(); ok {
		_spec.SetField(winuser.FieldPasswordHash, field.TypeString, value)
	}
	if value, ok := wuuo.mutation.PasswordCoin(); ok {
		_spec.SetField(winuser.FieldPasswordCoin, field.TypeString, value)
	}
	if value, ok := wuuo.mutation.IP(); ok {
		_spec.SetField(winuser.FieldIP, field.TypeString, value)
	}
	if value, ok := wuuo.mutation.IPRegion(); ok {
		_spec.SetField(winuser.FieldIPRegion, field.TypeString, value)
	}
	if wuuo.mutation.IPRegionCleared() {
		_spec.ClearField(winuser.FieldIPRegion, field.TypeString)
	}
	if value, ok := wuuo.mutation.ThirdLoginType(); ok {
		_spec.SetField(winuser.FieldThirdLoginType, field.TypeString, value)
	}
	if value, ok := wuuo.mutation.FreezeCause(); ok {
		_spec.SetField(winuser.FieldFreezeCause, field.TypeString, value)
	}
	if wuuo.mutation.FreezeCauseCleared() {
		_spec.ClearField(winuser.FieldFreezeCause, field.TypeString)
	}
	if value, ok := wuuo.mutation.FreezeAt(); ok {
		_spec.SetField(winuser.FieldFreezeAt, field.TypeInt32, value)
	}
	if value, ok := wuuo.mutation.AddedFreezeAt(); ok {
		_spec.AddField(winuser.FieldFreezeAt, field.TypeInt32, value)
	}
	if wuuo.mutation.FreezeAtCleared() {
		_spec.ClearField(winuser.FieldFreezeAt, field.TypeInt32)
	}
	if value, ok := wuuo.mutation.OperatorName(); ok {
		_spec.SetField(winuser.FieldOperatorName, field.TypeString, value)
	}
	if wuuo.mutation.OperatorNameCleared() {
		_spec.ClearField(winuser.FieldOperatorName, field.TypeString)
	}
	if value, ok := wuuo.mutation.CreatedName(); ok {
		_spec.SetField(winuser.FieldCreatedName, field.TypeString, value)
	}
	if wuuo.mutation.CreatedNameCleared() {
		_spec.ClearField(winuser.FieldCreatedName, field.TypeString)
	}
	if value, ok := wuuo.mutation.Status(); ok {
		_spec.SetField(winuser.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := wuuo.mutation.AddedStatus(); ok {
		_spec.AddField(winuser.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := wuuo.mutation.LastLoginIP(); ok {
		_spec.SetField(winuser.FieldLastLoginIP, field.TypeString, value)
	}
	if wuuo.mutation.LastLoginIPCleared() {
		_spec.ClearField(winuser.FieldLastLoginIP, field.TypeString)
	}
	if value, ok := wuuo.mutation.LastLoginIPRegion(); ok {
		_spec.SetField(winuser.FieldLastLoginIPRegion, field.TypeString, value)
	}
	if wuuo.mutation.LastLoginIPRegionCleared() {
		_spec.ClearField(winuser.FieldLastLoginIPRegion, field.TypeString)
	}
	if value, ok := wuuo.mutation.LastLoginTime(); ok {
		_spec.SetField(winuser.FieldLastLoginTime, field.TypeInt32, value)
	}
	if value, ok := wuuo.mutation.AddedLastLoginTime(); ok {
		_spec.AddField(winuser.FieldLastLoginTime, field.TypeInt32, value)
	}
	if wuuo.mutation.LastLoginTimeCleared() {
		_spec.ClearField(winuser.FieldLastLoginTime, field.TypeInt32)
	}
	if value, ok := wuuo.mutation.CreatedAt(); ok {
		_spec.SetField(winuser.FieldCreatedAt, field.TypeInt32, value)
	}
	if value, ok := wuuo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(winuser.FieldCreatedAt, field.TypeInt32, value)
	}
	if value, ok := wuuo.mutation.UpdatedAt(); ok {
		_spec.SetField(winuser.FieldUpdatedAt, field.TypeInt32, value)
	}
	if value, ok := wuuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(winuser.FieldUpdatedAt, field.TypeInt32, value)
	}
	_node = &WinUser{config: wuuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wuuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{winuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wuuo.mutation.done = true
	return _node, nil
}
