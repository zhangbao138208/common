// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.skig.tech/zero-core/common/ent/wingameslot"
)

// WinGameSlotCreate is the builder for creating a WinGameSlot entity.
type WinGameSlotCreate struct {
	config
	mutation *WinGameSlotMutation
	hooks    []Hook
}

// SetGameID sets the "game_id" field.
func (wgsc *WinGameSlotCreate) SetGameID(i int32) *WinGameSlotCreate {
	wgsc.mutation.SetGameID(i)
	return wgsc
}

// SetGameGroupID sets the "game_group_id" field.
func (wgsc *WinGameSlotCreate) SetGameGroupID(i int8) *WinGameSlotCreate {
	wgsc.mutation.SetGameGroupID(i)
	return wgsc
}

// SetPlatID sets the "plat_id" field.
func (wgsc *WinGameSlotCreate) SetPlatID(i int32) *WinGameSlotCreate {
	wgsc.mutation.SetPlatID(i)
	return wgsc
}

// SetProvider sets the "provider" field.
func (wgsc *WinGameSlotCreate) SetProvider(s string) *WinGameSlotCreate {
	wgsc.mutation.SetProvider(s)
	return wgsc
}

// SetNillableProvider sets the "provider" field if the given value is not nil.
func (wgsc *WinGameSlotCreate) SetNillableProvider(s *string) *WinGameSlotCreate {
	if s != nil {
		wgsc.SetProvider(*s)
	}
	return wgsc
}

// SetName sets the "name" field.
func (wgsc *WinGameSlotCreate) SetName(s string) *WinGameSlotCreate {
	wgsc.mutation.SetName(s)
	return wgsc
}

// SetNameZh sets the "name_zh" field.
func (wgsc *WinGameSlotCreate) SetNameZh(s string) *WinGameSlotCreate {
	wgsc.mutation.SetNameZh(s)
	return wgsc
}

// SetImg sets the "img" field.
func (wgsc *WinGameSlotCreate) SetImg(s string) *WinGameSlotCreate {
	wgsc.mutation.SetImg(s)
	return wgsc
}

// SetImgNew sets the "img_new" field.
func (wgsc *WinGameSlotCreate) SetImgNew(s string) *WinGameSlotCreate {
	wgsc.mutation.SetImgNew(s)
	return wgsc
}

// SetNillableImgNew sets the "img_new" field if the given value is not nil.
func (wgsc *WinGameSlotCreate) SetNillableImgNew(s *string) *WinGameSlotCreate {
	if s != nil {
		wgsc.SetImgNew(*s)
	}
	return wgsc
}

// SetIsNew sets the "is_new" field.
func (wgsc *WinGameSlotCreate) SetIsNew(b bool) *WinGameSlotCreate {
	wgsc.mutation.SetIsNew(b)
	return wgsc
}

// SetIsCasino sets the "is_casino" field.
func (wgsc *WinGameSlotCreate) SetIsCasino(i int8) *WinGameSlotCreate {
	wgsc.mutation.SetIsCasino(i)
	return wgsc
}

// SetGameTypeID sets the "game_type_id" field.
func (wgsc *WinGameSlotCreate) SetGameTypeID(s string) *WinGameSlotCreate {
	wgsc.mutation.SetGameTypeID(s)
	return wgsc
}

// SetNillableGameTypeID sets the "game_type_id" field if the given value is not nil.
func (wgsc *WinGameSlotCreate) SetNillableGameTypeID(s *string) *WinGameSlotCreate {
	if s != nil {
		wgsc.SetGameTypeID(*s)
	}
	return wgsc
}

// SetGameTypeName sets the "game_type_name" field.
func (wgsc *WinGameSlotCreate) SetGameTypeName(s string) *WinGameSlotCreate {
	wgsc.mutation.SetGameTypeName(s)
	return wgsc
}

// SetNillableGameTypeName sets the "game_type_name" field if the given value is not nil.
func (wgsc *WinGameSlotCreate) SetNillableGameTypeName(s *string) *WinGameSlotCreate {
	if s != nil {
		wgsc.SetGameTypeName(*s)
	}
	return wgsc
}

// SetFavoriteStar sets the "favorite_star" field.
func (wgsc *WinGameSlotCreate) SetFavoriteStar(i int32) *WinGameSlotCreate {
	wgsc.mutation.SetFavoriteStar(i)
	return wgsc
}

// SetHotStar sets the "hot_star" field.
func (wgsc *WinGameSlotCreate) SetHotStar(i int32) *WinGameSlotCreate {
	wgsc.mutation.SetHotStar(i)
	return wgsc
}

// SetSort sets the "sort" field.
func (wgsc *WinGameSlotCreate) SetSort(i int32) *WinGameSlotCreate {
	wgsc.mutation.SetSort(i)
	return wgsc
}

// SetStatus sets the "status" field.
func (wgsc *WinGameSlotCreate) SetStatus(i int8) *WinGameSlotCreate {
	wgsc.mutation.SetStatus(i)
	return wgsc
}

// SetDevice sets the "device" field.
func (wgsc *WinGameSlotCreate) SetDevice(i int8) *WinGameSlotCreate {
	wgsc.mutation.SetDevice(i)
	return wgsc
}

// SetNillableDevice sets the "device" field if the given value is not nil.
func (wgsc *WinGameSlotCreate) SetNillableDevice(i *int8) *WinGameSlotCreate {
	if i != nil {
		wgsc.SetDevice(*i)
	}
	return wgsc
}

// SetCreatedAt sets the "created_at" field.
func (wgsc *WinGameSlotCreate) SetCreatedAt(i int32) *WinGameSlotCreate {
	wgsc.mutation.SetCreatedAt(i)
	return wgsc
}

// SetUpdatedAt sets the "updated_at" field.
func (wgsc *WinGameSlotCreate) SetUpdatedAt(i int32) *WinGameSlotCreate {
	wgsc.mutation.SetUpdatedAt(i)
	return wgsc
}

// SetUpdatedUser sets the "updated_user" field.
func (wgsc *WinGameSlotCreate) SetUpdatedUser(s string) *WinGameSlotCreate {
	wgsc.mutation.SetUpdatedUser(s)
	return wgsc
}

// SetNillableUpdatedUser sets the "updated_user" field if the given value is not nil.
func (wgsc *WinGameSlotCreate) SetNillableUpdatedUser(s *string) *WinGameSlotCreate {
	if s != nil {
		wgsc.SetUpdatedUser(*s)
	}
	return wgsc
}

// SetMaintenance sets the "maintenance" field.
func (wgsc *WinGameSlotCreate) SetMaintenance(s string) *WinGameSlotCreate {
	wgsc.mutation.SetMaintenance(s)
	return wgsc
}

// SetNillableMaintenance sets the "maintenance" field if the given value is not nil.
func (wgsc *WinGameSlotCreate) SetNillableMaintenance(s *string) *WinGameSlotCreate {
	if s != nil {
		wgsc.SetMaintenance(*s)
	}
	return wgsc
}

// SetOperatorName sets the "operator_name" field.
func (wgsc *WinGameSlotCreate) SetOperatorName(s string) *WinGameSlotCreate {
	wgsc.mutation.SetOperatorName(s)
	return wgsc
}

// SetNillableOperatorName sets the "operator_name" field if the given value is not nil.
func (wgsc *WinGameSlotCreate) SetNillableOperatorName(s *string) *WinGameSlotCreate {
	if s != nil {
		wgsc.SetOperatorName(*s)
	}
	return wgsc
}

// SetID sets the "id" field.
func (wgsc *WinGameSlotCreate) SetID(s string) *WinGameSlotCreate {
	wgsc.mutation.SetID(s)
	return wgsc
}

// Mutation returns the WinGameSlotMutation object of the builder.
func (wgsc *WinGameSlotCreate) Mutation() *WinGameSlotMutation {
	return wgsc.mutation
}

// Save creates the WinGameSlot in the database.
func (wgsc *WinGameSlotCreate) Save(ctx context.Context) (*WinGameSlot, error) {
	return withHooks(ctx, wgsc.sqlSave, wgsc.mutation, wgsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wgsc *WinGameSlotCreate) SaveX(ctx context.Context) *WinGameSlot {
	v, err := wgsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wgsc *WinGameSlotCreate) Exec(ctx context.Context) error {
	_, err := wgsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wgsc *WinGameSlotCreate) ExecX(ctx context.Context) {
	if err := wgsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wgsc *WinGameSlotCreate) check() error {
	if _, ok := wgsc.mutation.GameID(); !ok {
		return &ValidationError{Name: "game_id", err: errors.New(`ent: missing required field "WinGameSlot.game_id"`)}
	}
	if _, ok := wgsc.mutation.GameGroupID(); !ok {
		return &ValidationError{Name: "game_group_id", err: errors.New(`ent: missing required field "WinGameSlot.game_group_id"`)}
	}
	if _, ok := wgsc.mutation.PlatID(); !ok {
		return &ValidationError{Name: "plat_id", err: errors.New(`ent: missing required field "WinGameSlot.plat_id"`)}
	}
	if _, ok := wgsc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "WinGameSlot.name"`)}
	}
	if _, ok := wgsc.mutation.NameZh(); !ok {
		return &ValidationError{Name: "name_zh", err: errors.New(`ent: missing required field "WinGameSlot.name_zh"`)}
	}
	if _, ok := wgsc.mutation.Img(); !ok {
		return &ValidationError{Name: "img", err: errors.New(`ent: missing required field "WinGameSlot.img"`)}
	}
	if _, ok := wgsc.mutation.IsNew(); !ok {
		return &ValidationError{Name: "is_new", err: errors.New(`ent: missing required field "WinGameSlot.is_new"`)}
	}
	if _, ok := wgsc.mutation.IsCasino(); !ok {
		return &ValidationError{Name: "is_casino", err: errors.New(`ent: missing required field "WinGameSlot.is_casino"`)}
	}
	if _, ok := wgsc.mutation.FavoriteStar(); !ok {
		return &ValidationError{Name: "favorite_star", err: errors.New(`ent: missing required field "WinGameSlot.favorite_star"`)}
	}
	if _, ok := wgsc.mutation.HotStar(); !ok {
		return &ValidationError{Name: "hot_star", err: errors.New(`ent: missing required field "WinGameSlot.hot_star"`)}
	}
	if _, ok := wgsc.mutation.Sort(); !ok {
		return &ValidationError{Name: "sort", err: errors.New(`ent: missing required field "WinGameSlot.sort"`)}
	}
	if _, ok := wgsc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "WinGameSlot.status"`)}
	}
	if _, ok := wgsc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "WinGameSlot.created_at"`)}
	}
	if _, ok := wgsc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "WinGameSlot.updated_at"`)}
	}
	return nil
}

func (wgsc *WinGameSlotCreate) sqlSave(ctx context.Context) (*WinGameSlot, error) {
	if err := wgsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := wgsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wgsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected WinGameSlot.ID type: %T", _spec.ID.Value)
		}
	}
	wgsc.mutation.id = &_node.ID
	wgsc.mutation.done = true
	return _node, nil
}

func (wgsc *WinGameSlotCreate) createSpec() (*WinGameSlot, *sqlgraph.CreateSpec) {
	var (
		_node = &WinGameSlot{config: wgsc.config}
		_spec = sqlgraph.NewCreateSpec(wingameslot.Table, sqlgraph.NewFieldSpec(wingameslot.FieldID, field.TypeString))
	)
	if id, ok := wgsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := wgsc.mutation.GameID(); ok {
		_spec.SetField(wingameslot.FieldGameID, field.TypeInt32, value)
		_node.GameID = value
	}
	if value, ok := wgsc.mutation.GameGroupID(); ok {
		_spec.SetField(wingameslot.FieldGameGroupID, field.TypeInt8, value)
		_node.GameGroupID = value
	}
	if value, ok := wgsc.mutation.PlatID(); ok {
		_spec.SetField(wingameslot.FieldPlatID, field.TypeInt32, value)
		_node.PlatID = value
	}
	if value, ok := wgsc.mutation.Provider(); ok {
		_spec.SetField(wingameslot.FieldProvider, field.TypeString, value)
		_node.Provider = value
	}
	if value, ok := wgsc.mutation.Name(); ok {
		_spec.SetField(wingameslot.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := wgsc.mutation.NameZh(); ok {
		_spec.SetField(wingameslot.FieldNameZh, field.TypeString, value)
		_node.NameZh = value
	}
	if value, ok := wgsc.mutation.Img(); ok {
		_spec.SetField(wingameslot.FieldImg, field.TypeString, value)
		_node.Img = value
	}
	if value, ok := wgsc.mutation.ImgNew(); ok {
		_spec.SetField(wingameslot.FieldImgNew, field.TypeString, value)
		_node.ImgNew = value
	}
	if value, ok := wgsc.mutation.IsNew(); ok {
		_spec.SetField(wingameslot.FieldIsNew, field.TypeBool, value)
		_node.IsNew = value
	}
	if value, ok := wgsc.mutation.IsCasino(); ok {
		_spec.SetField(wingameslot.FieldIsCasino, field.TypeInt8, value)
		_node.IsCasino = value
	}
	if value, ok := wgsc.mutation.GameTypeID(); ok {
		_spec.SetField(wingameslot.FieldGameTypeID, field.TypeString, value)
		_node.GameTypeID = value
	}
	if value, ok := wgsc.mutation.GameTypeName(); ok {
		_spec.SetField(wingameslot.FieldGameTypeName, field.TypeString, value)
		_node.GameTypeName = value
	}
	if value, ok := wgsc.mutation.FavoriteStar(); ok {
		_spec.SetField(wingameslot.FieldFavoriteStar, field.TypeInt32, value)
		_node.FavoriteStar = value
	}
	if value, ok := wgsc.mutation.HotStar(); ok {
		_spec.SetField(wingameslot.FieldHotStar, field.TypeInt32, value)
		_node.HotStar = value
	}
	if value, ok := wgsc.mutation.Sort(); ok {
		_spec.SetField(wingameslot.FieldSort, field.TypeInt32, value)
		_node.Sort = value
	}
	if value, ok := wgsc.mutation.Status(); ok {
		_spec.SetField(wingameslot.FieldStatus, field.TypeInt8, value)
		_node.Status = value
	}
	if value, ok := wgsc.mutation.Device(); ok {
		_spec.SetField(wingameslot.FieldDevice, field.TypeInt8, value)
		_node.Device = value
	}
	if value, ok := wgsc.mutation.CreatedAt(); ok {
		_spec.SetField(wingameslot.FieldCreatedAt, field.TypeInt32, value)
		_node.CreatedAt = value
	}
	if value, ok := wgsc.mutation.UpdatedAt(); ok {
		_spec.SetField(wingameslot.FieldUpdatedAt, field.TypeInt32, value)
		_node.UpdatedAt = value
	}
	if value, ok := wgsc.mutation.UpdatedUser(); ok {
		_spec.SetField(wingameslot.FieldUpdatedUser, field.TypeString, value)
		_node.UpdatedUser = value
	}
	if value, ok := wgsc.mutation.Maintenance(); ok {
		_spec.SetField(wingameslot.FieldMaintenance, field.TypeString, value)
		_node.Maintenance = value
	}
	if value, ok := wgsc.mutation.OperatorName(); ok {
		_spec.SetField(wingameslot.FieldOperatorName, field.TypeString, value)
		_node.OperatorName = value
	}
	return _node, _spec
}

// WinGameSlotCreateBulk is the builder for creating many WinGameSlot entities in bulk.
type WinGameSlotCreateBulk struct {
	config
	builders []*WinGameSlotCreate
}

// Save creates the WinGameSlot entities in the database.
func (wgscb *WinGameSlotCreateBulk) Save(ctx context.Context) ([]*WinGameSlot, error) {
	specs := make([]*sqlgraph.CreateSpec, len(wgscb.builders))
	nodes := make([]*WinGameSlot, len(wgscb.builders))
	mutators := make([]Mutator, len(wgscb.builders))
	for i := range wgscb.builders {
		func(i int, root context.Context) {
			builder := wgscb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WinGameSlotMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wgscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wgscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wgscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wgscb *WinGameSlotCreateBulk) SaveX(ctx context.Context) []*WinGameSlot {
	v, err := wgscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wgscb *WinGameSlotCreateBulk) Exec(ctx context.Context) error {
	_, err := wgscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wgscb *WinGameSlotCreateBulk) ExecX(ctx context.Context) {
	if err := wgscb.Exec(ctx); err != nil {
		panic(err)
	}
}
