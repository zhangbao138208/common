// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.skig.tech/zero-core/common/ent/predicate"
	"gitlab.skig.tech/zero-core/common/ent/wingamelist"
)

// WinGameListUpdate is the builder for updating WinGameList entities.
type WinGameListUpdate struct {
	config
	hooks    []Hook
	mutation *WinGameListMutation
}

// Where appends a list predicates to the WinGameListUpdate builder.
func (wglu *WinGameListUpdate) Where(ps ...predicate.WinGameList) *WinGameListUpdate {
	wglu.mutation.Where(ps...)
	return wglu
}

// SetCode sets the "code" field.
func (wglu *WinGameListUpdate) SetCode(s string) *WinGameListUpdate {
	wglu.mutation.SetCode(s)
	return wglu
}

// SetName sets the "name" field.
func (wglu *WinGameListUpdate) SetName(s string) *WinGameListUpdate {
	wglu.mutation.SetName(s)
	return wglu
}

// SetIcon sets the "icon" field.
func (wglu *WinGameListUpdate) SetIcon(s string) *WinGameListUpdate {
	wglu.mutation.SetIcon(s)
	return wglu
}

// SetGroupID sets the "group_id" field.
func (wglu *WinGameListUpdate) SetGroupID(i int8) *WinGameListUpdate {
	wglu.mutation.ResetGroupID()
	wglu.mutation.SetGroupID(i)
	return wglu
}

// AddGroupID adds i to the "group_id" field.
func (wglu *WinGameListUpdate) AddGroupID(i int8) *WinGameListUpdate {
	wglu.mutation.AddGroupID(i)
	return wglu
}

// SetPlatListID sets the "plat_list_id" field.
func (wglu *WinGameListUpdate) SetPlatListID(i int32) *WinGameListUpdate {
	wglu.mutation.ResetPlatListID()
	wglu.mutation.SetPlatListID(i)
	return wglu
}

// AddPlatListID adds i to the "plat_list_id" field.
func (wglu *WinGameListUpdate) AddPlatListID(i int32) *WinGameListUpdate {
	wglu.mutation.AddPlatListID(i)
	return wglu
}

// SetRevenueRate sets the "revenue_rate" field.
func (wglu *WinGameListUpdate) SetRevenueRate(f float64) *WinGameListUpdate {
	wglu.mutation.ResetRevenueRate()
	wglu.mutation.SetRevenueRate(f)
	return wglu
}

// AddRevenueRate adds f to the "revenue_rate" field.
func (wglu *WinGameListUpdate) AddRevenueRate(f float64) *WinGameListUpdate {
	wglu.mutation.AddRevenueRate(f)
	return wglu
}

// SetMaintenance sets the "maintenance" field.
func (wglu *WinGameListUpdate) SetMaintenance(s string) *WinGameListUpdate {
	wglu.mutation.SetMaintenance(s)
	return wglu
}

// SetNillableMaintenance sets the "maintenance" field if the given value is not nil.
func (wglu *WinGameListUpdate) SetNillableMaintenance(s *string) *WinGameListUpdate {
	if s != nil {
		wglu.SetMaintenance(*s)
	}
	return wglu
}

// ClearMaintenance clears the value of the "maintenance" field.
func (wglu *WinGameListUpdate) ClearMaintenance() *WinGameListUpdate {
	wglu.mutation.ClearMaintenance()
	return wglu
}

// SetGameCount sets the "game_count" field.
func (wglu *WinGameListUpdate) SetGameCount(i int32) *WinGameListUpdate {
	wglu.mutation.ResetGameCount()
	wglu.mutation.SetGameCount(i)
	return wglu
}

// SetNillableGameCount sets the "game_count" field if the given value is not nil.
func (wglu *WinGameListUpdate) SetNillableGameCount(i *int32) *WinGameListUpdate {
	if i != nil {
		wglu.SetGameCount(*i)
	}
	return wglu
}

// AddGameCount adds i to the "game_count" field.
func (wglu *WinGameListUpdate) AddGameCount(i int32) *WinGameListUpdate {
	wglu.mutation.AddGameCount(i)
	return wglu
}

// ClearGameCount clears the value of the "game_count" field.
func (wglu *WinGameListUpdate) ClearGameCount() *WinGameListUpdate {
	wglu.mutation.ClearGameCount()
	return wglu
}

// SetRemark sets the "remark" field.
func (wglu *WinGameListUpdate) SetRemark(s string) *WinGameListUpdate {
	wglu.mutation.SetRemark(s)
	return wglu
}

// SetSort sets the "sort" field.
func (wglu *WinGameListUpdate) SetSort(i int8) *WinGameListUpdate {
	wglu.mutation.ResetSort()
	wglu.mutation.SetSort(i)
	return wglu
}

// AddSort adds i to the "sort" field.
func (wglu *WinGameListUpdate) AddSort(i int8) *WinGameListUpdate {
	wglu.mutation.AddSort(i)
	return wglu
}

// SetStatus sets the "status" field.
func (wglu *WinGameListUpdate) SetStatus(i int8) *WinGameListUpdate {
	wglu.mutation.ResetStatus()
	wglu.mutation.SetStatus(i)
	return wglu
}

// AddStatus adds i to the "status" field.
func (wglu *WinGameListUpdate) AddStatus(i int8) *WinGameListUpdate {
	wglu.mutation.AddStatus(i)
	return wglu
}

// SetCreatedAt sets the "created_at" field.
func (wglu *WinGameListUpdate) SetCreatedAt(i int32) *WinGameListUpdate {
	wglu.mutation.ResetCreatedAt()
	wglu.mutation.SetCreatedAt(i)
	return wglu
}

// AddCreatedAt adds i to the "created_at" field.
func (wglu *WinGameListUpdate) AddCreatedAt(i int32) *WinGameListUpdate {
	wglu.mutation.AddCreatedAt(i)
	return wglu
}

// SetUpdatedAt sets the "updated_at" field.
func (wglu *WinGameListUpdate) SetUpdatedAt(i int32) *WinGameListUpdate {
	wglu.mutation.ResetUpdatedAt()
	wglu.mutation.SetUpdatedAt(i)
	return wglu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (wglu *WinGameListUpdate) AddUpdatedAt(i int32) *WinGameListUpdate {
	wglu.mutation.AddUpdatedAt(i)
	return wglu
}

// SetUpdatedUser sets the "updated_user" field.
func (wglu *WinGameListUpdate) SetUpdatedUser(s string) *WinGameListUpdate {
	wglu.mutation.SetUpdatedUser(s)
	return wglu
}

// SetNillableUpdatedUser sets the "updated_user" field if the given value is not nil.
func (wglu *WinGameListUpdate) SetNillableUpdatedUser(s *string) *WinGameListUpdate {
	if s != nil {
		wglu.SetUpdatedUser(*s)
	}
	return wglu
}

// ClearUpdatedUser clears the value of the "updated_user" field.
func (wglu *WinGameListUpdate) ClearUpdatedUser() *WinGameListUpdate {
	wglu.mutation.ClearUpdatedUser()
	return wglu
}

// SetOperatorName sets the "operator_name" field.
func (wglu *WinGameListUpdate) SetOperatorName(s string) *WinGameListUpdate {
	wglu.mutation.SetOperatorName(s)
	return wglu
}

// SetNillableOperatorName sets the "operator_name" field if the given value is not nil.
func (wglu *WinGameListUpdate) SetNillableOperatorName(s *string) *WinGameListUpdate {
	if s != nil {
		wglu.SetOperatorName(*s)
	}
	return wglu
}

// ClearOperatorName clears the value of the "operator_name" field.
func (wglu *WinGameListUpdate) ClearOperatorName() *WinGameListUpdate {
	wglu.mutation.ClearOperatorName()
	return wglu
}

// SetCategory sets the "category" field.
func (wglu *WinGameListUpdate) SetCategory(s string) *WinGameListUpdate {
	wglu.mutation.SetCategory(s)
	return wglu
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (wglu *WinGameListUpdate) SetNillableCategory(s *string) *WinGameListUpdate {
	if s != nil {
		wglu.SetCategory(*s)
	}
	return wglu
}

// ClearCategory clears the value of the "category" field.
func (wglu *WinGameListUpdate) ClearCategory() *WinGameListUpdate {
	wglu.mutation.ClearCategory()
	return wglu
}

// Mutation returns the WinGameListMutation object of the builder.
func (wglu *WinGameListUpdate) Mutation() *WinGameListMutation {
	return wglu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wglu *WinGameListUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, wglu.sqlSave, wglu.mutation, wglu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wglu *WinGameListUpdate) SaveX(ctx context.Context) int {
	affected, err := wglu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wglu *WinGameListUpdate) Exec(ctx context.Context) error {
	_, err := wglu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wglu *WinGameListUpdate) ExecX(ctx context.Context) {
	if err := wglu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wglu *WinGameListUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(wingamelist.Table, wingamelist.Columns, sqlgraph.NewFieldSpec(wingamelist.FieldID, field.TypeInt32))
	if ps := wglu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wglu.mutation.Code(); ok {
		_spec.SetField(wingamelist.FieldCode, field.TypeString, value)
	}
	if value, ok := wglu.mutation.Name(); ok {
		_spec.SetField(wingamelist.FieldName, field.TypeString, value)
	}
	if value, ok := wglu.mutation.Icon(); ok {
		_spec.SetField(wingamelist.FieldIcon, field.TypeString, value)
	}
	if value, ok := wglu.mutation.GroupID(); ok {
		_spec.SetField(wingamelist.FieldGroupID, field.TypeInt8, value)
	}
	if value, ok := wglu.mutation.AddedGroupID(); ok {
		_spec.AddField(wingamelist.FieldGroupID, field.TypeInt8, value)
	}
	if value, ok := wglu.mutation.PlatListID(); ok {
		_spec.SetField(wingamelist.FieldPlatListID, field.TypeInt32, value)
	}
	if value, ok := wglu.mutation.AddedPlatListID(); ok {
		_spec.AddField(wingamelist.FieldPlatListID, field.TypeInt32, value)
	}
	if value, ok := wglu.mutation.RevenueRate(); ok {
		_spec.SetField(wingamelist.FieldRevenueRate, field.TypeFloat64, value)
	}
	if value, ok := wglu.mutation.AddedRevenueRate(); ok {
		_spec.AddField(wingamelist.FieldRevenueRate, field.TypeFloat64, value)
	}
	if value, ok := wglu.mutation.Maintenance(); ok {
		_spec.SetField(wingamelist.FieldMaintenance, field.TypeString, value)
	}
	if wglu.mutation.MaintenanceCleared() {
		_spec.ClearField(wingamelist.FieldMaintenance, field.TypeString)
	}
	if value, ok := wglu.mutation.GameCount(); ok {
		_spec.SetField(wingamelist.FieldGameCount, field.TypeInt32, value)
	}
	if value, ok := wglu.mutation.AddedGameCount(); ok {
		_spec.AddField(wingamelist.FieldGameCount, field.TypeInt32, value)
	}
	if wglu.mutation.GameCountCleared() {
		_spec.ClearField(wingamelist.FieldGameCount, field.TypeInt32)
	}
	if value, ok := wglu.mutation.Remark(); ok {
		_spec.SetField(wingamelist.FieldRemark, field.TypeString, value)
	}
	if value, ok := wglu.mutation.Sort(); ok {
		_spec.SetField(wingamelist.FieldSort, field.TypeInt8, value)
	}
	if value, ok := wglu.mutation.AddedSort(); ok {
		_spec.AddField(wingamelist.FieldSort, field.TypeInt8, value)
	}
	if value, ok := wglu.mutation.Status(); ok {
		_spec.SetField(wingamelist.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := wglu.mutation.AddedStatus(); ok {
		_spec.AddField(wingamelist.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := wglu.mutation.CreatedAt(); ok {
		_spec.SetField(wingamelist.FieldCreatedAt, field.TypeInt32, value)
	}
	if value, ok := wglu.mutation.AddedCreatedAt(); ok {
		_spec.AddField(wingamelist.FieldCreatedAt, field.TypeInt32, value)
	}
	if value, ok := wglu.mutation.UpdatedAt(); ok {
		_spec.SetField(wingamelist.FieldUpdatedAt, field.TypeInt32, value)
	}
	if value, ok := wglu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(wingamelist.FieldUpdatedAt, field.TypeInt32, value)
	}
	if value, ok := wglu.mutation.UpdatedUser(); ok {
		_spec.SetField(wingamelist.FieldUpdatedUser, field.TypeString, value)
	}
	if wglu.mutation.UpdatedUserCleared() {
		_spec.ClearField(wingamelist.FieldUpdatedUser, field.TypeString)
	}
	if value, ok := wglu.mutation.OperatorName(); ok {
		_spec.SetField(wingamelist.FieldOperatorName, field.TypeString, value)
	}
	if wglu.mutation.OperatorNameCleared() {
		_spec.ClearField(wingamelist.FieldOperatorName, field.TypeString)
	}
	if value, ok := wglu.mutation.Category(); ok {
		_spec.SetField(wingamelist.FieldCategory, field.TypeString, value)
	}
	if wglu.mutation.CategoryCleared() {
		_spec.ClearField(wingamelist.FieldCategory, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wglu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{wingamelist.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wglu.mutation.done = true
	return n, nil
}

// WinGameListUpdateOne is the builder for updating a single WinGameList entity.
type WinGameListUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WinGameListMutation
}

// SetCode sets the "code" field.
func (wgluo *WinGameListUpdateOne) SetCode(s string) *WinGameListUpdateOne {
	wgluo.mutation.SetCode(s)
	return wgluo
}

// SetName sets the "name" field.
func (wgluo *WinGameListUpdateOne) SetName(s string) *WinGameListUpdateOne {
	wgluo.mutation.SetName(s)
	return wgluo
}

// SetIcon sets the "icon" field.
func (wgluo *WinGameListUpdateOne) SetIcon(s string) *WinGameListUpdateOne {
	wgluo.mutation.SetIcon(s)
	return wgluo
}

// SetGroupID sets the "group_id" field.
func (wgluo *WinGameListUpdateOne) SetGroupID(i int8) *WinGameListUpdateOne {
	wgluo.mutation.ResetGroupID()
	wgluo.mutation.SetGroupID(i)
	return wgluo
}

// AddGroupID adds i to the "group_id" field.
func (wgluo *WinGameListUpdateOne) AddGroupID(i int8) *WinGameListUpdateOne {
	wgluo.mutation.AddGroupID(i)
	return wgluo
}

// SetPlatListID sets the "plat_list_id" field.
func (wgluo *WinGameListUpdateOne) SetPlatListID(i int32) *WinGameListUpdateOne {
	wgluo.mutation.ResetPlatListID()
	wgluo.mutation.SetPlatListID(i)
	return wgluo
}

// AddPlatListID adds i to the "plat_list_id" field.
func (wgluo *WinGameListUpdateOne) AddPlatListID(i int32) *WinGameListUpdateOne {
	wgluo.mutation.AddPlatListID(i)
	return wgluo
}

// SetRevenueRate sets the "revenue_rate" field.
func (wgluo *WinGameListUpdateOne) SetRevenueRate(f float64) *WinGameListUpdateOne {
	wgluo.mutation.ResetRevenueRate()
	wgluo.mutation.SetRevenueRate(f)
	return wgluo
}

// AddRevenueRate adds f to the "revenue_rate" field.
func (wgluo *WinGameListUpdateOne) AddRevenueRate(f float64) *WinGameListUpdateOne {
	wgluo.mutation.AddRevenueRate(f)
	return wgluo
}

// SetMaintenance sets the "maintenance" field.
func (wgluo *WinGameListUpdateOne) SetMaintenance(s string) *WinGameListUpdateOne {
	wgluo.mutation.SetMaintenance(s)
	return wgluo
}

// SetNillableMaintenance sets the "maintenance" field if the given value is not nil.
func (wgluo *WinGameListUpdateOne) SetNillableMaintenance(s *string) *WinGameListUpdateOne {
	if s != nil {
		wgluo.SetMaintenance(*s)
	}
	return wgluo
}

// ClearMaintenance clears the value of the "maintenance" field.
func (wgluo *WinGameListUpdateOne) ClearMaintenance() *WinGameListUpdateOne {
	wgluo.mutation.ClearMaintenance()
	return wgluo
}

// SetGameCount sets the "game_count" field.
func (wgluo *WinGameListUpdateOne) SetGameCount(i int32) *WinGameListUpdateOne {
	wgluo.mutation.ResetGameCount()
	wgluo.mutation.SetGameCount(i)
	return wgluo
}

// SetNillableGameCount sets the "game_count" field if the given value is not nil.
func (wgluo *WinGameListUpdateOne) SetNillableGameCount(i *int32) *WinGameListUpdateOne {
	if i != nil {
		wgluo.SetGameCount(*i)
	}
	return wgluo
}

// AddGameCount adds i to the "game_count" field.
func (wgluo *WinGameListUpdateOne) AddGameCount(i int32) *WinGameListUpdateOne {
	wgluo.mutation.AddGameCount(i)
	return wgluo
}

// ClearGameCount clears the value of the "game_count" field.
func (wgluo *WinGameListUpdateOne) ClearGameCount() *WinGameListUpdateOne {
	wgluo.mutation.ClearGameCount()
	return wgluo
}

// SetRemark sets the "remark" field.
func (wgluo *WinGameListUpdateOne) SetRemark(s string) *WinGameListUpdateOne {
	wgluo.mutation.SetRemark(s)
	return wgluo
}

// SetSort sets the "sort" field.
func (wgluo *WinGameListUpdateOne) SetSort(i int8) *WinGameListUpdateOne {
	wgluo.mutation.ResetSort()
	wgluo.mutation.SetSort(i)
	return wgluo
}

// AddSort adds i to the "sort" field.
func (wgluo *WinGameListUpdateOne) AddSort(i int8) *WinGameListUpdateOne {
	wgluo.mutation.AddSort(i)
	return wgluo
}

// SetStatus sets the "status" field.
func (wgluo *WinGameListUpdateOne) SetStatus(i int8) *WinGameListUpdateOne {
	wgluo.mutation.ResetStatus()
	wgluo.mutation.SetStatus(i)
	return wgluo
}

// AddStatus adds i to the "status" field.
func (wgluo *WinGameListUpdateOne) AddStatus(i int8) *WinGameListUpdateOne {
	wgluo.mutation.AddStatus(i)
	return wgluo
}

// SetCreatedAt sets the "created_at" field.
func (wgluo *WinGameListUpdateOne) SetCreatedAt(i int32) *WinGameListUpdateOne {
	wgluo.mutation.ResetCreatedAt()
	wgluo.mutation.SetCreatedAt(i)
	return wgluo
}

// AddCreatedAt adds i to the "created_at" field.
func (wgluo *WinGameListUpdateOne) AddCreatedAt(i int32) *WinGameListUpdateOne {
	wgluo.mutation.AddCreatedAt(i)
	return wgluo
}

// SetUpdatedAt sets the "updated_at" field.
func (wgluo *WinGameListUpdateOne) SetUpdatedAt(i int32) *WinGameListUpdateOne {
	wgluo.mutation.ResetUpdatedAt()
	wgluo.mutation.SetUpdatedAt(i)
	return wgluo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (wgluo *WinGameListUpdateOne) AddUpdatedAt(i int32) *WinGameListUpdateOne {
	wgluo.mutation.AddUpdatedAt(i)
	return wgluo
}

// SetUpdatedUser sets the "updated_user" field.
func (wgluo *WinGameListUpdateOne) SetUpdatedUser(s string) *WinGameListUpdateOne {
	wgluo.mutation.SetUpdatedUser(s)
	return wgluo
}

// SetNillableUpdatedUser sets the "updated_user" field if the given value is not nil.
func (wgluo *WinGameListUpdateOne) SetNillableUpdatedUser(s *string) *WinGameListUpdateOne {
	if s != nil {
		wgluo.SetUpdatedUser(*s)
	}
	return wgluo
}

// ClearUpdatedUser clears the value of the "updated_user" field.
func (wgluo *WinGameListUpdateOne) ClearUpdatedUser() *WinGameListUpdateOne {
	wgluo.mutation.ClearUpdatedUser()
	return wgluo
}

// SetOperatorName sets the "operator_name" field.
func (wgluo *WinGameListUpdateOne) SetOperatorName(s string) *WinGameListUpdateOne {
	wgluo.mutation.SetOperatorName(s)
	return wgluo
}

// SetNillableOperatorName sets the "operator_name" field if the given value is not nil.
func (wgluo *WinGameListUpdateOne) SetNillableOperatorName(s *string) *WinGameListUpdateOne {
	if s != nil {
		wgluo.SetOperatorName(*s)
	}
	return wgluo
}

// ClearOperatorName clears the value of the "operator_name" field.
func (wgluo *WinGameListUpdateOne) ClearOperatorName() *WinGameListUpdateOne {
	wgluo.mutation.ClearOperatorName()
	return wgluo
}

// SetCategory sets the "category" field.
func (wgluo *WinGameListUpdateOne) SetCategory(s string) *WinGameListUpdateOne {
	wgluo.mutation.SetCategory(s)
	return wgluo
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (wgluo *WinGameListUpdateOne) SetNillableCategory(s *string) *WinGameListUpdateOne {
	if s != nil {
		wgluo.SetCategory(*s)
	}
	return wgluo
}

// ClearCategory clears the value of the "category" field.
func (wgluo *WinGameListUpdateOne) ClearCategory() *WinGameListUpdateOne {
	wgluo.mutation.ClearCategory()
	return wgluo
}

// Mutation returns the WinGameListMutation object of the builder.
func (wgluo *WinGameListUpdateOne) Mutation() *WinGameListMutation {
	return wgluo.mutation
}

// Where appends a list predicates to the WinGameListUpdate builder.
func (wgluo *WinGameListUpdateOne) Where(ps ...predicate.WinGameList) *WinGameListUpdateOne {
	wgluo.mutation.Where(ps...)
	return wgluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wgluo *WinGameListUpdateOne) Select(field string, fields ...string) *WinGameListUpdateOne {
	wgluo.fields = append([]string{field}, fields...)
	return wgluo
}

// Save executes the query and returns the updated WinGameList entity.
func (wgluo *WinGameListUpdateOne) Save(ctx context.Context) (*WinGameList, error) {
	return withHooks(ctx, wgluo.sqlSave, wgluo.mutation, wgluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wgluo *WinGameListUpdateOne) SaveX(ctx context.Context) *WinGameList {
	node, err := wgluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wgluo *WinGameListUpdateOne) Exec(ctx context.Context) error {
	_, err := wgluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wgluo *WinGameListUpdateOne) ExecX(ctx context.Context) {
	if err := wgluo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wgluo *WinGameListUpdateOne) sqlSave(ctx context.Context) (_node *WinGameList, err error) {
	_spec := sqlgraph.NewUpdateSpec(wingamelist.Table, wingamelist.Columns, sqlgraph.NewFieldSpec(wingamelist.FieldID, field.TypeInt32))
	id, ok := wgluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WinGameList.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wgluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, wingamelist.FieldID)
		for _, f := range fields {
			if !wingamelist.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != wingamelist.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wgluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wgluo.mutation.Code(); ok {
		_spec.SetField(wingamelist.FieldCode, field.TypeString, value)
	}
	if value, ok := wgluo.mutation.Name(); ok {
		_spec.SetField(wingamelist.FieldName, field.TypeString, value)
	}
	if value, ok := wgluo.mutation.Icon(); ok {
		_spec.SetField(wingamelist.FieldIcon, field.TypeString, value)
	}
	if value, ok := wgluo.mutation.GroupID(); ok {
		_spec.SetField(wingamelist.FieldGroupID, field.TypeInt8, value)
	}
	if value, ok := wgluo.mutation.AddedGroupID(); ok {
		_spec.AddField(wingamelist.FieldGroupID, field.TypeInt8, value)
	}
	if value, ok := wgluo.mutation.PlatListID(); ok {
		_spec.SetField(wingamelist.FieldPlatListID, field.TypeInt32, value)
	}
	if value, ok := wgluo.mutation.AddedPlatListID(); ok {
		_spec.AddField(wingamelist.FieldPlatListID, field.TypeInt32, value)
	}
	if value, ok := wgluo.mutation.RevenueRate(); ok {
		_spec.SetField(wingamelist.FieldRevenueRate, field.TypeFloat64, value)
	}
	if value, ok := wgluo.mutation.AddedRevenueRate(); ok {
		_spec.AddField(wingamelist.FieldRevenueRate, field.TypeFloat64, value)
	}
	if value, ok := wgluo.mutation.Maintenance(); ok {
		_spec.SetField(wingamelist.FieldMaintenance, field.TypeString, value)
	}
	if wgluo.mutation.MaintenanceCleared() {
		_spec.ClearField(wingamelist.FieldMaintenance, field.TypeString)
	}
	if value, ok := wgluo.mutation.GameCount(); ok {
		_spec.SetField(wingamelist.FieldGameCount, field.TypeInt32, value)
	}
	if value, ok := wgluo.mutation.AddedGameCount(); ok {
		_spec.AddField(wingamelist.FieldGameCount, field.TypeInt32, value)
	}
	if wgluo.mutation.GameCountCleared() {
		_spec.ClearField(wingamelist.FieldGameCount, field.TypeInt32)
	}
	if value, ok := wgluo.mutation.Remark(); ok {
		_spec.SetField(wingamelist.FieldRemark, field.TypeString, value)
	}
	if value, ok := wgluo.mutation.Sort(); ok {
		_spec.SetField(wingamelist.FieldSort, field.TypeInt8, value)
	}
	if value, ok := wgluo.mutation.AddedSort(); ok {
		_spec.AddField(wingamelist.FieldSort, field.TypeInt8, value)
	}
	if value, ok := wgluo.mutation.Status(); ok {
		_spec.SetField(wingamelist.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := wgluo.mutation.AddedStatus(); ok {
		_spec.AddField(wingamelist.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := wgluo.mutation.CreatedAt(); ok {
		_spec.SetField(wingamelist.FieldCreatedAt, field.TypeInt32, value)
	}
	if value, ok := wgluo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(wingamelist.FieldCreatedAt, field.TypeInt32, value)
	}
	if value, ok := wgluo.mutation.UpdatedAt(); ok {
		_spec.SetField(wingamelist.FieldUpdatedAt, field.TypeInt32, value)
	}
	if value, ok := wgluo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(wingamelist.FieldUpdatedAt, field.TypeInt32, value)
	}
	if value, ok := wgluo.mutation.UpdatedUser(); ok {
		_spec.SetField(wingamelist.FieldUpdatedUser, field.TypeString, value)
	}
	if wgluo.mutation.UpdatedUserCleared() {
		_spec.ClearField(wingamelist.FieldUpdatedUser, field.TypeString)
	}
	if value, ok := wgluo.mutation.OperatorName(); ok {
		_spec.SetField(wingamelist.FieldOperatorName, field.TypeString, value)
	}
	if wgluo.mutation.OperatorNameCleared() {
		_spec.ClearField(wingamelist.FieldOperatorName, field.TypeString)
	}
	if value, ok := wgluo.mutation.Category(); ok {
		_spec.SetField(wingamelist.FieldCategory, field.TypeString, value)
	}
	if wgluo.mutation.CategoryCleared() {
		_spec.ClearField(wingamelist.FieldCategory, field.TypeString)
	}
	_node = &WinGameList{config: wgluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wgluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{wingamelist.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wgluo.mutation.done = true
	return _node, nil
}
