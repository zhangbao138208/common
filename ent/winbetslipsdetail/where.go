// Code generated by ent, DO NOT EDIT.

package winbetslipsdetail

import (
	"entgo.io/ent/dialect/sql"
	"gitlab.skig.tech/zero-core/common/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldLTE(FieldID, id))
}

// XbUID applies equality check predicate on the "xb_uid" field. It's identical to XbUIDEQ.
func XbUID(v uint32) predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldEQ(FieldXbUID, v))
}

// XbUsername applies equality check predicate on the "xb_username" field. It's identical to XbUsernameEQ.
func XbUsername(v string) predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldEQ(FieldXbUsername, v))
}

// BetJSON applies equality check predicate on the "bet_json" field. It's identical to BetJSONEQ.
func BetJSON(v string) predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldEQ(FieldBetJSON, v))
}

// RewardJSON applies equality check predicate on the "reward_json" field. It's identical to RewardJSONEQ.
func RewardJSON(v string) predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldEQ(FieldRewardJSON, v))
}

// RefundJSON applies equality check predicate on the "refund_json" field. It's identical to RefundJSONEQ.
func RefundJSON(v string) predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldEQ(FieldRefundJSON, v))
}

// XbUIDEQ applies the EQ predicate on the "xb_uid" field.
func XbUIDEQ(v uint32) predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldEQ(FieldXbUID, v))
}

// XbUIDNEQ applies the NEQ predicate on the "xb_uid" field.
func XbUIDNEQ(v uint32) predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldNEQ(FieldXbUID, v))
}

// XbUIDIn applies the In predicate on the "xb_uid" field.
func XbUIDIn(vs ...uint32) predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldIn(FieldXbUID, vs...))
}

// XbUIDNotIn applies the NotIn predicate on the "xb_uid" field.
func XbUIDNotIn(vs ...uint32) predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldNotIn(FieldXbUID, vs...))
}

// XbUIDGT applies the GT predicate on the "xb_uid" field.
func XbUIDGT(v uint32) predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldGT(FieldXbUID, v))
}

// XbUIDGTE applies the GTE predicate on the "xb_uid" field.
func XbUIDGTE(v uint32) predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldGTE(FieldXbUID, v))
}

// XbUIDLT applies the LT predicate on the "xb_uid" field.
func XbUIDLT(v uint32) predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldLT(FieldXbUID, v))
}

// XbUIDLTE applies the LTE predicate on the "xb_uid" field.
func XbUIDLTE(v uint32) predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldLTE(FieldXbUID, v))
}

// XbUsernameEQ applies the EQ predicate on the "xb_username" field.
func XbUsernameEQ(v string) predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldEQ(FieldXbUsername, v))
}

// XbUsernameNEQ applies the NEQ predicate on the "xb_username" field.
func XbUsernameNEQ(v string) predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldNEQ(FieldXbUsername, v))
}

// XbUsernameIn applies the In predicate on the "xb_username" field.
func XbUsernameIn(vs ...string) predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldIn(FieldXbUsername, vs...))
}

// XbUsernameNotIn applies the NotIn predicate on the "xb_username" field.
func XbUsernameNotIn(vs ...string) predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldNotIn(FieldXbUsername, vs...))
}

// XbUsernameGT applies the GT predicate on the "xb_username" field.
func XbUsernameGT(v string) predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldGT(FieldXbUsername, v))
}

// XbUsernameGTE applies the GTE predicate on the "xb_username" field.
func XbUsernameGTE(v string) predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldGTE(FieldXbUsername, v))
}

// XbUsernameLT applies the LT predicate on the "xb_username" field.
func XbUsernameLT(v string) predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldLT(FieldXbUsername, v))
}

// XbUsernameLTE applies the LTE predicate on the "xb_username" field.
func XbUsernameLTE(v string) predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldLTE(FieldXbUsername, v))
}

// XbUsernameContains applies the Contains predicate on the "xb_username" field.
func XbUsernameContains(v string) predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldContains(FieldXbUsername, v))
}

// XbUsernameHasPrefix applies the HasPrefix predicate on the "xb_username" field.
func XbUsernameHasPrefix(v string) predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldHasPrefix(FieldXbUsername, v))
}

// XbUsernameHasSuffix applies the HasSuffix predicate on the "xb_username" field.
func XbUsernameHasSuffix(v string) predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldHasSuffix(FieldXbUsername, v))
}

// XbUsernameEqualFold applies the EqualFold predicate on the "xb_username" field.
func XbUsernameEqualFold(v string) predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldEqualFold(FieldXbUsername, v))
}

// XbUsernameContainsFold applies the ContainsFold predicate on the "xb_username" field.
func XbUsernameContainsFold(v string) predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldContainsFold(FieldXbUsername, v))
}

// BetJSONEQ applies the EQ predicate on the "bet_json" field.
func BetJSONEQ(v string) predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldEQ(FieldBetJSON, v))
}

// BetJSONNEQ applies the NEQ predicate on the "bet_json" field.
func BetJSONNEQ(v string) predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldNEQ(FieldBetJSON, v))
}

// BetJSONIn applies the In predicate on the "bet_json" field.
func BetJSONIn(vs ...string) predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldIn(FieldBetJSON, vs...))
}

// BetJSONNotIn applies the NotIn predicate on the "bet_json" field.
func BetJSONNotIn(vs ...string) predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldNotIn(FieldBetJSON, vs...))
}

// BetJSONGT applies the GT predicate on the "bet_json" field.
func BetJSONGT(v string) predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldGT(FieldBetJSON, v))
}

// BetJSONGTE applies the GTE predicate on the "bet_json" field.
func BetJSONGTE(v string) predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldGTE(FieldBetJSON, v))
}

// BetJSONLT applies the LT predicate on the "bet_json" field.
func BetJSONLT(v string) predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldLT(FieldBetJSON, v))
}

// BetJSONLTE applies the LTE predicate on the "bet_json" field.
func BetJSONLTE(v string) predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldLTE(FieldBetJSON, v))
}

// BetJSONContains applies the Contains predicate on the "bet_json" field.
func BetJSONContains(v string) predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldContains(FieldBetJSON, v))
}

// BetJSONHasPrefix applies the HasPrefix predicate on the "bet_json" field.
func BetJSONHasPrefix(v string) predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldHasPrefix(FieldBetJSON, v))
}

// BetJSONHasSuffix applies the HasSuffix predicate on the "bet_json" field.
func BetJSONHasSuffix(v string) predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldHasSuffix(FieldBetJSON, v))
}

// BetJSONIsNil applies the IsNil predicate on the "bet_json" field.
func BetJSONIsNil() predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldIsNull(FieldBetJSON))
}

// BetJSONNotNil applies the NotNil predicate on the "bet_json" field.
func BetJSONNotNil() predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldNotNull(FieldBetJSON))
}

// BetJSONEqualFold applies the EqualFold predicate on the "bet_json" field.
func BetJSONEqualFold(v string) predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldEqualFold(FieldBetJSON, v))
}

// BetJSONContainsFold applies the ContainsFold predicate on the "bet_json" field.
func BetJSONContainsFold(v string) predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldContainsFold(FieldBetJSON, v))
}

// RewardJSONEQ applies the EQ predicate on the "reward_json" field.
func RewardJSONEQ(v string) predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldEQ(FieldRewardJSON, v))
}

// RewardJSONNEQ applies the NEQ predicate on the "reward_json" field.
func RewardJSONNEQ(v string) predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldNEQ(FieldRewardJSON, v))
}

// RewardJSONIn applies the In predicate on the "reward_json" field.
func RewardJSONIn(vs ...string) predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldIn(FieldRewardJSON, vs...))
}

// RewardJSONNotIn applies the NotIn predicate on the "reward_json" field.
func RewardJSONNotIn(vs ...string) predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldNotIn(FieldRewardJSON, vs...))
}

// RewardJSONGT applies the GT predicate on the "reward_json" field.
func RewardJSONGT(v string) predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldGT(FieldRewardJSON, v))
}

// RewardJSONGTE applies the GTE predicate on the "reward_json" field.
func RewardJSONGTE(v string) predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldGTE(FieldRewardJSON, v))
}

// RewardJSONLT applies the LT predicate on the "reward_json" field.
func RewardJSONLT(v string) predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldLT(FieldRewardJSON, v))
}

// RewardJSONLTE applies the LTE predicate on the "reward_json" field.
func RewardJSONLTE(v string) predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldLTE(FieldRewardJSON, v))
}

// RewardJSONContains applies the Contains predicate on the "reward_json" field.
func RewardJSONContains(v string) predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldContains(FieldRewardJSON, v))
}

// RewardJSONHasPrefix applies the HasPrefix predicate on the "reward_json" field.
func RewardJSONHasPrefix(v string) predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldHasPrefix(FieldRewardJSON, v))
}

// RewardJSONHasSuffix applies the HasSuffix predicate on the "reward_json" field.
func RewardJSONHasSuffix(v string) predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldHasSuffix(FieldRewardJSON, v))
}

// RewardJSONIsNil applies the IsNil predicate on the "reward_json" field.
func RewardJSONIsNil() predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldIsNull(FieldRewardJSON))
}

// RewardJSONNotNil applies the NotNil predicate on the "reward_json" field.
func RewardJSONNotNil() predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldNotNull(FieldRewardJSON))
}

// RewardJSONEqualFold applies the EqualFold predicate on the "reward_json" field.
func RewardJSONEqualFold(v string) predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldEqualFold(FieldRewardJSON, v))
}

// RewardJSONContainsFold applies the ContainsFold predicate on the "reward_json" field.
func RewardJSONContainsFold(v string) predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldContainsFold(FieldRewardJSON, v))
}

// RefundJSONEQ applies the EQ predicate on the "refund_json" field.
func RefundJSONEQ(v string) predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldEQ(FieldRefundJSON, v))
}

// RefundJSONNEQ applies the NEQ predicate on the "refund_json" field.
func RefundJSONNEQ(v string) predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldNEQ(FieldRefundJSON, v))
}

// RefundJSONIn applies the In predicate on the "refund_json" field.
func RefundJSONIn(vs ...string) predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldIn(FieldRefundJSON, vs...))
}

// RefundJSONNotIn applies the NotIn predicate on the "refund_json" field.
func RefundJSONNotIn(vs ...string) predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldNotIn(FieldRefundJSON, vs...))
}

// RefundJSONGT applies the GT predicate on the "refund_json" field.
func RefundJSONGT(v string) predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldGT(FieldRefundJSON, v))
}

// RefundJSONGTE applies the GTE predicate on the "refund_json" field.
func RefundJSONGTE(v string) predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldGTE(FieldRefundJSON, v))
}

// RefundJSONLT applies the LT predicate on the "refund_json" field.
func RefundJSONLT(v string) predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldLT(FieldRefundJSON, v))
}

// RefundJSONLTE applies the LTE predicate on the "refund_json" field.
func RefundJSONLTE(v string) predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldLTE(FieldRefundJSON, v))
}

// RefundJSONContains applies the Contains predicate on the "refund_json" field.
func RefundJSONContains(v string) predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldContains(FieldRefundJSON, v))
}

// RefundJSONHasPrefix applies the HasPrefix predicate on the "refund_json" field.
func RefundJSONHasPrefix(v string) predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldHasPrefix(FieldRefundJSON, v))
}

// RefundJSONHasSuffix applies the HasSuffix predicate on the "refund_json" field.
func RefundJSONHasSuffix(v string) predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldHasSuffix(FieldRefundJSON, v))
}

// RefundJSONIsNil applies the IsNil predicate on the "refund_json" field.
func RefundJSONIsNil() predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldIsNull(FieldRefundJSON))
}

// RefundJSONNotNil applies the NotNil predicate on the "refund_json" field.
func RefundJSONNotNil() predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldNotNull(FieldRefundJSON))
}

// RefundJSONEqualFold applies the EqualFold predicate on the "refund_json" field.
func RefundJSONEqualFold(v string) predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldEqualFold(FieldRefundJSON, v))
}

// RefundJSONContainsFold applies the ContainsFold predicate on the "refund_json" field.
func RefundJSONContainsFold(v string) predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(sql.FieldContainsFold(FieldRefundJSON, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.WinBetslipsDetail) predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.WinBetslipsDetail) predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.WinBetslipsDetail) predicate.WinBetslipsDetail {
	return predicate.WinBetslipsDetail(func(s *sql.Selector) {
		p(s.Not())
	})
}
