// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.skig.tech/zero-core/common/ent/predicate"
	"gitlab.skig.tech/zero-core/common/ent/winconfig"
)

// WinConfigUpdate is the builder for updating WinConfig entities.
type WinConfigUpdate struct {
	config
	hooks    []Hook
	mutation *WinConfigMutation
}

// Where appends a list predicates to the WinConfigUpdate builder.
func (wcu *WinConfigUpdate) Where(ps ...predicate.WinConfig) *WinConfigUpdate {
	wcu.mutation.Where(ps...)
	return wcu
}

// SetTitle sets the "title" field.
func (wcu *WinConfigUpdate) SetTitle(s string) *WinConfigUpdate {
	wcu.mutation.SetTitle(s)
	return wcu
}

// SetTitleZh sets the "title_zh" field.
func (wcu *WinConfigUpdate) SetTitleZh(s string) *WinConfigUpdate {
	wcu.mutation.SetTitleZh(s)
	return wcu
}

// SetValue sets the "value" field.
func (wcu *WinConfigUpdate) SetValue(s string) *WinConfigUpdate {
	wcu.mutation.SetValue(s)
	return wcu
}

// SetShowApp sets the "show_app" field.
func (wcu *WinConfigUpdate) SetShowApp(i int8) *WinConfigUpdate {
	wcu.mutation.ResetShowApp()
	wcu.mutation.SetShowApp(i)
	return wcu
}

// AddShowApp adds i to the "show_app" field.
func (wcu *WinConfigUpdate) AddShowApp(i int8) *WinConfigUpdate {
	wcu.mutation.AddShowApp(i)
	return wcu
}

// SetCanModify sets the "can_modify" field.
func (wcu *WinConfigUpdate) SetCanModify(i int8) *WinConfigUpdate {
	wcu.mutation.ResetCanModify()
	wcu.mutation.SetCanModify(i)
	return wcu
}

// AddCanModify adds i to the "can_modify" field.
func (wcu *WinConfigUpdate) AddCanModify(i int8) *WinConfigUpdate {
	wcu.mutation.AddCanModify(i)
	return wcu
}

// SetStatus sets the "status" field.
func (wcu *WinConfigUpdate) SetStatus(i int8) *WinConfigUpdate {
	wcu.mutation.ResetStatus()
	wcu.mutation.SetStatus(i)
	return wcu
}

// AddStatus adds i to the "status" field.
func (wcu *WinConfigUpdate) AddStatus(i int8) *WinConfigUpdate {
	wcu.mutation.AddStatus(i)
	return wcu
}

// SetCreatedAt sets the "created_at" field.
func (wcu *WinConfigUpdate) SetCreatedAt(i int32) *WinConfigUpdate {
	wcu.mutation.ResetCreatedAt()
	wcu.mutation.SetCreatedAt(i)
	return wcu
}

// AddCreatedAt adds i to the "created_at" field.
func (wcu *WinConfigUpdate) AddCreatedAt(i int32) *WinConfigUpdate {
	wcu.mutation.AddCreatedAt(i)
	return wcu
}

// SetUpdatedAt sets the "updated_at" field.
func (wcu *WinConfigUpdate) SetUpdatedAt(i int32) *WinConfigUpdate {
	wcu.mutation.ResetUpdatedAt()
	wcu.mutation.SetUpdatedAt(i)
	return wcu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (wcu *WinConfigUpdate) AddUpdatedAt(i int32) *WinConfigUpdate {
	wcu.mutation.AddUpdatedAt(i)
	return wcu
}

// Mutation returns the WinConfigMutation object of the builder.
func (wcu *WinConfigUpdate) Mutation() *WinConfigMutation {
	return wcu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wcu *WinConfigUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, wcu.sqlSave, wcu.mutation, wcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wcu *WinConfigUpdate) SaveX(ctx context.Context) int {
	affected, err := wcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wcu *WinConfigUpdate) Exec(ctx context.Context) error {
	_, err := wcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wcu *WinConfigUpdate) ExecX(ctx context.Context) {
	if err := wcu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wcu *WinConfigUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(winconfig.Table, winconfig.Columns, sqlgraph.NewFieldSpec(winconfig.FieldID, field.TypeInt32))
	if ps := wcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wcu.mutation.Title(); ok {
		_spec.SetField(winconfig.FieldTitle, field.TypeString, value)
	}
	if value, ok := wcu.mutation.TitleZh(); ok {
		_spec.SetField(winconfig.FieldTitleZh, field.TypeString, value)
	}
	if value, ok := wcu.mutation.Value(); ok {
		_spec.SetField(winconfig.FieldValue, field.TypeString, value)
	}
	if value, ok := wcu.mutation.ShowApp(); ok {
		_spec.SetField(winconfig.FieldShowApp, field.TypeInt8, value)
	}
	if value, ok := wcu.mutation.AddedShowApp(); ok {
		_spec.AddField(winconfig.FieldShowApp, field.TypeInt8, value)
	}
	if value, ok := wcu.mutation.CanModify(); ok {
		_spec.SetField(winconfig.FieldCanModify, field.TypeInt8, value)
	}
	if value, ok := wcu.mutation.AddedCanModify(); ok {
		_spec.AddField(winconfig.FieldCanModify, field.TypeInt8, value)
	}
	if value, ok := wcu.mutation.Status(); ok {
		_spec.SetField(winconfig.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := wcu.mutation.AddedStatus(); ok {
		_spec.AddField(winconfig.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := wcu.mutation.CreatedAt(); ok {
		_spec.SetField(winconfig.FieldCreatedAt, field.TypeInt32, value)
	}
	if value, ok := wcu.mutation.AddedCreatedAt(); ok {
		_spec.AddField(winconfig.FieldCreatedAt, field.TypeInt32, value)
	}
	if value, ok := wcu.mutation.UpdatedAt(); ok {
		_spec.SetField(winconfig.FieldUpdatedAt, field.TypeInt32, value)
	}
	if value, ok := wcu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(winconfig.FieldUpdatedAt, field.TypeInt32, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{winconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wcu.mutation.done = true
	return n, nil
}

// WinConfigUpdateOne is the builder for updating a single WinConfig entity.
type WinConfigUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WinConfigMutation
}

// SetTitle sets the "title" field.
func (wcuo *WinConfigUpdateOne) SetTitle(s string) *WinConfigUpdateOne {
	wcuo.mutation.SetTitle(s)
	return wcuo
}

// SetTitleZh sets the "title_zh" field.
func (wcuo *WinConfigUpdateOne) SetTitleZh(s string) *WinConfigUpdateOne {
	wcuo.mutation.SetTitleZh(s)
	return wcuo
}

// SetValue sets the "value" field.
func (wcuo *WinConfigUpdateOne) SetValue(s string) *WinConfigUpdateOne {
	wcuo.mutation.SetValue(s)
	return wcuo
}

// SetShowApp sets the "show_app" field.
func (wcuo *WinConfigUpdateOne) SetShowApp(i int8) *WinConfigUpdateOne {
	wcuo.mutation.ResetShowApp()
	wcuo.mutation.SetShowApp(i)
	return wcuo
}

// AddShowApp adds i to the "show_app" field.
func (wcuo *WinConfigUpdateOne) AddShowApp(i int8) *WinConfigUpdateOne {
	wcuo.mutation.AddShowApp(i)
	return wcuo
}

// SetCanModify sets the "can_modify" field.
func (wcuo *WinConfigUpdateOne) SetCanModify(i int8) *WinConfigUpdateOne {
	wcuo.mutation.ResetCanModify()
	wcuo.mutation.SetCanModify(i)
	return wcuo
}

// AddCanModify adds i to the "can_modify" field.
func (wcuo *WinConfigUpdateOne) AddCanModify(i int8) *WinConfigUpdateOne {
	wcuo.mutation.AddCanModify(i)
	return wcuo
}

// SetStatus sets the "status" field.
func (wcuo *WinConfigUpdateOne) SetStatus(i int8) *WinConfigUpdateOne {
	wcuo.mutation.ResetStatus()
	wcuo.mutation.SetStatus(i)
	return wcuo
}

// AddStatus adds i to the "status" field.
func (wcuo *WinConfigUpdateOne) AddStatus(i int8) *WinConfigUpdateOne {
	wcuo.mutation.AddStatus(i)
	return wcuo
}

// SetCreatedAt sets the "created_at" field.
func (wcuo *WinConfigUpdateOne) SetCreatedAt(i int32) *WinConfigUpdateOne {
	wcuo.mutation.ResetCreatedAt()
	wcuo.mutation.SetCreatedAt(i)
	return wcuo
}

// AddCreatedAt adds i to the "created_at" field.
func (wcuo *WinConfigUpdateOne) AddCreatedAt(i int32) *WinConfigUpdateOne {
	wcuo.mutation.AddCreatedAt(i)
	return wcuo
}

// SetUpdatedAt sets the "updated_at" field.
func (wcuo *WinConfigUpdateOne) SetUpdatedAt(i int32) *WinConfigUpdateOne {
	wcuo.mutation.ResetUpdatedAt()
	wcuo.mutation.SetUpdatedAt(i)
	return wcuo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (wcuo *WinConfigUpdateOne) AddUpdatedAt(i int32) *WinConfigUpdateOne {
	wcuo.mutation.AddUpdatedAt(i)
	return wcuo
}

// Mutation returns the WinConfigMutation object of the builder.
func (wcuo *WinConfigUpdateOne) Mutation() *WinConfigMutation {
	return wcuo.mutation
}

// Where appends a list predicates to the WinConfigUpdate builder.
func (wcuo *WinConfigUpdateOne) Where(ps ...predicate.WinConfig) *WinConfigUpdateOne {
	wcuo.mutation.Where(ps...)
	return wcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wcuo *WinConfigUpdateOne) Select(field string, fields ...string) *WinConfigUpdateOne {
	wcuo.fields = append([]string{field}, fields...)
	return wcuo
}

// Save executes the query and returns the updated WinConfig entity.
func (wcuo *WinConfigUpdateOne) Save(ctx context.Context) (*WinConfig, error) {
	return withHooks(ctx, wcuo.sqlSave, wcuo.mutation, wcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wcuo *WinConfigUpdateOne) SaveX(ctx context.Context) *WinConfig {
	node, err := wcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wcuo *WinConfigUpdateOne) Exec(ctx context.Context) error {
	_, err := wcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wcuo *WinConfigUpdateOne) ExecX(ctx context.Context) {
	if err := wcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wcuo *WinConfigUpdateOne) sqlSave(ctx context.Context) (_node *WinConfig, err error) {
	_spec := sqlgraph.NewUpdateSpec(winconfig.Table, winconfig.Columns, sqlgraph.NewFieldSpec(winconfig.FieldID, field.TypeInt32))
	id, ok := wcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WinConfig.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, winconfig.FieldID)
		for _, f := range fields {
			if !winconfig.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != winconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wcuo.mutation.Title(); ok {
		_spec.SetField(winconfig.FieldTitle, field.TypeString, value)
	}
	if value, ok := wcuo.mutation.TitleZh(); ok {
		_spec.SetField(winconfig.FieldTitleZh, field.TypeString, value)
	}
	if value, ok := wcuo.mutation.Value(); ok {
		_spec.SetField(winconfig.FieldValue, field.TypeString, value)
	}
	if value, ok := wcuo.mutation.ShowApp(); ok {
		_spec.SetField(winconfig.FieldShowApp, field.TypeInt8, value)
	}
	if value, ok := wcuo.mutation.AddedShowApp(); ok {
		_spec.AddField(winconfig.FieldShowApp, field.TypeInt8, value)
	}
	if value, ok := wcuo.mutation.CanModify(); ok {
		_spec.SetField(winconfig.FieldCanModify, field.TypeInt8, value)
	}
	if value, ok := wcuo.mutation.AddedCanModify(); ok {
		_spec.AddField(winconfig.FieldCanModify, field.TypeInt8, value)
	}
	if value, ok := wcuo.mutation.Status(); ok {
		_spec.SetField(winconfig.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := wcuo.mutation.AddedStatus(); ok {
		_spec.AddField(winconfig.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := wcuo.mutation.CreatedAt(); ok {
		_spec.SetField(winconfig.FieldCreatedAt, field.TypeInt32, value)
	}
	if value, ok := wcuo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(winconfig.FieldCreatedAt, field.TypeInt32, value)
	}
	if value, ok := wcuo.mutation.UpdatedAt(); ok {
		_spec.SetField(winconfig.FieldUpdatedAt, field.TypeInt32, value)
	}
	if value, ok := wcuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(winconfig.FieldUpdatedAt, field.TypeInt32, value)
	}
	_node = &WinConfig{config: wcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{winconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wcuo.mutation.done = true
	return _node, nil
}
