// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.skig.tech/zero-core/common/ent/predicate"
	"gitlab.skig.tech/zero-core/common/ent/winbetslipsdetail"
)

// WinBetslipsDetailQuery is the builder for querying WinBetslipsDetail entities.
type WinBetslipsDetailQuery struct {
	config
	ctx        *QueryContext
	order      []winbetslipsdetail.OrderOption
	inters     []Interceptor
	predicates []predicate.WinBetslipsDetail
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the WinBetslipsDetailQuery builder.
func (wbdq *WinBetslipsDetailQuery) Where(ps ...predicate.WinBetslipsDetail) *WinBetslipsDetailQuery {
	wbdq.predicates = append(wbdq.predicates, ps...)
	return wbdq
}

// Limit the number of records to be returned by this query.
func (wbdq *WinBetslipsDetailQuery) Limit(limit int) *WinBetslipsDetailQuery {
	wbdq.ctx.Limit = &limit
	return wbdq
}

// Offset to start from.
func (wbdq *WinBetslipsDetailQuery) Offset(offset int) *WinBetslipsDetailQuery {
	wbdq.ctx.Offset = &offset
	return wbdq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (wbdq *WinBetslipsDetailQuery) Unique(unique bool) *WinBetslipsDetailQuery {
	wbdq.ctx.Unique = &unique
	return wbdq
}

// Order specifies how the records should be ordered.
func (wbdq *WinBetslipsDetailQuery) Order(o ...winbetslipsdetail.OrderOption) *WinBetslipsDetailQuery {
	wbdq.order = append(wbdq.order, o...)
	return wbdq
}

// First returns the first WinBetslipsDetail entity from the query.
// Returns a *NotFoundError when no WinBetslipsDetail was found.
func (wbdq *WinBetslipsDetailQuery) First(ctx context.Context) (*WinBetslipsDetail, error) {
	nodes, err := wbdq.Limit(1).All(setContextOp(ctx, wbdq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{winbetslipsdetail.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (wbdq *WinBetslipsDetailQuery) FirstX(ctx context.Context) *WinBetslipsDetail {
	node, err := wbdq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first WinBetslipsDetail ID from the query.
// Returns a *NotFoundError when no WinBetslipsDetail ID was found.
func (wbdq *WinBetslipsDetailQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = wbdq.Limit(1).IDs(setContextOp(ctx, wbdq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{winbetslipsdetail.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (wbdq *WinBetslipsDetailQuery) FirstIDX(ctx context.Context) int {
	id, err := wbdq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single WinBetslipsDetail entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one WinBetslipsDetail entity is found.
// Returns a *NotFoundError when no WinBetslipsDetail entities are found.
func (wbdq *WinBetslipsDetailQuery) Only(ctx context.Context) (*WinBetslipsDetail, error) {
	nodes, err := wbdq.Limit(2).All(setContextOp(ctx, wbdq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{winbetslipsdetail.Label}
	default:
		return nil, &NotSingularError{winbetslipsdetail.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (wbdq *WinBetslipsDetailQuery) OnlyX(ctx context.Context) *WinBetslipsDetail {
	node, err := wbdq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only WinBetslipsDetail ID in the query.
// Returns a *NotSingularError when more than one WinBetslipsDetail ID is found.
// Returns a *NotFoundError when no entities are found.
func (wbdq *WinBetslipsDetailQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = wbdq.Limit(2).IDs(setContextOp(ctx, wbdq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{winbetslipsdetail.Label}
	default:
		err = &NotSingularError{winbetslipsdetail.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (wbdq *WinBetslipsDetailQuery) OnlyIDX(ctx context.Context) int {
	id, err := wbdq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of WinBetslipsDetails.
func (wbdq *WinBetslipsDetailQuery) All(ctx context.Context) ([]*WinBetslipsDetail, error) {
	ctx = setContextOp(ctx, wbdq.ctx, "All")
	if err := wbdq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*WinBetslipsDetail, *WinBetslipsDetailQuery]()
	return withInterceptors[[]*WinBetslipsDetail](ctx, wbdq, qr, wbdq.inters)
}

// AllX is like All, but panics if an error occurs.
func (wbdq *WinBetslipsDetailQuery) AllX(ctx context.Context) []*WinBetslipsDetail {
	nodes, err := wbdq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of WinBetslipsDetail IDs.
func (wbdq *WinBetslipsDetailQuery) IDs(ctx context.Context) (ids []int, err error) {
	if wbdq.ctx.Unique == nil && wbdq.path != nil {
		wbdq.Unique(true)
	}
	ctx = setContextOp(ctx, wbdq.ctx, "IDs")
	if err = wbdq.Select(winbetslipsdetail.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (wbdq *WinBetslipsDetailQuery) IDsX(ctx context.Context) []int {
	ids, err := wbdq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (wbdq *WinBetslipsDetailQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, wbdq.ctx, "Count")
	if err := wbdq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, wbdq, querierCount[*WinBetslipsDetailQuery](), wbdq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (wbdq *WinBetslipsDetailQuery) CountX(ctx context.Context) int {
	count, err := wbdq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (wbdq *WinBetslipsDetailQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, wbdq.ctx, "Exist")
	switch _, err := wbdq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (wbdq *WinBetslipsDetailQuery) ExistX(ctx context.Context) bool {
	exist, err := wbdq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the WinBetslipsDetailQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (wbdq *WinBetslipsDetailQuery) Clone() *WinBetslipsDetailQuery {
	if wbdq == nil {
		return nil
	}
	return &WinBetslipsDetailQuery{
		config:     wbdq.config,
		ctx:        wbdq.ctx.Clone(),
		order:      append([]winbetslipsdetail.OrderOption{}, wbdq.order...),
		inters:     append([]Interceptor{}, wbdq.inters...),
		predicates: append([]predicate.WinBetslipsDetail{}, wbdq.predicates...),
		// clone intermediate query.
		sql:  wbdq.sql.Clone(),
		path: wbdq.path,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		XbUID uint32 `json:"xb_uid,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.WinBetslipsDetail.Query().
//		GroupBy(winbetslipsdetail.FieldXbUID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (wbdq *WinBetslipsDetailQuery) GroupBy(field string, fields ...string) *WinBetslipsDetailGroupBy {
	wbdq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &WinBetslipsDetailGroupBy{build: wbdq}
	grbuild.flds = &wbdq.ctx.Fields
	grbuild.label = winbetslipsdetail.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		XbUID uint32 `json:"xb_uid,omitempty"`
//	}
//
//	client.WinBetslipsDetail.Query().
//		Select(winbetslipsdetail.FieldXbUID).
//		Scan(ctx, &v)
func (wbdq *WinBetslipsDetailQuery) Select(fields ...string) *WinBetslipsDetailSelect {
	wbdq.ctx.Fields = append(wbdq.ctx.Fields, fields...)
	sbuild := &WinBetslipsDetailSelect{WinBetslipsDetailQuery: wbdq}
	sbuild.label = winbetslipsdetail.Label
	sbuild.flds, sbuild.scan = &wbdq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a WinBetslipsDetailSelect configured with the given aggregations.
func (wbdq *WinBetslipsDetailQuery) Aggregate(fns ...AggregateFunc) *WinBetslipsDetailSelect {
	return wbdq.Select().Aggregate(fns...)
}

func (wbdq *WinBetslipsDetailQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range wbdq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, wbdq); err != nil {
				return err
			}
		}
	}
	for _, f := range wbdq.ctx.Fields {
		if !winbetslipsdetail.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if wbdq.path != nil {
		prev, err := wbdq.path(ctx)
		if err != nil {
			return err
		}
		wbdq.sql = prev
	}
	return nil
}

func (wbdq *WinBetslipsDetailQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*WinBetslipsDetail, error) {
	var (
		nodes = []*WinBetslipsDetail{}
		_spec = wbdq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*WinBetslipsDetail).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &WinBetslipsDetail{config: wbdq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, wbdq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (wbdq *WinBetslipsDetailQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := wbdq.querySpec()
	_spec.Node.Columns = wbdq.ctx.Fields
	if len(wbdq.ctx.Fields) > 0 {
		_spec.Unique = wbdq.ctx.Unique != nil && *wbdq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, wbdq.driver, _spec)
}

func (wbdq *WinBetslipsDetailQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(winbetslipsdetail.Table, winbetslipsdetail.Columns, sqlgraph.NewFieldSpec(winbetslipsdetail.FieldID, field.TypeInt))
	_spec.From = wbdq.sql
	if unique := wbdq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if wbdq.path != nil {
		_spec.Unique = true
	}
	if fields := wbdq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, winbetslipsdetail.FieldID)
		for i := range fields {
			if fields[i] != winbetslipsdetail.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := wbdq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := wbdq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := wbdq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := wbdq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (wbdq *WinBetslipsDetailQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(wbdq.driver.Dialect())
	t1 := builder.Table(winbetslipsdetail.Table)
	columns := wbdq.ctx.Fields
	if len(columns) == 0 {
		columns = winbetslipsdetail.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if wbdq.sql != nil {
		selector = wbdq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if wbdq.ctx.Unique != nil && *wbdq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range wbdq.predicates {
		p(selector)
	}
	for _, p := range wbdq.order {
		p(selector)
	}
	if offset := wbdq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := wbdq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

func (wbdq *WinBetslipsDetailQuery) SqlQuery(ctx context.Context) (r1 string, r2 []any) {
	builder := sql.Dialect(wbdq.driver.Dialect())
	t1 := builder.Table(winbetslipsdetail.Table)
	columns := wbdq.ctx.Fields
	if len(columns) == 0 {
		columns = winbetslipsdetail.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if wbdq.sql != nil {
		selector = wbdq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if wbdq.ctx.Unique != nil && *wbdq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range wbdq.predicates {
		p(selector)
	}
	for _, p := range wbdq.order {
		p(selector)
	}
	if offset := wbdq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := wbdq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	r1, r2 = selector.Query()
	//r3 = make([]*WinBetslipsDetail,0)

	return
}

// WinBetslipsDetailGroupBy is the group-by builder for WinBetslipsDetail entities.
type WinBetslipsDetailGroupBy struct {
	selector
	build *WinBetslipsDetailQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (wbdgb *WinBetslipsDetailGroupBy) Aggregate(fns ...AggregateFunc) *WinBetslipsDetailGroupBy {
	wbdgb.fns = append(wbdgb.fns, fns...)
	return wbdgb
}

// Scan applies the selector query and scans the result into the given value.
func (wbdgb *WinBetslipsDetailGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, wbdgb.build.ctx, "GroupBy")
	if err := wbdgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*WinBetslipsDetailQuery, *WinBetslipsDetailGroupBy](ctx, wbdgb.build, wbdgb, wbdgb.build.inters, v)
}

func (wbdgb *WinBetslipsDetailGroupBy) sqlScan(ctx context.Context, root *WinBetslipsDetailQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(wbdgb.fns))
	for _, fn := range wbdgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*wbdgb.flds)+len(wbdgb.fns))
		for _, f := range *wbdgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*wbdgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := wbdgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// WinBetslipsDetailSelect is the builder for selecting fields of WinBetslipsDetail entities.
type WinBetslipsDetailSelect struct {
	*WinBetslipsDetailQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (wbds *WinBetslipsDetailSelect) Aggregate(fns ...AggregateFunc) *WinBetslipsDetailSelect {
	wbds.fns = append(wbds.fns, fns...)
	return wbds
}

// Scan applies the selector query and scans the result into the given value.
func (wbds *WinBetslipsDetailSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, wbds.ctx, "Select")
	if err := wbds.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*WinBetslipsDetailQuery, *WinBetslipsDetailSelect](ctx, wbds.WinBetslipsDetailQuery, wbds, wbds.inters, v)
}

func (wbds *WinBetslipsDetailSelect) sqlScan(ctx context.Context, root *WinBetslipsDetailQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(wbds.fns))
	for _, fn := range wbds.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*wbds.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := wbds.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
