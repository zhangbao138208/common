// Code generated by ent, DO NOT EDIT.

package wingamelist

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the wingamelist type in the database.
	Label = "win_game_list"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCode holds the string denoting the code field in the database.
	FieldCode = "code"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldIcon holds the string denoting the icon field in the database.
	FieldIcon = "icon"
	// FieldGroupID holds the string denoting the group_id field in the database.
	FieldGroupID = "group_id"
	// FieldPlatListID holds the string denoting the plat_list_id field in the database.
	FieldPlatListID = "plat_list_id"
	// FieldRevenueRate holds the string denoting the revenue_rate field in the database.
	FieldRevenueRate = "revenue_rate"
	// FieldMaintenance holds the string denoting the maintenance field in the database.
	FieldMaintenance = "maintenance"
	// FieldGameCount holds the string denoting the game_count field in the database.
	FieldGameCount = "game_count"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// FieldSort holds the string denoting the sort field in the database.
	FieldSort = "sort"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldUpdatedUser holds the string denoting the updated_user field in the database.
	FieldUpdatedUser = "updated_user"
	// FieldOperatorName holds the string denoting the operator_name field in the database.
	FieldOperatorName = "operator_name"
	// FieldCategory holds the string denoting the category field in the database.
	FieldCategory = "category"
	// Table holds the table name of the wingamelist in the database.
	Table = "win_game_list"
)

// Columns holds all SQL columns for wingamelist fields.
var Columns = []string{
	FieldID,
	FieldCode,
	FieldName,
	FieldIcon,
	FieldGroupID,
	FieldPlatListID,
	FieldRevenueRate,
	FieldMaintenance,
	FieldGameCount,
	FieldRemark,
	FieldSort,
	FieldStatus,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldUpdatedUser,
	FieldOperatorName,
	FieldCategory,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the WinGameList queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCode orders the results by the code field.
func ByCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCode, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByIcon orders the results by the icon field.
func ByIcon(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIcon, opts...).ToFunc()
}

// ByGroupID orders the results by the group_id field.
func ByGroupID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGroupID, opts...).ToFunc()
}

// ByPlatListID orders the results by the plat_list_id field.
func ByPlatListID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPlatListID, opts...).ToFunc()
}

// ByRevenueRate orders the results by the revenue_rate field.
func ByRevenueRate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRevenueRate, opts...).ToFunc()
}

// ByMaintenance orders the results by the maintenance field.
func ByMaintenance(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMaintenance, opts...).ToFunc()
}

// ByGameCount orders the results by the game_count field.
func ByGameCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGameCount, opts...).ToFunc()
}

// ByRemark orders the results by the remark field.
func ByRemark(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemark, opts...).ToFunc()
}

// BySort orders the results by the sort field.
func BySort(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSort, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByUpdatedUser orders the results by the updated_user field.
func ByUpdatedUser(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedUser, opts...).ToFunc()
}

// ByOperatorName orders the results by the operator_name field.
func ByOperatorName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOperatorName, opts...).ToFunc()
}

// ByCategory orders the results by the category field.
func ByCategory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategory, opts...).ToFunc()
}
