// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.skig.tech/zero-core/common/ent/predicate"
	"gitlab.skig.tech/zero-core/common/ent/wincoinlog"
)

// WinCoinLogDelete is the builder for deleting a WinCoinLog entity.
type WinCoinLogDelete struct {
	config
	hooks    []Hook
	mutation *WinCoinLogMutation
}

// Where appends a list predicates to the WinCoinLogDelete builder.
func (wcld *WinCoinLogDelete) Where(ps ...predicate.WinCoinLog) *WinCoinLogDelete {
	wcld.mutation.Where(ps...)
	return wcld
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (wcld *WinCoinLogDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, wcld.sqlExec, wcld.mutation, wcld.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (wcld *WinCoinLogDelete) ExecX(ctx context.Context) int {
	n, err := wcld.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (wcld *WinCoinLogDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(wincoinlog.Table, sqlgraph.NewFieldSpec(wincoinlog.FieldID, field.TypeInt))
	if ps := wcld.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, wcld.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	wcld.mutation.done = true
	return affected, err
}

// WinCoinLogDeleteOne is the builder for deleting a single WinCoinLog entity.
type WinCoinLogDeleteOne struct {
	wcld *WinCoinLogDelete
}

// Where appends a list predicates to the WinCoinLogDelete builder.
func (wcldo *WinCoinLogDeleteOne) Where(ps ...predicate.WinCoinLog) *WinCoinLogDeleteOne {
	wcldo.wcld.mutation.Where(ps...)
	return wcldo
}

// Exec executes the deletion query.
func (wcldo *WinCoinLogDeleteOne) Exec(ctx context.Context) error {
	n, err := wcldo.wcld.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{wincoinlog.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (wcldo *WinCoinLogDeleteOne) ExecX(ctx context.Context) {
	if err := wcldo.Exec(ctx); err != nil {
		panic(err)
	}
}
