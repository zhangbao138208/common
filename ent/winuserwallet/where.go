// Code generated by ent, DO NOT EDIT.

package winuserwallet

import (
	"entgo.io/ent/dialect/sql"
	"gitlab.skig.tech/zero-core/common/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int32) predicate.WinUserWallet {
	return predicate.WinUserWallet(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int32) predicate.WinUserWallet {
	return predicate.WinUserWallet(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int32) predicate.WinUserWallet {
	return predicate.WinUserWallet(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int32) predicate.WinUserWallet {
	return predicate.WinUserWallet(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int32) predicate.WinUserWallet {
	return predicate.WinUserWallet(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int32) predicate.WinUserWallet {
	return predicate.WinUserWallet(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int32) predicate.WinUserWallet {
	return predicate.WinUserWallet(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int32) predicate.WinUserWallet {
	return predicate.WinUserWallet(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int32) predicate.WinUserWallet {
	return predicate.WinUserWallet(sql.FieldLTE(FieldID, id))
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v string) predicate.WinUserWallet {
	return predicate.WinUserWallet(sql.FieldEQ(FieldUsername, v))
}

// Coin applies equality check predicate on the "coin" field. It's identical to CoinEQ.
func Coin(v float64) predicate.WinUserWallet {
	return predicate.WinUserWallet(sql.FieldEQ(FieldCoin, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v int) predicate.WinUserWallet {
	return predicate.WinUserWallet(sql.FieldEQ(FieldVersion, v))
}

// ModifyAt applies equality check predicate on the "modify_at" field. It's identical to ModifyAtEQ.
func ModifyAt(v int) predicate.WinUserWallet {
	return predicate.WinUserWallet(sql.FieldEQ(FieldModifyAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v int32) predicate.WinUserWallet {
	return predicate.WinUserWallet(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v int32) predicate.WinUserWallet {
	return predicate.WinUserWallet(sql.FieldEQ(FieldUpdatedAt, v))
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v string) predicate.WinUserWallet {
	return predicate.WinUserWallet(sql.FieldEQ(FieldUsername, v))
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v string) predicate.WinUserWallet {
	return predicate.WinUserWallet(sql.FieldNEQ(FieldUsername, v))
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...string) predicate.WinUserWallet {
	return predicate.WinUserWallet(sql.FieldIn(FieldUsername, vs...))
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...string) predicate.WinUserWallet {
	return predicate.WinUserWallet(sql.FieldNotIn(FieldUsername, vs...))
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v string) predicate.WinUserWallet {
	return predicate.WinUserWallet(sql.FieldGT(FieldUsername, v))
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v string) predicate.WinUserWallet {
	return predicate.WinUserWallet(sql.FieldGTE(FieldUsername, v))
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v string) predicate.WinUserWallet {
	return predicate.WinUserWallet(sql.FieldLT(FieldUsername, v))
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v string) predicate.WinUserWallet {
	return predicate.WinUserWallet(sql.FieldLTE(FieldUsername, v))
}

// UsernameContains applies the Contains predicate on the "username" field.
func UsernameContains(v string) predicate.WinUserWallet {
	return predicate.WinUserWallet(sql.FieldContains(FieldUsername, v))
}

// UsernameHasPrefix applies the HasPrefix predicate on the "username" field.
func UsernameHasPrefix(v string) predicate.WinUserWallet {
	return predicate.WinUserWallet(sql.FieldHasPrefix(FieldUsername, v))
}

// UsernameHasSuffix applies the HasSuffix predicate on the "username" field.
func UsernameHasSuffix(v string) predicate.WinUserWallet {
	return predicate.WinUserWallet(sql.FieldHasSuffix(FieldUsername, v))
}

// UsernameEqualFold applies the EqualFold predicate on the "username" field.
func UsernameEqualFold(v string) predicate.WinUserWallet {
	return predicate.WinUserWallet(sql.FieldEqualFold(FieldUsername, v))
}

// UsernameContainsFold applies the ContainsFold predicate on the "username" field.
func UsernameContainsFold(v string) predicate.WinUserWallet {
	return predicate.WinUserWallet(sql.FieldContainsFold(FieldUsername, v))
}

// CoinEQ applies the EQ predicate on the "coin" field.
func CoinEQ(v float64) predicate.WinUserWallet {
	return predicate.WinUserWallet(sql.FieldEQ(FieldCoin, v))
}

// CoinNEQ applies the NEQ predicate on the "coin" field.
func CoinNEQ(v float64) predicate.WinUserWallet {
	return predicate.WinUserWallet(sql.FieldNEQ(FieldCoin, v))
}

// CoinIn applies the In predicate on the "coin" field.
func CoinIn(vs ...float64) predicate.WinUserWallet {
	return predicate.WinUserWallet(sql.FieldIn(FieldCoin, vs...))
}

// CoinNotIn applies the NotIn predicate on the "coin" field.
func CoinNotIn(vs ...float64) predicate.WinUserWallet {
	return predicate.WinUserWallet(sql.FieldNotIn(FieldCoin, vs...))
}

// CoinGT applies the GT predicate on the "coin" field.
func CoinGT(v float64) predicate.WinUserWallet {
	return predicate.WinUserWallet(sql.FieldGT(FieldCoin, v))
}

// CoinGTE applies the GTE predicate on the "coin" field.
func CoinGTE(v float64) predicate.WinUserWallet {
	return predicate.WinUserWallet(sql.FieldGTE(FieldCoin, v))
}

// CoinLT applies the LT predicate on the "coin" field.
func CoinLT(v float64) predicate.WinUserWallet {
	return predicate.WinUserWallet(sql.FieldLT(FieldCoin, v))
}

// CoinLTE applies the LTE predicate on the "coin" field.
func CoinLTE(v float64) predicate.WinUserWallet {
	return predicate.WinUserWallet(sql.FieldLTE(FieldCoin, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v int) predicate.WinUserWallet {
	return predicate.WinUserWallet(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v int) predicate.WinUserWallet {
	return predicate.WinUserWallet(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...int) predicate.WinUserWallet {
	return predicate.WinUserWallet(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...int) predicate.WinUserWallet {
	return predicate.WinUserWallet(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v int) predicate.WinUserWallet {
	return predicate.WinUserWallet(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v int) predicate.WinUserWallet {
	return predicate.WinUserWallet(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v int) predicate.WinUserWallet {
	return predicate.WinUserWallet(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v int) predicate.WinUserWallet {
	return predicate.WinUserWallet(sql.FieldLTE(FieldVersion, v))
}

// VersionIsNil applies the IsNil predicate on the "version" field.
func VersionIsNil() predicate.WinUserWallet {
	return predicate.WinUserWallet(sql.FieldIsNull(FieldVersion))
}

// VersionNotNil applies the NotNil predicate on the "version" field.
func VersionNotNil() predicate.WinUserWallet {
	return predicate.WinUserWallet(sql.FieldNotNull(FieldVersion))
}

// ModifyAtEQ applies the EQ predicate on the "modify_at" field.
func ModifyAtEQ(v int) predicate.WinUserWallet {
	return predicate.WinUserWallet(sql.FieldEQ(FieldModifyAt, v))
}

// ModifyAtNEQ applies the NEQ predicate on the "modify_at" field.
func ModifyAtNEQ(v int) predicate.WinUserWallet {
	return predicate.WinUserWallet(sql.FieldNEQ(FieldModifyAt, v))
}

// ModifyAtIn applies the In predicate on the "modify_at" field.
func ModifyAtIn(vs ...int) predicate.WinUserWallet {
	return predicate.WinUserWallet(sql.FieldIn(FieldModifyAt, vs...))
}

// ModifyAtNotIn applies the NotIn predicate on the "modify_at" field.
func ModifyAtNotIn(vs ...int) predicate.WinUserWallet {
	return predicate.WinUserWallet(sql.FieldNotIn(FieldModifyAt, vs...))
}

// ModifyAtGT applies the GT predicate on the "modify_at" field.
func ModifyAtGT(v int) predicate.WinUserWallet {
	return predicate.WinUserWallet(sql.FieldGT(FieldModifyAt, v))
}

// ModifyAtGTE applies the GTE predicate on the "modify_at" field.
func ModifyAtGTE(v int) predicate.WinUserWallet {
	return predicate.WinUserWallet(sql.FieldGTE(FieldModifyAt, v))
}

// ModifyAtLT applies the LT predicate on the "modify_at" field.
func ModifyAtLT(v int) predicate.WinUserWallet {
	return predicate.WinUserWallet(sql.FieldLT(FieldModifyAt, v))
}

// ModifyAtLTE applies the LTE predicate on the "modify_at" field.
func ModifyAtLTE(v int) predicate.WinUserWallet {
	return predicate.WinUserWallet(sql.FieldLTE(FieldModifyAt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v int32) predicate.WinUserWallet {
	return predicate.WinUserWallet(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v int32) predicate.WinUserWallet {
	return predicate.WinUserWallet(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...int32) predicate.WinUserWallet {
	return predicate.WinUserWallet(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...int32) predicate.WinUserWallet {
	return predicate.WinUserWallet(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v int32) predicate.WinUserWallet {
	return predicate.WinUserWallet(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v int32) predicate.WinUserWallet {
	return predicate.WinUserWallet(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v int32) predicate.WinUserWallet {
	return predicate.WinUserWallet(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v int32) predicate.WinUserWallet {
	return predicate.WinUserWallet(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v int32) predicate.WinUserWallet {
	return predicate.WinUserWallet(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v int32) predicate.WinUserWallet {
	return predicate.WinUserWallet(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...int32) predicate.WinUserWallet {
	return predicate.WinUserWallet(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...int32) predicate.WinUserWallet {
	return predicate.WinUserWallet(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v int32) predicate.WinUserWallet {
	return predicate.WinUserWallet(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v int32) predicate.WinUserWallet {
	return predicate.WinUserWallet(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v int32) predicate.WinUserWallet {
	return predicate.WinUserWallet(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v int32) predicate.WinUserWallet {
	return predicate.WinUserWallet(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.WinUserWallet) predicate.WinUserWallet {
	return predicate.WinUserWallet(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.WinUserWallet) predicate.WinUserWallet {
	return predicate.WinUserWallet(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.WinUserWallet) predicate.WinUserWallet {
	return predicate.WinUserWallet(func(s *sql.Selector) {
		p(s.Not())
	})
}
