// Code generated by ent, DO NOT EDIT.

package winconfig

import (
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the winconfig type in the database.
	Label = "win_config"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldTitleZh holds the string denoting the title_zh field in the database.
	FieldTitleZh = "title_zh"
	// FieldValue holds the string denoting the value field in the database.
	FieldValue = "value"
	// FieldShowApp holds the string denoting the show_app field in the database.
	FieldShowApp = "show_app"
	// FieldCanModify holds the string denoting the can_modify field in the database.
	FieldCanModify = "can_modify"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// Table holds the table name of the winconfig in the database.
	Table = "win_config"
)

// Columns holds all SQL columns for winconfig fields.
var Columns = []string{
	FieldID,
	FieldTitle,
	FieldTitleZh,
	FieldValue,
	FieldShowApp,
	FieldCanModify,
	FieldStatus,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "gitlab.skig.tech/zero-core/common/ent/runtime"
var (
	Interceptors [1]ent.Interceptor
)

// OrderOption defines the ordering options for the WinConfig queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByTitleZh orders the results by the title_zh field.
func ByTitleZh(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitleZh, opts...).ToFunc()
}

// ByValue orders the results by the value field.
func ByValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldValue, opts...).ToFunc()
}

// ByShowApp orders the results by the show_app field.
func ByShowApp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldShowApp, opts...).ToFunc()
}

// ByCanModify orders the results by the can_modify field.
func ByCanModify(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCanModify, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}
