// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.skig.tech/zero-core/common/ent/wincoinlog"
)

// WinCoinLogCreate is the builder for creating a WinCoinLog entity.
type WinCoinLogCreate struct {
	config
	mutation *WinCoinLogMutation
	hooks    []Hook
}

// SetUID sets the "uid" field.
func (wclc *WinCoinLogCreate) SetUID(i int32) *WinCoinLogCreate {
	wclc.mutation.SetUID(i)
	return wclc
}

// SetUsername sets the "username" field.
func (wclc *WinCoinLogCreate) SetUsername(s string) *WinCoinLogCreate {
	wclc.mutation.SetUsername(s)
	return wclc
}

// SetCategory sets the "category" field.
func (wclc *WinCoinLogCreate) SetCategory(i int8) *WinCoinLogCreate {
	wclc.mutation.SetCategory(i)
	return wclc
}

// SetReferID sets the "refer_id" field.
func (wclc *WinCoinLogCreate) SetReferID(i int) *WinCoinLogCreate {
	wclc.mutation.SetReferID(i)
	return wclc
}

// SetNillableReferID sets the "refer_id" field if the given value is not nil.
func (wclc *WinCoinLogCreate) SetNillableReferID(i *int) *WinCoinLogCreate {
	if i != nil {
		wclc.SetReferID(*i)
	}
	return wclc
}

// SetCoin sets the "coin" field.
func (wclc *WinCoinLogCreate) SetCoin(f float64) *WinCoinLogCreate {
	wclc.mutation.SetCoin(f)
	return wclc
}

// SetCoinReal sets the "coin_real" field.
func (wclc *WinCoinLogCreate) SetCoinReal(f float64) *WinCoinLogCreate {
	wclc.mutation.SetCoinReal(f)
	return wclc
}

// SetPlatID sets the "plat_id" field.
func (wclc *WinCoinLogCreate) SetPlatID(i int32) *WinCoinLogCreate {
	wclc.mutation.SetPlatID(i)
	return wclc
}

// SetOutIn sets the "out_in" field.
func (wclc *WinCoinLogCreate) SetOutIn(i int8) *WinCoinLogCreate {
	wclc.mutation.SetOutIn(i)
	return wclc
}

// SetGameID sets the "game_id" field.
func (wclc *WinCoinLogCreate) SetGameID(i int32) *WinCoinLogCreate {
	wclc.mutation.SetGameID(i)
	return wclc
}

// SetCoinBefore sets the "coin_before" field.
func (wclc *WinCoinLogCreate) SetCoinBefore(f float64) *WinCoinLogCreate {
	wclc.mutation.SetCoinBefore(f)
	return wclc
}

// SetCoinAfter sets the "coin_after" field.
func (wclc *WinCoinLogCreate) SetCoinAfter(f float64) *WinCoinLogCreate {
	wclc.mutation.SetCoinAfter(f)
	return wclc
}

// SetStatus sets the "status" field.
func (wclc *WinCoinLogCreate) SetStatus(i int8) *WinCoinLogCreate {
	wclc.mutation.SetStatus(i)
	return wclc
}

// SetCreatedAt sets the "created_at" field.
func (wclc *WinCoinLogCreate) SetCreatedAt(i int32) *WinCoinLogCreate {
	wclc.mutation.SetCreatedAt(i)
	return wclc
}

// SetUpdatedAt sets the "updated_at" field.
func (wclc *WinCoinLogCreate) SetUpdatedAt(i int32) *WinCoinLogCreate {
	wclc.mutation.SetUpdatedAt(i)
	return wclc
}

// SetID sets the "id" field.
func (wclc *WinCoinLogCreate) SetID(i int) *WinCoinLogCreate {
	wclc.mutation.SetID(i)
	return wclc
}

// Mutation returns the WinCoinLogMutation object of the builder.
func (wclc *WinCoinLogCreate) Mutation() *WinCoinLogMutation {
	return wclc.mutation
}

// Save creates the WinCoinLog in the database.
func (wclc *WinCoinLogCreate) Save(ctx context.Context) (*WinCoinLog, error) {
	return withHooks(ctx, wclc.sqlSave, wclc.mutation, wclc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wclc *WinCoinLogCreate) SaveX(ctx context.Context) *WinCoinLog {
	v, err := wclc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wclc *WinCoinLogCreate) Exec(ctx context.Context) error {
	_, err := wclc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wclc *WinCoinLogCreate) ExecX(ctx context.Context) {
	if err := wclc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wclc *WinCoinLogCreate) check() error {
	if _, ok := wclc.mutation.UID(); !ok {
		return &ValidationError{Name: "uid", err: errors.New(`ent: missing required field "WinCoinLog.uid"`)}
	}
	if _, ok := wclc.mutation.Username(); !ok {
		return &ValidationError{Name: "username", err: errors.New(`ent: missing required field "WinCoinLog.username"`)}
	}
	if _, ok := wclc.mutation.Category(); !ok {
		return &ValidationError{Name: "category", err: errors.New(`ent: missing required field "WinCoinLog.category"`)}
	}
	if _, ok := wclc.mutation.Coin(); !ok {
		return &ValidationError{Name: "coin", err: errors.New(`ent: missing required field "WinCoinLog.coin"`)}
	}
	if _, ok := wclc.mutation.CoinReal(); !ok {
		return &ValidationError{Name: "coin_real", err: errors.New(`ent: missing required field "WinCoinLog.coin_real"`)}
	}
	if _, ok := wclc.mutation.PlatID(); !ok {
		return &ValidationError{Name: "plat_id", err: errors.New(`ent: missing required field "WinCoinLog.plat_id"`)}
	}
	if _, ok := wclc.mutation.OutIn(); !ok {
		return &ValidationError{Name: "out_in", err: errors.New(`ent: missing required field "WinCoinLog.out_in"`)}
	}
	if _, ok := wclc.mutation.GameID(); !ok {
		return &ValidationError{Name: "game_id", err: errors.New(`ent: missing required field "WinCoinLog.game_id"`)}
	}
	if _, ok := wclc.mutation.CoinBefore(); !ok {
		return &ValidationError{Name: "coin_before", err: errors.New(`ent: missing required field "WinCoinLog.coin_before"`)}
	}
	if _, ok := wclc.mutation.CoinAfter(); !ok {
		return &ValidationError{Name: "coin_after", err: errors.New(`ent: missing required field "WinCoinLog.coin_after"`)}
	}
	if _, ok := wclc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "WinCoinLog.status"`)}
	}
	if _, ok := wclc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "WinCoinLog.created_at"`)}
	}
	if _, ok := wclc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "WinCoinLog.updated_at"`)}
	}
	return nil
}

func (wclc *WinCoinLogCreate) sqlSave(ctx context.Context) (*WinCoinLog, error) {
	if err := wclc.check(); err != nil {
		return nil, err
	}
	_node, _spec := wclc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wclc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	wclc.mutation.id = &_node.ID
	wclc.mutation.done = true
	return _node, nil
}

func (wclc *WinCoinLogCreate) createSpec() (*WinCoinLog, *sqlgraph.CreateSpec) {
	var (
		_node = &WinCoinLog{config: wclc.config}
		_spec = sqlgraph.NewCreateSpec(wincoinlog.Table, sqlgraph.NewFieldSpec(wincoinlog.FieldID, field.TypeInt))
	)
	if id, ok := wclc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := wclc.mutation.UID(); ok {
		_spec.SetField(wincoinlog.FieldUID, field.TypeInt32, value)
		_node.UID = value
	}
	if value, ok := wclc.mutation.Username(); ok {
		_spec.SetField(wincoinlog.FieldUsername, field.TypeString, value)
		_node.Username = value
	}
	if value, ok := wclc.mutation.Category(); ok {
		_spec.SetField(wincoinlog.FieldCategory, field.TypeInt8, value)
		_node.Category = value
	}
	if value, ok := wclc.mutation.ReferID(); ok {
		_spec.SetField(wincoinlog.FieldReferID, field.TypeInt, value)
		_node.ReferID = value
	}
	if value, ok := wclc.mutation.Coin(); ok {
		_spec.SetField(wincoinlog.FieldCoin, field.TypeFloat64, value)
		_node.Coin = value
	}
	if value, ok := wclc.mutation.CoinReal(); ok {
		_spec.SetField(wincoinlog.FieldCoinReal, field.TypeFloat64, value)
		_node.CoinReal = value
	}
	if value, ok := wclc.mutation.PlatID(); ok {
		_spec.SetField(wincoinlog.FieldPlatID, field.TypeInt32, value)
		_node.PlatID = value
	}
	if value, ok := wclc.mutation.OutIn(); ok {
		_spec.SetField(wincoinlog.FieldOutIn, field.TypeInt8, value)
		_node.OutIn = value
	}
	if value, ok := wclc.mutation.GameID(); ok {
		_spec.SetField(wincoinlog.FieldGameID, field.TypeInt32, value)
		_node.GameID = value
	}
	if value, ok := wclc.mutation.CoinBefore(); ok {
		_spec.SetField(wincoinlog.FieldCoinBefore, field.TypeFloat64, value)
		_node.CoinBefore = value
	}
	if value, ok := wclc.mutation.CoinAfter(); ok {
		_spec.SetField(wincoinlog.FieldCoinAfter, field.TypeFloat64, value)
		_node.CoinAfter = value
	}
	if value, ok := wclc.mutation.Status(); ok {
		_spec.SetField(wincoinlog.FieldStatus, field.TypeInt8, value)
		_node.Status = value
	}
	if value, ok := wclc.mutation.CreatedAt(); ok {
		_spec.SetField(wincoinlog.FieldCreatedAt, field.TypeInt32, value)
		_node.CreatedAt = value
	}
	if value, ok := wclc.mutation.UpdatedAt(); ok {
		_spec.SetField(wincoinlog.FieldUpdatedAt, field.TypeInt32, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// WinCoinLogCreateBulk is the builder for creating many WinCoinLog entities in bulk.
type WinCoinLogCreateBulk struct {
	config
	builders []*WinCoinLogCreate
}

// Save creates the WinCoinLog entities in the database.
func (wclcb *WinCoinLogCreateBulk) Save(ctx context.Context) ([]*WinCoinLog, error) {
	specs := make([]*sqlgraph.CreateSpec, len(wclcb.builders))
	nodes := make([]*WinCoinLog, len(wclcb.builders))
	mutators := make([]Mutator, len(wclcb.builders))
	for i := range wclcb.builders {
		func(i int, root context.Context) {
			builder := wclcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WinCoinLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wclcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wclcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wclcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wclcb *WinCoinLogCreateBulk) SaveX(ctx context.Context) []*WinCoinLog {
	v, err := wclcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wclcb *WinCoinLogCreateBulk) Exec(ctx context.Context) error {
	_, err := wclcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wclcb *WinCoinLogCreateBulk) ExecX(ctx context.Context) {
	if err := wclcb.Exec(ctx); err != nil {
		panic(err)
	}
}
