// Code generated by ent, DO NOT EDIT.

package wincoinlog

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the wincoinlog type in the database.
	Label = "win_coin_log"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUID holds the string denoting the uid field in the database.
	FieldUID = "uid"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldCategory holds the string denoting the category field in the database.
	FieldCategory = "category"
	// FieldReferID holds the string denoting the refer_id field in the database.
	FieldReferID = "refer_id"
	// FieldCoin holds the string denoting the coin field in the database.
	FieldCoin = "coin"
	// FieldCoinReal holds the string denoting the coin_real field in the database.
	FieldCoinReal = "coin_real"
	// FieldPlatID holds the string denoting the plat_id field in the database.
	FieldPlatID = "plat_id"
	// FieldOutIn holds the string denoting the out_in field in the database.
	FieldOutIn = "out_in"
	// FieldGameID holds the string denoting the game_id field in the database.
	FieldGameID = "game_id"
	// FieldCoinBefore holds the string denoting the coin_before field in the database.
	FieldCoinBefore = "coin_before"
	// FieldCoinAfter holds the string denoting the coin_after field in the database.
	FieldCoinAfter = "coin_after"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// Table holds the table name of the wincoinlog in the database.
	Table = "win_coin_log"
)

// Columns holds all SQL columns for wincoinlog fields.
var Columns = []string{
	FieldID,
	FieldUID,
	FieldUsername,
	FieldCategory,
	FieldReferID,
	FieldCoin,
	FieldCoinReal,
	FieldPlatID,
	FieldOutIn,
	FieldGameID,
	FieldCoinBefore,
	FieldCoinAfter,
	FieldStatus,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the WinCoinLog queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUID orders the results by the uid field.
func ByUID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUID, opts...).ToFunc()
}

// ByUsername orders the results by the username field.
func ByUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// ByCategory orders the results by the category field.
func ByCategory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategory, opts...).ToFunc()
}

// ByReferID orders the results by the refer_id field.
func ByReferID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReferID, opts...).ToFunc()
}

// ByCoin orders the results by the coin field.
func ByCoin(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCoin, opts...).ToFunc()
}

// ByCoinReal orders the results by the coin_real field.
func ByCoinReal(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCoinReal, opts...).ToFunc()
}

// ByPlatID orders the results by the plat_id field.
func ByPlatID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPlatID, opts...).ToFunc()
}

// ByOutIn orders the results by the out_in field.
func ByOutIn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOutIn, opts...).ToFunc()
}

// ByGameID orders the results by the game_id field.
func ByGameID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGameID, opts...).ToFunc()
}

// ByCoinBefore orders the results by the coin_before field.
func ByCoinBefore(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCoinBefore, opts...).ToFunc()
}

// ByCoinAfter orders the results by the coin_after field.
func ByCoinAfter(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCoinAfter, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}
