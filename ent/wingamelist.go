// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"gitlab.skig.tech/zero-core/common/ent/wingamelist"
)

// WinGameList is the model entity for the WinGameList schema.
type WinGameList struct {
	config `json:"-"`
	// ID of the ent.
	ID int32 `json:"id,omitempty"`
	// 平台编码
	Code string `json:"code,omitempty"`
	// 名称
	Name string `json:"name,omitempty"`
	// 图标
	Icon string `json:"icon,omitempty"`
	// 类型:1-体育 2-电子 3-真人 4-捕鱼 5-棋牌 6-电竞 7-彩票 8-动物 9-快速 10-技能 11-table game
	GroupID int8 `json:"group_id,omitempty"`
	// 平台配置表ID(plat_list)
	PlatListID int32 `json:"plat_list_id,omitempty"`
	// 税收比例
	RevenueRate float64 `json:"revenue_rate,omitempty"`
	// 维护时间
	Maintenance string `json:"maintenance,omitempty"`
	// 游戏数量
	GameCount int32 `json:"game_count,omitempty"`
	// 备注
	Remark string `json:"remark,omitempty"`
	// 排序: 从高到低
	Sort int8 `json:"sort,omitempty"`
	// 状态: 1-启用 0-停用
	Status int8 `json:"status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt int32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt int32 `json:"updated_at,omitempty"`
	// 最后更新人
	UpdatedUser string `json:"updated_user,omitempty"`
	// 操作人姓名
	OperatorName string `json:"operator_name,omitempty"`
	// 分类id 外联字典id
	Category     string `json:"category,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WinGameList) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case wingamelist.FieldRevenueRate:
			values[i] = new(sql.NullFloat64)
		case wingamelist.FieldID, wingamelist.FieldGroupID, wingamelist.FieldPlatListID, wingamelist.FieldGameCount, wingamelist.FieldSort, wingamelist.FieldStatus, wingamelist.FieldCreatedAt, wingamelist.FieldUpdatedAt:
			values[i] = new(sql.NullInt64)
		case wingamelist.FieldCode, wingamelist.FieldName, wingamelist.FieldIcon, wingamelist.FieldMaintenance, wingamelist.FieldRemark, wingamelist.FieldUpdatedUser, wingamelist.FieldOperatorName, wingamelist.FieldCategory:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WinGameList fields.
func (wgl *WinGameList) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case wingamelist.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			wgl.ID = int32(value.Int64)
		case wingamelist.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				wgl.Code = value.String
			}
		case wingamelist.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				wgl.Name = value.String
			}
		case wingamelist.FieldIcon:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field icon", values[i])
			} else if value.Valid {
				wgl.Icon = value.String
			}
		case wingamelist.FieldGroupID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field group_id", values[i])
			} else if value.Valid {
				wgl.GroupID = int8(value.Int64)
			}
		case wingamelist.FieldPlatListID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field plat_list_id", values[i])
			} else if value.Valid {
				wgl.PlatListID = int32(value.Int64)
			}
		case wingamelist.FieldRevenueRate:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field revenue_rate", values[i])
			} else if value.Valid {
				wgl.RevenueRate = value.Float64
			}
		case wingamelist.FieldMaintenance:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field maintenance", values[i])
			} else if value.Valid {
				wgl.Maintenance = value.String
			}
		case wingamelist.FieldGameCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field game_count", values[i])
			} else if value.Valid {
				wgl.GameCount = int32(value.Int64)
			}
		case wingamelist.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				wgl.Remark = value.String
			}
		case wingamelist.FieldSort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sort", values[i])
			} else if value.Valid {
				wgl.Sort = int8(value.Int64)
			}
		case wingamelist.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				wgl.Status = int8(value.Int64)
			}
		case wingamelist.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				wgl.CreatedAt = int32(value.Int64)
			}
		case wingamelist.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				wgl.UpdatedAt = int32(value.Int64)
			}
		case wingamelist.FieldUpdatedUser:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_user", values[i])
			} else if value.Valid {
				wgl.UpdatedUser = value.String
			}
		case wingamelist.FieldOperatorName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field operator_name", values[i])
			} else if value.Valid {
				wgl.OperatorName = value.String
			}
		case wingamelist.FieldCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value.Valid {
				wgl.Category = value.String
			}
		default:
			wgl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the WinGameList.
// This includes values selected through modifiers, order, etc.
func (wgl *WinGameList) Value(name string) (ent.Value, error) {
	return wgl.selectValues.Get(name)
}

// Update returns a builder for updating this WinGameList.
// Note that you need to call WinGameList.Unwrap() before calling this method if this WinGameList
// was returned from a transaction, and the transaction was committed or rolled back.
func (wgl *WinGameList) Update() *WinGameListUpdateOne {
	return NewWinGameListClient(wgl.config).UpdateOne(wgl)
}

// Unwrap unwraps the WinGameList entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (wgl *WinGameList) Unwrap() *WinGameList {
	_tx, ok := wgl.config.driver.(*txDriver)
	if !ok {
		panic("ent: WinGameList is not a transactional entity")
	}
	wgl.config.driver = _tx.drv
	return wgl
}

// String implements the fmt.Stringer.
func (wgl *WinGameList) String() string {
	var builder strings.Builder
	builder.WriteString("WinGameList(")
	builder.WriteString(fmt.Sprintf("id=%v, ", wgl.ID))
	builder.WriteString("code=")
	builder.WriteString(wgl.Code)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(wgl.Name)
	builder.WriteString(", ")
	builder.WriteString("icon=")
	builder.WriteString(wgl.Icon)
	builder.WriteString(", ")
	builder.WriteString("group_id=")
	builder.WriteString(fmt.Sprintf("%v", wgl.GroupID))
	builder.WriteString(", ")
	builder.WriteString("plat_list_id=")
	builder.WriteString(fmt.Sprintf("%v", wgl.PlatListID))
	builder.WriteString(", ")
	builder.WriteString("revenue_rate=")
	builder.WriteString(fmt.Sprintf("%v", wgl.RevenueRate))
	builder.WriteString(", ")
	builder.WriteString("maintenance=")
	builder.WriteString(wgl.Maintenance)
	builder.WriteString(", ")
	builder.WriteString("game_count=")
	builder.WriteString(fmt.Sprintf("%v", wgl.GameCount))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(wgl.Remark)
	builder.WriteString(", ")
	builder.WriteString("sort=")
	builder.WriteString(fmt.Sprintf("%v", wgl.Sort))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", wgl.Status))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", wgl.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", wgl.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_user=")
	builder.WriteString(wgl.UpdatedUser)
	builder.WriteString(", ")
	builder.WriteString("operator_name=")
	builder.WriteString(wgl.OperatorName)
	builder.WriteString(", ")
	builder.WriteString("category=")
	builder.WriteString(wgl.Category)
	builder.WriteByte(')')
	return builder.String()
}

// WinGameLists is a parsable slice of WinGameList.
type WinGameLists []*WinGameList
