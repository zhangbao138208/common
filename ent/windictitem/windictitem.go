// Code generated by ent, DO NOT EDIT.

package windictitem

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the windictitem type in the database.
	Label = "win_dict_item"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCode holds the string denoting the code field in the database.
	FieldCode = "code"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// FieldSort holds the string denoting the sort field in the database.
	FieldSort = "sort"
	// FieldReferID holds the string denoting the refer_id field in the database.
	FieldReferID = "refer_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldIsShow holds the string denoting the is_show field in the database.
	FieldIsShow = "is_show"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// Table holds the table name of the windictitem in the database.
	Table = "win_dict_item"
)

// Columns holds all SQL columns for windictitem fields.
var Columns = []string{
	FieldID,
	FieldCode,
	FieldTitle,
	FieldRemark,
	FieldSort,
	FieldReferID,
	FieldStatus,
	FieldIsShow,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the WinDictItem queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCode orders the results by the code field.
func ByCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCode, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByRemark orders the results by the remark field.
func ByRemark(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemark, opts...).ToFunc()
}

// BySort orders the results by the sort field.
func BySort(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSort, opts...).ToFunc()
}

// ByReferID orders the results by the refer_id field.
func ByReferID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReferID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByIsShow orders the results by the is_show field.
func ByIsShow(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsShow, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}
