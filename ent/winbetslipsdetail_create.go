// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.skig.tech/zero-core/common/ent/winbetslipsdetail"
)

// WinBetslipsDetailCreate is the builder for creating a WinBetslipsDetail entity.
type WinBetslipsDetailCreate struct {
	config
	mutation *WinBetslipsDetailMutation
	hooks    []Hook
}

// SetXbUID sets the "xb_uid" field.
func (wbdc *WinBetslipsDetailCreate) SetXbUID(u uint32) *WinBetslipsDetailCreate {
	wbdc.mutation.SetXbUID(u)
	return wbdc
}

// SetXbUsername sets the "xb_username" field.
func (wbdc *WinBetslipsDetailCreate) SetXbUsername(s string) *WinBetslipsDetailCreate {
	wbdc.mutation.SetXbUsername(s)
	return wbdc
}

// SetBetJSON sets the "bet_json" field.
func (wbdc *WinBetslipsDetailCreate) SetBetJSON(s string) *WinBetslipsDetailCreate {
	wbdc.mutation.SetBetJSON(s)
	return wbdc
}

// SetNillableBetJSON sets the "bet_json" field if the given value is not nil.
func (wbdc *WinBetslipsDetailCreate) SetNillableBetJSON(s *string) *WinBetslipsDetailCreate {
	if s != nil {
		wbdc.SetBetJSON(*s)
	}
	return wbdc
}

// SetRewardJSON sets the "reward_json" field.
func (wbdc *WinBetslipsDetailCreate) SetRewardJSON(s string) *WinBetslipsDetailCreate {
	wbdc.mutation.SetRewardJSON(s)
	return wbdc
}

// SetNillableRewardJSON sets the "reward_json" field if the given value is not nil.
func (wbdc *WinBetslipsDetailCreate) SetNillableRewardJSON(s *string) *WinBetslipsDetailCreate {
	if s != nil {
		wbdc.SetRewardJSON(*s)
	}
	return wbdc
}

// SetRefundJSON sets the "refund_json" field.
func (wbdc *WinBetslipsDetailCreate) SetRefundJSON(s string) *WinBetslipsDetailCreate {
	wbdc.mutation.SetRefundJSON(s)
	return wbdc
}

// SetNillableRefundJSON sets the "refund_json" field if the given value is not nil.
func (wbdc *WinBetslipsDetailCreate) SetNillableRefundJSON(s *string) *WinBetslipsDetailCreate {
	if s != nil {
		wbdc.SetRefundJSON(*s)
	}
	return wbdc
}

// SetID sets the "id" field.
func (wbdc *WinBetslipsDetailCreate) SetID(i int) *WinBetslipsDetailCreate {
	wbdc.mutation.SetID(i)
	return wbdc
}

// Mutation returns the WinBetslipsDetailMutation object of the builder.
func (wbdc *WinBetslipsDetailCreate) Mutation() *WinBetslipsDetailMutation {
	return wbdc.mutation
}

// Save creates the WinBetslipsDetail in the database.
func (wbdc *WinBetslipsDetailCreate) Save(ctx context.Context) (*WinBetslipsDetail, error) {
	return withHooks(ctx, wbdc.sqlSave, wbdc.mutation, wbdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wbdc *WinBetslipsDetailCreate) SaveX(ctx context.Context) *WinBetslipsDetail {
	v, err := wbdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wbdc *WinBetslipsDetailCreate) Exec(ctx context.Context) error {
	_, err := wbdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wbdc *WinBetslipsDetailCreate) ExecX(ctx context.Context) {
	if err := wbdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wbdc *WinBetslipsDetailCreate) check() error {
	if _, ok := wbdc.mutation.XbUID(); !ok {
		return &ValidationError{Name: "xb_uid", err: errors.New(`ent: missing required field "WinBetslipsDetail.xb_uid"`)}
	}
	if _, ok := wbdc.mutation.XbUsername(); !ok {
		return &ValidationError{Name: "xb_username", err: errors.New(`ent: missing required field "WinBetslipsDetail.xb_username"`)}
	}
	return nil
}

func (wbdc *WinBetslipsDetailCreate) sqlSave(ctx context.Context) (*WinBetslipsDetail, error) {
	if err := wbdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := wbdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wbdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	wbdc.mutation.id = &_node.ID
	wbdc.mutation.done = true
	return _node, nil
}

func (wbdc *WinBetslipsDetailCreate) createSpec() (*WinBetslipsDetail, *sqlgraph.CreateSpec) {
	var (
		_node = &WinBetslipsDetail{config: wbdc.config}
		_spec = sqlgraph.NewCreateSpec(winbetslipsdetail.Table, sqlgraph.NewFieldSpec(winbetslipsdetail.FieldID, field.TypeInt))
	)
	if id, ok := wbdc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := wbdc.mutation.XbUID(); ok {
		_spec.SetField(winbetslipsdetail.FieldXbUID, field.TypeUint32, value)
		_node.XbUID = value
	}
	if value, ok := wbdc.mutation.XbUsername(); ok {
		_spec.SetField(winbetslipsdetail.FieldXbUsername, field.TypeString, value)
		_node.XbUsername = value
	}
	if value, ok := wbdc.mutation.BetJSON(); ok {
		_spec.SetField(winbetslipsdetail.FieldBetJSON, field.TypeString, value)
		_node.BetJSON = value
	}
	if value, ok := wbdc.mutation.RewardJSON(); ok {
		_spec.SetField(winbetslipsdetail.FieldRewardJSON, field.TypeString, value)
		_node.RewardJSON = value
	}
	if value, ok := wbdc.mutation.RefundJSON(); ok {
		_spec.SetField(winbetslipsdetail.FieldRefundJSON, field.TypeString, value)
		_node.RefundJSON = value
	}
	return _node, _spec
}

// WinBetslipsDetailCreateBulk is the builder for creating many WinBetslipsDetail entities in bulk.
type WinBetslipsDetailCreateBulk struct {
	config
	builders []*WinBetslipsDetailCreate
}

// Save creates the WinBetslipsDetail entities in the database.
func (wbdcb *WinBetslipsDetailCreateBulk) Save(ctx context.Context) ([]*WinBetslipsDetail, error) {
	specs := make([]*sqlgraph.CreateSpec, len(wbdcb.builders))
	nodes := make([]*WinBetslipsDetail, len(wbdcb.builders))
	mutators := make([]Mutator, len(wbdcb.builders))
	for i := range wbdcb.builders {
		func(i int, root context.Context) {
			builder := wbdcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WinBetslipsDetailMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wbdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wbdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wbdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wbdcb *WinBetslipsDetailCreateBulk) SaveX(ctx context.Context) []*WinBetslipsDetail {
	v, err := wbdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wbdcb *WinBetslipsDetailCreateBulk) Exec(ctx context.Context) error {
	_, err := wbdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wbdcb *WinBetslipsDetailCreateBulk) ExecX(ctx context.Context) {
	if err := wbdcb.Exec(ctx); err != nil {
		panic(err)
	}
}
